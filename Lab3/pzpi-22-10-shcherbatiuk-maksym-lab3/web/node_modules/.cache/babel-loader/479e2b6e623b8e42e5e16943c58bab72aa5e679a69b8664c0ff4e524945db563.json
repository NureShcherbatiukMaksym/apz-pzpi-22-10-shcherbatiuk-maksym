{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\n// pages/LoginPage.js\nimport React, { useState, useContext } from 'react';\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom'; // Потрібно для перенаправлення ПІСЛЯ повного успіху\nimport { auth, googleProvider } from '../firebase';\nimport { signInWithPopup } from 'firebase/auth';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n\n  // Отримуємо user, logoutUser та handleLoginSuccess з контексту\n  const {\n    user,\n    logoutUser,\n    handleLoginSuccess\n  } = useContext(UserContext);\n  const [loginInProgress, setLoginInProgress] = useState(false);\n  const [formError, setFormError] = useState(null); // Стан для помилок форми логіну\n\n  // --- Перенаправлення, якщо користувач вже залогінений ---\n  // Це перенаправлення відбувається, якщо App.js не перенаправив користувача раніше.\n  // Воно базується на стані `user` з контексту.\n  if (user) {\n    // Якщо user є, перенаправляємо на головну.\n    // Це важливо, щоб користувач не бачив форму логіну, якщо він вже авторизований.\n    navigate('/', {\n      replace: true\n    });\n    return null; // Або індикатор завантаження під час навігації\n  }\n\n  // --- Логіка логіну ---\n  const handleLogin = async (email, password) => {\n    setLoginInProgress(true);\n    setFormError(null); // Очищаємо попередні помилки\n\n    try {\n      console.log('LoginPage: Attempting password login...');\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Password login success. Response received.');\n\n      // --- ЗБЕРІГАННЯ В localStorage ---\n      localStorage.setItem('userName', res.data.name);\n      localStorage.setItem('isAdmin', res.data.is_admin ? 'true' : 'false'); // Зберігаємо як рядок\n      console.log('LoginPage: userName and isAdmin saved to localStorage.');\n      // --- ЗБЕРІГАННЯ В localStorage ---\n\n      // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\n      // Контекст оновить стан та запустить перевірку пристрою.\n      handleLoginSuccess(res.data); // Передаємо дані користувача з відповіді логіну\n\n      // *** НЕ ПЕРЕВІРЯЄМО ПРИСТРОЇ ТУТ І НЕ ПЕРЕНАПРАВЛЯЄМО ВІДРАЗУ ***\n      // Перенаправлення відбудеться в App.js, коли контекст оновить стани user та hasDevice.\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('LoginPage: Password login error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Помилка входу';\n      setFormError(errorMessage); // Встановлюємо помилку для форми\n      alert('Помилка входу: ' + errorMessage); // Також повідомляємо користувача\n      // При помилці логіну, статус користувача залишається null,\n      // контекст не оновлюється, навігація не відбувається (окрім перебування на /login)\n    } finally {\n      setLoginInProgress(false); // Завершуємо стан завантаження\n    }\n  };\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true);\n    setFormError(null); // Очищаємо попередні помилки\n\n    try {\n      console.log('LoginPage: Initiating Google sign-in popup.');\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      console.log('LoginPage: Firebase Google auth success. Token obtained.');\n\n      // Відправляємо токен на ваш бекенд\n      console.log('LoginPage: Sending Google token to backend /auth/login/google...');\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Backend Google login success. Response received.');\n\n      // --- ЗБЕРІГАННЯ В localStorage ---\n      localStorage.setItem('userName', res.data.name);\n      localStorage.setItem('isAdmin', res.data.is_admin ? 'true' : 'false');\n      console.log('LoginPage: userName and isAdmin saved to localStorage.');\n      // --- ЗБЕРІГАННЯ В localStorage ---\n\n      // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\n      handleLoginSuccess(res.data); // Передаємо дані користувача з відповіді бекенду\n\n      // *** НЕ ПЕРЕВІРЯЄМО ПРИСТРОЇ ТУТ І НЕ ПЕРЕНАПРАВЛЯЄМО ВІДРАЗУ ***\n      // Перенаправлення відбудеться в App.js, коли контекст оновить стани user та hasDevice.\n    } catch (error) {\n      console.error('LoginPage: Google login error:', error);\n      const errorMessage = error.message || 'Помилка авторизації через Google';\n      setFormError(errorMessage); // Встановлюємо помилку для форми\n      alert('Помилка авторизації через Google: ' + errorMessage); // Також повідомляємо користувача\n    } finally {\n      setLoginInProgress(false); // Завершуємо стан завантаження\n    }\n  };\n\n  // Рендеримо форму логіну тільки якщо користувач null (не авторизований)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px',\n        textAlign: 'center'\n      },\n      children: formError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      type: \"login\",\n      onSubmit: handleLogin,\n      onGoogleLogin: handleGoogleLogin,\n      isSubmitting: loginInProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(LoginPage, \"lnKQBwcSAhAfTxJz/8bJsLm4cik=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","AuthForm","api","useNavigate","auth","googleProvider","signInWithPopup","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","navigate","user","logoutUser","handleLoginSuccess","loginInProgress","setLoginInProgress","formError","setFormError","replace","handleLogin","email","password","console","log","res","post","withCredentials","localStorage","setItem","data","name","is_admin","err","_err$response","_err$response2","_err$response2$data","error","response","message","errorMessage","alert","handleGoogleLogin","result","token","getIdToken","children","style","color","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["// pages/LoginPage.js\r\nimport React, { useState, useContext } from 'react';\r\nimport AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom'; // Потрібно для перенаправлення ПІСЛЯ повного успіху\r\nimport { auth, googleProvider } from '../firebase';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate();\r\n\r\n    // Отримуємо user, logoutUser та handleLoginSuccess з контексту\r\n    const { user, logoutUser, handleLoginSuccess } = useContext(UserContext);\r\n\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n    const [formError, setFormError] = useState(null); // Стан для помилок форми логіну\r\n\r\n    // --- Перенаправлення, якщо користувач вже залогінений ---\r\n    // Це перенаправлення відбувається, якщо App.js не перенаправив користувача раніше.\r\n    // Воно базується на стані `user` з контексту.\r\n    if (user) {\r\n        // Якщо user є, перенаправляємо на головну.\r\n        // Це важливо, щоб користувач не бачив форму логіну, якщо він вже авторизований.\r\n        navigate('/', { replace: true });\r\n        return null; // Або індикатор завантаження під час навігації\r\n    }\r\n\r\n    // --- Логіка логіну ---\r\n    const handleLogin = async (email, password) => {\r\n        setLoginInProgress(true);\r\n        setFormError(null); // Очищаємо попередні помилки\r\n\r\n        try {\r\n            console.log('LoginPage: Attempting password login...');\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true\r\n            });\r\n            console.log('LoginPage: Password login success. Response received.');\r\n\r\n            // --- ЗБЕРІГАННЯ В localStorage ---\r\n            localStorage.setItem('userName', res.data.name);\r\n            localStorage.setItem('isAdmin', res.data.is_admin ? 'true' : 'false'); // Зберігаємо як рядок\r\n            console.log('LoginPage: userName and isAdmin saved to localStorage.');\r\n            // --- ЗБЕРІГАННЯ В localStorage ---\r\n\r\n            // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\r\n            // Контекст оновить стан та запустить перевірку пристрою.\r\n            handleLoginSuccess(res.data); // Передаємо дані користувача з відповіді логіну\r\n\r\n            // *** НЕ ПЕРЕВІРЯЄМО ПРИСТРОЇ ТУТ І НЕ ПЕРЕНАПРАВЛЯЄМО ВІДРАЗУ ***\r\n            // Перенаправлення відбудеться в App.js, коли контекст оновить стани user та hasDevice.\r\n\r\n        } catch (err) {\r\n            console.error('LoginPage: Password login error:', err.response?.data || err.message);\r\n            const errorMessage = err.response?.data?.message || 'Помилка входу';\r\n            setFormError(errorMessage); // Встановлюємо помилку для форми\r\n            alert('Помилка входу: ' + errorMessage); // Також повідомляємо користувача\r\n            // При помилці логіну, статус користувача залишається null,\r\n            // контекст не оновлюється, навігація не відбувається (окрім перебування на /login)\r\n        } finally {\r\n            setLoginInProgress(false); // Завершуємо стан завантаження\r\n        }\r\n    };\r\n\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true);\r\n        setFormError(null); // Очищаємо попередні помилки\r\n\r\n        try {\r\n            console.log('LoginPage: Initiating Google sign-in popup.');\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n            console.log('LoginPage: Firebase Google auth success. Token obtained.');\r\n\r\n            // Відправляємо токен на ваш бекенд\r\n            console.log('LoginPage: Sending Google token to backend /auth/login/google...');\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('LoginPage: Backend Google login success. Response received.');\r\n\r\n            // --- ЗБЕРІГАННЯ В localStorage ---\r\n            localStorage.setItem('userName', res.data.name);\r\n            localStorage.setItem('isAdmin', res.data.is_admin ? 'true' : 'false');\r\n            console.log('LoginPage: userName and isAdmin saved to localStorage.');\r\n            // --- ЗБЕРІГАННЯ В localStorage ---\r\n\r\n\r\n            // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\r\n            handleLoginSuccess(res.data); // Передаємо дані користувача з відповіді бекенду\r\n\r\n            // *** НЕ ПЕРЕВІРЯЄМО ПРИСТРОЇ ТУТ І НЕ ПЕРЕНАПРАВЛЯЄМО ВІДРАЗУ ***\r\n            // Перенаправлення відбудеться в App.js, коли контекст оновить стани user та hasDevice.\r\n\r\n\r\n        } catch (error) {\r\n            console.error('LoginPage: Google login error:', error);\r\n            const errorMessage = error.message || 'Помилка авторизації через Google';\r\n            setFormError(errorMessage); // Встановлюємо помилку для форми\r\n            alert('Помилка авторизації через Google: ' + errorMessage); // Також повідомляємо користувача\r\n        } finally {\r\n            setLoginInProgress(false); // Завершуємо стан завантаження\r\n        }\r\n    };\r\n\r\n\r\n    // Рендеримо форму логіну тільки якщо користувач null (не авторизований)\r\n    return (\r\n        <>\r\n            {formError && <div style={{ color: 'red', marginBottom: '10px', textAlign: 'center' }}>{formError}</div>}\r\n            <AuthForm\r\n                type=\"login\"\r\n                onSubmit={handleLogin}\r\n                onGoogleLogin={handleGoogleLogin}\r\n                isSubmitting={loginInProgress}\r\n            />\r\n        </>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}