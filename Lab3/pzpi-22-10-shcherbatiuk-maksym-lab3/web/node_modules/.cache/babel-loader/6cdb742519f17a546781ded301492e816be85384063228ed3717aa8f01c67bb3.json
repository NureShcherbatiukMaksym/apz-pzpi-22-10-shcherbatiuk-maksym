{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\LanguageSwitcher.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LanguageSwitcher() {\n  _s();\n  const {\n    i18n\n  } = useTranslation();\n\n  // Визначаємо, чи є поточною мовою англійська, напряму з i18n.language\n  // Ця змінна НЕ Є станом, вона переобчислюється при кожному рендері\n  // (який відбувається, коли i18n.language змінюється завдяки useTranslation)\n  const isEnglish = i18n.language === 'en';\n  const toggleLanguage = () => {\n    // Визначаємо нову мову: якщо зараз англійська, перемикаємо на українську, і навпаки.\n    const newLang = i18n.language === 'en' ? 'uk' : 'en';\n\n    // Змінюємо мову через i18n та зберігаємо в localStorage\n    i18n.changeLanguage(newLang);\n    localStorage.setItem('language', newLang);\n    // Не потрібно оновлювати окремий стан isEnglish, оскільки він вираховується з i18n.language\n  };\n  useEffect(() => {\n    // Цей ефект виконується один раз при монтуванні компонента\n    // Він перевіряє, чи є збережена мова в localStorage\n    const storedLang = localStorage.getItem('language');\n    // Встановлюємо початкову мову: або збережену, або 'en' за замовчуванням\n    const initialLang = storedLang || 'en';\n\n    // Змінюємо мову в i18n тільки якщо вона відрізняється від бажаної початкової\n    // Це запобігає зайвим змінам мови, якщо i18n вже ініціалізовано правильно\n    if (i18n.language !== initialLang) {\n      i18n.changeLanguage(initialLang);\n    }\n    // Компонент автоматично перерендериться завдяки useTranslation,\n    // і візуальний стан світчера та текст оновляться відповідно до i18n.language\n  }, [i18n]); // i18n як залежність, щоб ефект реагував, якщо об'єкт i18n змінюється (хоча це рідко буває)\n\n  return (\n    /*#__PURE__*/\n    // Контейнер для вирівнювання\n    _jsxDEV(\"div\", {\n      className: \"flex flex-col items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleLanguage\n        // Залишаємо стилі кнопки-перемикача\n        ,\n        className: \"flex items-center w-12 h-6 bg-gray-300 rounded-full px-1 border border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300 ease-in-out\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          // Позиція кружечка тепер контролюється напряму через isEnglish,\n          // який вираховується з i18n.language\n          // Якщо isEnglish (мова 'en'), то translate-x-0 (ліворуч).\n          // Якщо не isEnglish (мова 'uk'), то translate-x-6 (праворуч).\n          className: `w-4 h-4 bg-white rounded-full shadow-md transform duration-300 ease-in-out ${isEnglish ? 'translate-x-0' : 'translate-x-6'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xs text-center mt-1\",\n        children: i18n.language.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(LanguageSwitcher, \"XIFq83ieJr2IDBjDrSkk+Qj6jto=\", false, function () {\n  return [useTranslation];\n});\n_c = LanguageSwitcher;\nvar _c;\n$RefreshReg$(_c, \"LanguageSwitcher\");","map":{"version":3,"names":["React","useEffect","useTranslation","jsxDEV","_jsxDEV","LanguageSwitcher","_s","i18n","isEnglish","language","toggleLanguage","newLang","changeLanguage","localStorage","setItem","storedLang","getItem","initialLang","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/LanguageSwitcher.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport default function LanguageSwitcher() {\r\n    const { i18n } = useTranslation();\r\n\r\n    // Визначаємо, чи є поточною мовою англійська, напряму з i18n.language\r\n    // Ця змінна НЕ Є станом, вона переобчислюється при кожному рендері\r\n    // (який відбувається, коли i18n.language змінюється завдяки useTranslation)\r\n    const isEnglish = i18n.language === 'en';\r\n\r\n    const toggleLanguage = () => {\r\n        // Визначаємо нову мову: якщо зараз англійська, перемикаємо на українську, і навпаки.\r\n        const newLang = i18n.language === 'en' ? 'uk' : 'en';\r\n\r\n        // Змінюємо мову через i18n та зберігаємо в localStorage\r\n        i18n.changeLanguage(newLang);\r\n        localStorage.setItem('language', newLang);\r\n        // Не потрібно оновлювати окремий стан isEnglish, оскільки він вираховується з i18n.language\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Цей ефект виконується один раз при монтуванні компонента\r\n        // Він перевіряє, чи є збережена мова в localStorage\r\n        const storedLang = localStorage.getItem('language');\r\n        // Встановлюємо початкову мову: або збережену, або 'en' за замовчуванням\r\n        const initialLang = storedLang || 'en';\r\n\r\n        // Змінюємо мову в i18n тільки якщо вона відрізняється від бажаної початкової\r\n        // Це запобігає зайвим змінам мови, якщо i18n вже ініціалізовано правильно\r\n        if (i18n.language !== initialLang) {\r\n            i18n.changeLanguage(initialLang);\r\n        }\r\n        // Компонент автоматично перерендериться завдяки useTranslation,\r\n        // і візуальний стан світчера та текст оновляться відповідно до i18n.language\r\n\r\n    }, [i18n]); // i18n як залежність, щоб ефект реагував, якщо об'єкт i18n змінюється (хоча це рідко буває)\r\n\r\n\r\n    return (\r\n        // Контейнер для вирівнювання\r\n        <div className=\"flex flex-col items-center\">\r\n            <button\r\n                onClick={toggleLanguage}\r\n                // Залишаємо стилі кнопки-перемикача\r\n                className=\"flex items-center w-12 h-6 bg-gray-300 rounded-full px-1 border border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300 ease-in-out\"\r\n            >\r\n                <span\r\n                    // Позиція кружечка тепер контролюється напряму через isEnglish,\r\n                    // який вираховується з i18n.language\r\n                    // Якщо isEnglish (мова 'en'), то translate-x-0 (ліворуч).\r\n                    // Якщо не isEnglish (мова 'uk'), то translate-x-6 (праворуч).\r\n                    className={`w-4 h-4 bg-white rounded-full shadow-md transform duration-300 ease-in-out ${isEnglish ? 'translate-x-0' : 'translate-x-6'}`}\r\n                ></span>\r\n            </button>\r\n            <div className=\"text-xs text-center mt-1\">\r\n                {/* Відображаємо поточне скорочення мови */}\r\n                {i18n.language.toUpperCase()}\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,cAAc,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAM;IAAEC;EAAK,CAAC,GAAGL,cAAc,CAAC,CAAC;;EAEjC;EACA;EACA;EACA,MAAMM,SAAS,GAAGD,IAAI,CAACE,QAAQ,KAAK,IAAI;EAExC,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB;IACA,MAAMC,OAAO,GAAGJ,IAAI,CAACE,QAAQ,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI;;IAEpD;IACAF,IAAI,CAACK,cAAc,CAACD,OAAO,CAAC;IAC5BE,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,OAAO,CAAC;IACzC;EACJ,CAAC;EAEDV,SAAS,CAAC,MAAM;IACZ;IACA;IACA,MAAMc,UAAU,GAAGF,YAAY,CAACG,OAAO,CAAC,UAAU,CAAC;IACnD;IACA,MAAMC,WAAW,GAAGF,UAAU,IAAI,IAAI;;IAEtC;IACA;IACA,IAAIR,IAAI,CAACE,QAAQ,KAAKQ,WAAW,EAAE;MAC/BV,IAAI,CAACK,cAAc,CAACK,WAAW,CAAC;IACpC;IACA;IACA;EAEJ,CAAC,EAAE,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC;;EAGZ;IAAA;IACI;IACAH,OAAA;MAAKc,SAAS,EAAC,4BAA4B;MAAAC,QAAA,gBACvCf,OAAA;QACIgB,OAAO,EAAEV;QACT;QAAA;QACAQ,SAAS,EAAC,gLAAgL;QAAAC,QAAA,eAE1Lf,OAAA;UACI;UACA;UACA;UACA;UACAc,SAAS,EAAE,8EAA8EV,SAAS,GAAG,eAAe,GAAG,eAAe;QAAG;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eACTpB,OAAA;QAAKc,SAAS,EAAC,0BAA0B;QAAAC,QAAA,EAEpCZ,IAAI,CAACE,QAAQ,CAACgB,WAAW,CAAC;MAAC;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;AAEd;AAAClB,EAAA,CA1DuBD,gBAAgB;EAAA,QACnBH,cAAc;AAAA;AAAAwB,EAAA,GADXrB,gBAAgB;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}