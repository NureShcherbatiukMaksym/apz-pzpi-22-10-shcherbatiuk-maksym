{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\AnalyticsField.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react'; // Додано useCallback\nimport { useParams } from \"react-router-dom\";\nimport { Line as LineChart, Svg } from 'chartist';\nimport 'chartist/dist/chartist.css';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalyticsField = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // ID поточного вибраного поля з URL\n\n  const [timeRange, setTimeRange] = useState('7d');\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const chartContainerRef = useRef(null);\n  const chartInstanceRef = useRef(null); // Для збереження інстансу графіка\n\n  // --- API Функції ---\n  // Використовуємо useCallback, щоб функції не створювались заново при кожному рендері,\n  // якщо їхні залежності не змінились (хоча тут залежностей немає, це хороша практика)\n  const selectField = useCallback(async fieldId => {\n    if (!fieldId) {\n      console.warn('[AnalyticsField:selectField] Спроба вибору поля без ID.');\n      return; // Нічого не робити, якщо немає ID\n    }\n    try {\n      console.log(`[AnalyticsField:selectField] Відправка запиту на select поля ID: ${fieldId}.`);\n      await api.post('/fields/select/', {\n        fieldId: fieldId\n      });\n      console.log(`[AnalyticsField:selectField] Поле ID ${fieldId} успішно вибрано.`);\n    } catch (err) {\n      console.error(`[AnalyticsField:selectField] Помилка при виборі поля ID ${fieldId}:`, err);\n      // Перекидуємо помилку, щоб її можна було обробити в fetchData\n      throw new Error(`Не вдалося вибрати поле ID ${fieldId}.`);\n    }\n  }, []); // Немає залежностей\n\n  const deselectField = useCallback(async fieldId => {\n    if (!fieldId) {\n      console.warn('[AnalyticsField:deselectField] Спроба деселекту поля без ID.');\n      return;\n    }\n    try {\n      console.log(`[AnalyticsField:deselectField] Відправка запиту на deselect поля ID: ${fieldId}.`);\n      await api.post('/fields/deselect/', {\n        fieldId: fieldId\n      });\n      console.log(`[AnalyticsField:deselectField:SUCCESS] Поле ID ${fieldId} успішно деселектнуто.`);\n    } catch (err) {\n      // Тут помилку можна просто залогувати, бо вона виникає при \"виході\"\n      console.error(`[AnalyticsField:deselectField:ERROR] Не вдалося деселектнути поле ID ${fieldId}:`, err);\n    }\n  }, []); // Немає залежностей\n\n  // Effect для завантаження даних, вибору поля та очищення\n  useEffect(() => {\n    console.log(`[AnalyticsField:useEffect:data] Effect running for ID: ${id}, timeRange: ${timeRange}`);\n\n    // Якщо немає ID, нічого не робимо з даними, але треба переконатися,\n    // що стан чистий (на випадок, якщо ID зник після того, як був).\n    if (!id) {\n      console.log('[AnalyticsField:useEffect:data] No ID in URL, clearing state.');\n      setChartData(null);\n      setError(null);\n      setIsLoading(false); // Зупиняємо завантаження, якщо воно було\n      return; // Виходимо з ефекту\n    }\n\n    // Вибираємо поле ПЕРЕД запитом даних. Це важливо, якщо бекенд\n    // використовує стан сесії для визначення активного поля.\n    selectField(id);\n    setIsLoading(true); // Починаємо завантаження\n    setError(null); // Скидаємо попередні помилки\n\n    // --- Змінено згідно з твоїм запитом ---\n    // Видалено змінну apiUrl. Використовуємо шлях безпосередньо в api.get.\n    // Припускаємо, що api налаштований з правильним baseURL.\n    console.log(`[AnalyticsField:useEffect:data] Fetching chart data using path: /field-measurements/chart/${timeRange} (ID ${id} is selected via POST)`);\n    api.get(`/field-measurements/chart/${timeRange}`) // Використовуємо запитуваний шлях\n    .then(response => {\n      var _response$data;\n      console.log('[AnalyticsField:useEffect:data] Received raw data:', response.data);\n      // Подальша обробка даних залишається такою ж, як і раніше\n      const rawData = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.aggregatedData;\n      if (!Array.isArray(rawData)) {\n        setChartData(null);\n        setError('Некоректна відповідь від сервера або дані відсутні.');\n        setIsLoading(false);\n        console.error('[AnalyticsField:useEffect:data] Unexpected API response format or missing aggregatedData:', response.data);\n        return;\n      }\n      console.log('[AnalyticsField:useEffect:data] Processing aggregatedData array:', rawData);\n\n      // --- Логіка трансформації даних (залишається як була) ---\n      const uniqueTimestampsSet = new Set();\n      rawData.forEach(sensor => {/* ... */});\n      const labels = Array.from(uniqueTimestampsSet).sort();\n      console.log('[AnalyticsField:useEffect:data] Generated labels:', labels);\n      const series = rawData.map(sensor => {/* ... */});\n      const chartistSeriesData = series.map(s => s.data);\n      console.log('[AnalyticsField:useEffect:data] Generated series (with names):', series);\n      console.log('[AnalyticsField:useEffect:data] Chartist series data:', chartistSeriesData);\n      // --- Кінець логіки трансформації ---\n\n      if (labels.length === 0 || chartistSeriesData.every(seriesData => Array.isArray(seriesData) && seriesData.every(point => point === null))) {\n        console.log('[AnalyticsField:useEffect:data] Transformed data is empty or contains only nulls.');\n        setChartData(null); // Встановлюємо null, щоб показати повідомлення \"немає даних\"\n      } else {\n        setChartData({\n          labels,\n          series: chartistSeriesData\n        });\n      }\n      setIsLoading(false); // Завершуємо завантаження\n    }).catch(err => {\n      var _err$response, _err$response$data;\n      console.error('[AnalyticsField:useEffect:data] Error fetching chart data:', err);\n      const message = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'Не вдалося завантажити дані графіка.';\n      setError(message); // Встановлюємо помилку\n      setChartData(null); // Скидаємо дані\n      setIsLoading(false); // Завершуємо завантаження\n    });\n\n    // Функція очищення: скасовуємо вибір поля\n    const fieldIdToDeselect = id; // Зберігаємо ID для функції очищення\n    return () => {\n      console.log(`[AnalyticsField:useEffect:data] Cleanup running for ID: ${fieldIdToDeselect}`);\n      if (fieldIdToDeselect) {\n        // Скасовуємо вибір поля при розмонтуванні або зміні ID\n        deselectField(fieldIdToDeselect);\n      }\n      // Також скидаємо стан, якщо компонент залишається змонтованим, але ID міняється\n      setChartData(null);\n      setError(null);\n      setIsLoading(false);\n    };\n  }, [id, timeRange]); // Залежності: ефект спрацює при зміні id або timeRange\n\n  // Effect для рендерингу графіка (залишається без змін)\n  useEffect(() => {\n    // ... (код рендерингу графіка з Chartist) ...\n    console.log('[AnalyticsField:useEffect:chart] Chart rendering effect running. ChartData:', chartData ? 'present' : 'null', 'Container:', chartContainerRef.current ? 'present' : 'null', 'Loading:', isLoading, 'Error:', error);\n    const hasPlottableData = chartData && Array.isArray(chartData.labels) && chartData.labels.length > 0 && Array.isArray(chartData.series) && chartData.series.length > 0 && chartData.series.some(seriesData => Array.isArray(seriesData) && seriesData.some(point => point !== null && point !== undefined));\n    if (hasPlottableData && chartContainerRef.current && !isLoading && !error) {\n      console.log('[AnalyticsField:useEffect:chart] Drawing chart...');\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.detach();\n        chartInstanceRef.current = null;\n      }\n      const options = {/* ... options ... */};\n      try {\n        chartInstanceRef.current = new LineChart(chartContainerRef.current, chartData, options);\n        chartInstanceRef.current.on('draw', function (data) {\n          // ... animation ...\n        });\n      } catch (chartError) {\n        console.error(\"[AnalyticsField:useEffect:chart] Error creating or drawing chart:\", chartError);\n        setError(\"Помилка відображення графіка.\"); // Можна встановити помилку\n      }\n    } else if (chartInstanceRef.current) {\n      console.log('[AnalyticsField:useEffect:chart] Data not plottable or state indicates no chart, destroying chart instance.');\n      try {\n        chartInstanceRef.current.detach();\n      } catch (detachError) {\n        console.error(\"[AnalyticsField:useEffect:chart] Error detaching chart:\", detachError);\n      }\n      chartInstanceRef.current = null;\n    }\n\n    // Функція очищення для ефекту рендерингу\n    return () => {\n      console.log('[AnalyticsField:useEffect:chart] Chart rendering effect cleanup running.');\n      if (chartInstanceRef.current) {\n        try {\n          chartInstanceRef.current.detach();\n        } catch (detachError) {\n          console.error(\"[AnalyticsField:useEffect:chart] Error detaching chart during cleanup:\", detachError);\n        }\n        chartInstanceRef.current = null;\n      }\n    };\n  }, [chartData, isLoading, error]); // Залежності: дані, статус завантаження, помилка\n\n  // Обробник зміни часового діапазону (залишається без змін)\n  const handleTimeRangeChange = range => {\n    setTimeRange(range);\n  };\n  // --- JSX Рендеринг ---\n  return (\n    /*#__PURE__*/\n    // Використовуємо `h-full` або `min-h-screen` для батьківських контейнерів, якщо потрібно розтягнути контент\n    _jsxDEV(\"div\", {\n      id: \"main-content\",\n      className: \"w-full flex-1 bg-gray-100 p-6\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-7xl mx-auto\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white shadow rounded-lg p-4 md:p-6\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between items-center border-b border-gray-200 pb-3 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"text-xl font-bold text-gray-900\",\n              children: [\"\\u0410\\u043D\\u0430\\u043B\\u0456\\u0442\\u0438\\u043A\\u0430 \\u0432\\u0438\\u043C\\u0456\\u0440\\u044E\\u0432\\u0430\\u043D\\u044C \", id ? `для поля ID: ${id}` : '(Поле не вибрано)']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex space-x-2\",\n              children: ['7d', '6m', '1y'].map(range => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleTimeRangeChange(range),\n                disabled: isLoading // Блокуємо кнопки під час завантаження\n                ,\n                className: `px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ease-in-out ${timeRange === range ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}` // Стилі для блокування\n                ,\n                children: [range === '7d' && '7 днів', range === '6m' && '6 міс', range === '1y' && '1 рік']\n              }, range, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative min-h-[350px]\",\n            children: [\" \", !id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute inset-0 flex items-center justify-center\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-gray-500 text-lg\",\n                children: \"\\u0411\\u0443\\u0434\\u044C \\u043B\\u0430\\u0441\\u043A\\u0430, \\u043E\\u0431\\u0435\\u0440\\u0456\\u0442\\u044C \\u043F\\u043E\\u043B\\u0435 \\u0437\\u0456 \\u0441\\u043F\\u0438\\u0441\\u043A\\u0443.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 29\n            }, this), id && isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute inset-0 flex items-center justify-center bg-white bg-opacity-75 z-10\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-gray-600 text-lg animate-pulse\",\n                children: \"\\u0417\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0434\\u0430\\u043D\\u0438\\u0445...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 29\n            }, this), id && error && !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute inset-0 flex items-center justify-center\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-red-600 text-lg px-4 py-2 bg-red-100 rounded border border-red-300\",\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 29\n            }, this), id && !isLoading && !error && !chartData &&\n            /*#__PURE__*/\n            // Показуємо, якщо не завантаження, немає помилки і chartData = null\n            _jsxDEV(\"div\", {\n              className: \"absolute inset-0 flex items-center justify-center\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-gray-500 text-lg\",\n                children: \"\\u0414\\u0430\\u043D\\u0456 \\u0434\\u043B\\u044F \\u043E\\u0431\\u0440\\u0430\\u043D\\u043E\\u0433\\u043E \\u043F\\u043E\\u043B\\u044F \\u0437\\u0430 \\u0446\\u0435\\u0439 \\u043F\\u0435\\u0440\\u0456\\u043E\\u0434 \\u0432\\u0456\\u0434\\u0441\\u0443\\u0442\\u043D\\u0456.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `ct-chart ct-golden-section ${!id || isLoading || error || !chartData ? 'opacity-0' : 'opacity-100'} transition-opacity duration-300` // Ховаємо контейнер, якщо немає що показувати\n              ,\n              ref: chartContainerRef,\n              style: {\n                minHeight: '350px'\n              } // Забезпечуємо мінімальну висоту\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(AnalyticsField, \"AF2RZyH/ANrjtoxSPckbsjXLXE4=\", false, function () {\n  return [useParams];\n});\n_c = AnalyticsField;\nexport default AnalyticsField;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsField\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useParams","Line","LineChart","Svg","api","jsxDEV","_jsxDEV","AnalyticsField","_s","id","timeRange","setTimeRange","chartData","setChartData","isLoading","setIsLoading","error","setError","chartContainerRef","chartInstanceRef","selectField","fieldId","console","warn","log","post","err","Error","deselectField","get","then","response","_response$data","data","rawData","aggregatedData","Array","isArray","uniqueTimestampsSet","Set","forEach","sensor","labels","from","sort","series","map","chartistSeriesData","s","length","every","seriesData","point","catch","_err$response","_err$response$data","message","fieldIdToDeselect","current","hasPlottableData","some","undefined","detach","options","on","chartError","detachError","handleTimeRangeChange","range","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ref","style","minHeight","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/AnalyticsField.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react'; // Додано useCallback\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Line as LineChart, Svg } from 'chartist';\r\nimport 'chartist/dist/chartist.css';\r\nimport api from '../utils/api';\r\n\r\nconst AnalyticsField = () => {\r\n    const { id } = useParams(); // ID поточного вибраного поля з URL\r\n\r\n    const [timeRange, setTimeRange] = useState('7d');\r\n    const [chartData, setChartData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const chartContainerRef = useRef(null);\r\n    const chartInstanceRef = useRef(null); // Для збереження інстансу графіка\r\n\r\n    // --- API Функції ---\r\n    // Використовуємо useCallback, щоб функції не створювались заново при кожному рендері,\r\n    // якщо їхні залежності не змінились (хоча тут залежностей немає, це хороша практика)\r\n    const selectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) {\r\n            console.warn('[AnalyticsField:selectField] Спроба вибору поля без ID.');\r\n            return; // Нічого не робити, якщо немає ID\r\n        }\r\n        try {\r\n            console.log(`[AnalyticsField:selectField] Відправка запиту на select поля ID: ${fieldId}.`);\r\n            await api.post('/fields/select/', { fieldId: fieldId });\r\n            console.log(`[AnalyticsField:selectField] Поле ID ${fieldId} успішно вибрано.`);\r\n        } catch (err) {\r\n            console.error(`[AnalyticsField:selectField] Помилка при виборі поля ID ${fieldId}:`, err);\r\n            // Перекидуємо помилку, щоб її можна було обробити в fetchData\r\n            throw new Error(`Не вдалося вибрати поле ID ${fieldId}.`);\r\n        }\r\n    }, []); // Немає залежностей\r\n\r\n    const deselectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) {\r\n            console.warn('[AnalyticsField:deselectField] Спроба деселекту поля без ID.');\r\n            return;\r\n        }\r\n        try {\r\n            console.log(`[AnalyticsField:deselectField] Відправка запиту на deselect поля ID: ${fieldId}.`);\r\n            await api.post('/fields/deselect/', { fieldId: fieldId });\r\n            console.log(`[AnalyticsField:deselectField:SUCCESS] Поле ID ${fieldId} успішно деселектнуто.`);\r\n        } catch (err) {\r\n            // Тут помилку можна просто залогувати, бо вона виникає при \"виході\"\r\n            console.error(`[AnalyticsField:deselectField:ERROR] Не вдалося деселектнути поле ID ${fieldId}:`, err);\r\n        }\r\n    }, []); // Немає залежностей\r\n\r\n\r\n    // Effect для завантаження даних, вибору поля та очищення\r\n    useEffect(() => {\r\n        console.log(`[AnalyticsField:useEffect:data] Effect running for ID: ${id}, timeRange: ${timeRange}`);\r\n\r\n        // Якщо немає ID, нічого не робимо з даними, але треба переконатися,\r\n        // що стан чистий (на випадок, якщо ID зник після того, як був).\r\n        if (!id) {\r\n            console.log('[AnalyticsField:useEffect:data] No ID in URL, clearing state.');\r\n            setChartData(null);\r\n            setError(null);\r\n            setIsLoading(false); // Зупиняємо завантаження, якщо воно було\r\n            return; // Виходимо з ефекту\r\n        }\r\n\r\n        // Вибираємо поле ПЕРЕД запитом даних. Це важливо, якщо бекенд\r\n        // використовує стан сесії для визначення активного поля.\r\n        selectField(id);\r\n\r\n        setIsLoading(true); // Починаємо завантаження\r\n        setError(null); // Скидаємо попередні помилки\r\n\r\n        // --- Змінено згідно з твоїм запитом ---\r\n        // Видалено змінну apiUrl. Використовуємо шлях безпосередньо в api.get.\r\n        // Припускаємо, що api налаштований з правильним baseURL.\r\n        console.log(`[AnalyticsField:useEffect:data] Fetching chart data using path: /field-measurements/chart/${timeRange} (ID ${id} is selected via POST)`);\r\n\r\n        api.get(`/field-measurements/chart/${timeRange}`) // Використовуємо запитуваний шлях\r\n            .then(response => {\r\n                console.log('[AnalyticsField:useEffect:data] Received raw data:', response.data);\r\n                // Подальша обробка даних залишається такою ж, як і раніше\r\n                const rawData = response.data?.aggregatedData;\r\n\r\n                if (!Array.isArray(rawData)) {\r\n                    setChartData(null);\r\n                    setError('Некоректна відповідь від сервера або дані відсутні.');\r\n                    setIsLoading(false);\r\n                    console.error('[AnalyticsField:useEffect:data] Unexpected API response format or missing aggregatedData:', response.data);\r\n                    return;\r\n                }\r\n                console.log('[AnalyticsField:useEffect:data] Processing aggregatedData array:', rawData);\r\n\r\n                // --- Логіка трансформації даних (залишається як була) ---\r\n                const uniqueTimestampsSet = new Set();\r\n                rawData.forEach(sensor => { /* ... */ });\r\n                const labels = Array.from(uniqueTimestampsSet).sort();\r\n                console.log('[AnalyticsField:useEffect:data] Generated labels:', labels);\r\n\r\n                const series = rawData.map(sensor => { /* ... */ });\r\n                const chartistSeriesData = series.map(s => s.data);\r\n                console.log('[AnalyticsField:useEffect:data] Generated series (with names):', series);\r\n                console.log('[AnalyticsField:useEffect:data] Chartist series data:', chartistSeriesData);\r\n                // --- Кінець логіки трансформації ---\r\n\r\n                if (labels.length === 0 || chartistSeriesData.every(seriesData => Array.isArray(seriesData) && seriesData.every(point => point === null))) {\r\n                    console.log('[AnalyticsField:useEffect:data] Transformed data is empty or contains only nulls.');\r\n                    setChartData(null); // Встановлюємо null, щоб показати повідомлення \"немає даних\"\r\n                } else {\r\n                    setChartData({ labels, series: chartistSeriesData });\r\n                }\r\n\r\n                setIsLoading(false); // Завершуємо завантаження\r\n            })\r\n            .catch(err => {\r\n                console.error('[AnalyticsField:useEffect:data] Error fetching chart data:', err);\r\n                const message = err.response?.data?.message || err.message || 'Не вдалося завантажити дані графіка.';\r\n                setError(message); // Встановлюємо помилку\r\n                setChartData(null); // Скидаємо дані\r\n                setIsLoading(false); // Завершуємо завантаження\r\n            });\r\n\r\n        // Функція очищення: скасовуємо вибір поля\r\n        const fieldIdToDeselect = id; // Зберігаємо ID для функції очищення\r\n        return () => {\r\n            console.log(`[AnalyticsField:useEffect:data] Cleanup running for ID: ${fieldIdToDeselect}`);\r\n            if (fieldIdToDeselect) {\r\n                // Скасовуємо вибір поля при розмонтуванні або зміні ID\r\n                deselectField(fieldIdToDeselect);\r\n            }\r\n            // Також скидаємо стан, якщо компонент залишається змонтованим, але ID міняється\r\n            setChartData(null);\r\n            setError(null);\r\n            setIsLoading(false);\r\n        };\r\n\r\n    }, [id, timeRange]); // Залежності: ефект спрацює при зміні id або timeRange\r\n\r\n    // Effect для рендерингу графіка (залишається без змін)\r\n    useEffect(() => {\r\n        // ... (код рендерингу графіка з Chartist) ...\r\n        console.log('[AnalyticsField:useEffect:chart] Chart rendering effect running. ChartData:', chartData ? 'present' : 'null', 'Container:', chartContainerRef.current ? 'present' : 'null', 'Loading:', isLoading, 'Error:', error);\r\n\r\n        const hasPlottableData = chartData &&\r\n            Array.isArray(chartData.labels) && chartData.labels.length > 0 &&\r\n            Array.isArray(chartData.series) && chartData.series.length > 0 &&\r\n            chartData.series.some(seriesData => Array.isArray(seriesData) && seriesData.some(point => point !== null && point !== undefined));\r\n\r\n\r\n        if (hasPlottableData && chartContainerRef.current && !isLoading && !error) {\r\n            console.log('[AnalyticsField:useEffect:chart] Drawing chart...');\r\n            if (chartInstanceRef.current) {\r\n                chartInstanceRef.current.detach();\r\n                chartInstanceRef.current = null;\r\n            }\r\n\r\n            const options = { /* ... options ... */ };\r\n\r\n            try {\r\n                chartInstanceRef.current = new LineChart(\r\n                    chartContainerRef.current,\r\n                    chartData,\r\n                    options\r\n                );\r\n\r\n                chartInstanceRef.current.on('draw', function(data) {\r\n                    // ... animation ...\r\n                });\r\n            } catch (chartError) {\r\n                console.error(\"[AnalyticsField:useEffect:chart] Error creating or drawing chart:\", chartError);\r\n                setError(\"Помилка відображення графіка.\"); // Можна встановити помилку\r\n            }\r\n\r\n        } else if (chartInstanceRef.current) {\r\n            console.log('[AnalyticsField:useEffect:chart] Data not plottable or state indicates no chart, destroying chart instance.');\r\n            try {\r\n                chartInstanceRef.current.detach();\r\n            } catch (detachError) {\r\n                console.error(\"[AnalyticsField:useEffect:chart] Error detaching chart:\", detachError);\r\n            }\r\n            chartInstanceRef.current = null;\r\n        }\r\n\r\n        // Функція очищення для ефекту рендерингу\r\n        return () => {\r\n            console.log('[AnalyticsField:useEffect:chart] Chart rendering effect cleanup running.');\r\n            if (chartInstanceRef.current) {\r\n                try {\r\n                    chartInstanceRef.current.detach();\r\n                } catch (detachError) {\r\n                    console.error(\"[AnalyticsField:useEffect:chart] Error detaching chart during cleanup:\", detachError);\r\n                }\r\n                chartInstanceRef.current = null;\r\n            }\r\n        };\r\n    }, [chartData, isLoading, error]); // Залежності: дані, статус завантаження, помилка\r\n\r\n    // Обробник зміни часового діапазону (залишається без змін)\r\n    const handleTimeRangeChange = (range) => {\r\n        setTimeRange(range);\r\n    };\r\n    // --- JSX Рендеринг ---\r\n    return (\r\n        // Використовуємо `h-full` або `min-h-screen` для батьківських контейнерів, якщо потрібно розтягнути контент\r\n        <div id=\"main-content\" className=\"w-full flex-1 bg-gray-100 p-6\"> {/* Додано фон і падінг */}\r\n            <div className=\"max-w-7xl mx-auto\"> {/* Обмежуємо максимальну ширину */}\r\n                <div className=\"bg-white shadow rounded-lg p-4 md:p-6\"> {/* Картка для графіка */}\r\n                    {/* Заголовок та кнопки вибору діапазону */}\r\n                    <div className=\"flex justify-between items-center border-b border-gray-200 pb-3 mb-4\">\r\n                        <h5 className=\"text-xl font-bold text-gray-900\">\r\n                            Аналітика вимірювань {id ? `для поля ID: ${id}` : '(Поле не вибрано)'}\r\n                        </h5>\r\n                        <div className=\"flex space-x-2\">\r\n                            {['7d', '6m', '1y'].map(range => (\r\n                                <button\r\n                                    key={range}\r\n                                    onClick={() => handleTimeRangeChange(range)}\r\n                                    disabled={isLoading} // Блокуємо кнопки під час завантаження\r\n                                    className={`px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ease-in-out ${\r\n                                        timeRange === range\r\n                                            ? 'bg-blue-600 text-white hover:bg-blue-700'\r\n                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n                                    } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`} // Стилі для блокування\r\n                                >\r\n                                    {range === '7d' && '7 днів'}\r\n                                    {range === '6m' && '6 міс'}\r\n                                    {range === '1y' && '1 рік'}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Контейнер для графіка та повідомлень */}\r\n                    <div className=\"relative min-h-[350px]\"> {/* Мінімальна висота для графіка */}\r\n                        {/* Повідомлення стану */}\r\n                        {!id && (\r\n                            <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                <p className=\"text-center text-gray-500 text-lg\">\r\n                                    Будь ласка, оберіть поле зі списку.\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                        {id && isLoading && (\r\n                            <div className=\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-75 z-10\">\r\n                                <p className=\"text-center text-gray-600 text-lg animate-pulse\">Завантаження даних...</p>\r\n                                {/* Можна додати спінер тут */}\r\n                            </div>\r\n                        )}\r\n                        {id && error && !isLoading && (\r\n                            <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                <p className=\"text-center text-red-600 text-lg px-4 py-2 bg-red-100 rounded border border-red-300\">{error}</p>\r\n                            </div>\r\n                        )}\r\n                        {/* Повідомлення \"Немає даних\" */}\r\n                        {id && !isLoading && !error && !chartData && ( // Показуємо, якщо не завантаження, немає помилки і chartData = null\r\n                            <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                <p className=\"text-center text-gray-500 text-lg\">\r\n                                    Дані для обраного поля за цей період відсутні.\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Власник контейнер для графіка */}\r\n                        {/* Ми додаємо/видаляємо графік динамічно, тому повідомлення показуються поверх */}\r\n                        <div\r\n                            className={`ct-chart ct-golden-section ${!id || isLoading || error || !chartData ? 'opacity-0' : 'opacity-100'} transition-opacity duration-300`} // Ховаємо контейнер, якщо немає що показувати\r\n                            ref={chartContainerRef}\r\n                            style={{minHeight: '350px'}} // Забезпечуємо мінімальну висоту\r\n                        >\r\n                            {/* Chartist буде малювати сюди */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* --- Видалено секцію з таблицею та правою колонкою --- */}\r\n                {/* Якщо вони потрібні, їх треба реалізувати з відповідною логікою */}\r\n                {/*\r\n                 <div className=\"mt-6 bg-white shadow rounded-lg p-4 md:p-6\">\r\n                     <h5 className=\"text-xl font-bold text-gray-900 border-b pb-3 mb-4\">Додаткова інформація</h5>\r\n                     { // Тут може бути таблиця з даними або інші елементи\r\n                     }\r\n                 </div>\r\n                 */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalyticsField;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}