{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\AnalyticsField.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Chartist from 'chartist';\nimport 'chartist/dist/chartist.min.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalyticsField = () => {\n  _s();\n  const chartRef = useRef(null);\n  const [aggregatedData, setAggregatedData] = useState(null);\n  useEffect(() => {\n    // Отримати дані з бекенду (наприклад, за 7 днів)\n    axios.get('/api/field-measurements/chart/7d').then(res => {\n      setAggregatedData(res.data.aggregatedData);\n    }).catch(err => {\n      console.error('Помилка при отриманні аналітики:', err.message);\n    });\n  }, []);\n  useEffect(() => {\n    if (aggregatedData && chartRef.current) {\n      // Приклад: побудова одного типу сенсора (наприклад, \"Температура\")\n      const labels = [];\n      const series = [];\n      Object.entries(aggregatedData).forEach(([sensorId, data]) => {\n        labels.push(`Sensor ${sensorId}`);\n        const avg = parseFloat(data.sum / data.count).toFixed(2);\n        series.push(Number(avg));\n      });\n      new Chartist.Bar(chartRef.current, {\n        labels,\n        series: [series]\n      }, {\n        axisY: {\n          onlyInteger: true,\n          offset: 20\n        },\n        distributeSeries: true\n      });\n    }\n  }, [aggregatedData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"\\u0410\\u0433\\u0440\\u0435\\u0433\\u043E\\u0432\\u0430\\u043D\\u0456 \\u0434\\u0430\\u043D\\u0456 \\u0437\\u0430 \\u043E\\u0441\\u0442\\u0430\\u043D\\u043D\\u0456 7 \\u0434\\u043D\\u0456\\u0432\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartRef,\n      className: \"ct-chart ct-major-tenth h-64\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(AnalyticsField, \"jbstvdT8p5b62pI9sGCAjocYut4=\");\n_c = AnalyticsField;\nexport default AnalyticsField;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsField\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chartist","axios","jsxDEV","_jsxDEV","AnalyticsField","_s","chartRef","aggregatedData","setAggregatedData","get","then","res","data","catch","err","console","error","message","current","labels","series","Object","entries","forEach","sensorId","push","avg","parseFloat","sum","count","toFixed","Number","Bar","axisY","onlyInteger","offset","distributeSeries","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/AnalyticsField.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Chartist from 'chartist';\r\nimport 'chartist/dist/chartist.min.css';\r\nimport axios from 'axios';\r\n\r\nconst AnalyticsField = () => {\r\n    const chartRef = useRef(null);\r\n    const [aggregatedData, setAggregatedData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Отримати дані з бекенду (наприклад, за 7 днів)\r\n        axios.get('/api/field-measurements/chart/7d')\r\n            .then((res) => {\r\n                setAggregatedData(res.data.aggregatedData);\r\n            })\r\n            .catch((err) => {\r\n                console.error('Помилка при отриманні аналітики:', err.message);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (aggregatedData && chartRef.current) {\r\n            // Приклад: побудова одного типу сенсора (наприклад, \"Температура\")\r\n            const labels = [];\r\n            const series = [];\r\n\r\n            Object.entries(aggregatedData).forEach(([sensorId, data]) => {\r\n                labels.push(`Sensor ${sensorId}`);\r\n                const avg = parseFloat(data.sum / data.count).toFixed(2);\r\n                series.push(Number(avg));\r\n            });\r\n\r\n            new Chartist.Bar(chartRef.current, {\r\n                labels,\r\n                series: [series],\r\n            }, {\r\n                axisY: {\r\n                    onlyInteger: true,\r\n                    offset: 20,\r\n                },\r\n                distributeSeries: true\r\n            });\r\n        }\r\n    }, [aggregatedData]);\r\n\r\n    return (\r\n        <div className=\"p-4\">\r\n            <h2 className=\"text-xl font-bold mb-4\">Агреговані дані за останні 7 днів</h2>\r\n            <div ref={chartRef} className=\"ct-chart ct-major-tenth h-64\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalyticsField;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAO,gCAAgC;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE1DF,SAAS,CAAC,MAAM;IACZ;IACAI,KAAK,CAACQ,GAAG,CAAC,kCAAkC,CAAC,CACxCC,IAAI,CAAEC,GAAG,IAAK;MACXH,iBAAiB,CAACG,GAAG,CAACC,IAAI,CAACL,cAAc,CAAC;IAC9C,CAAC,CAAC,CACDM,KAAK,CAAEC,GAAG,IAAK;MACZC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,GAAG,CAACG,OAAO,CAAC;IAClE,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAENpB,SAAS,CAAC,MAAM;IACZ,IAAIU,cAAc,IAAID,QAAQ,CAACY,OAAO,EAAE;MACpC;MACA,MAAMC,MAAM,GAAG,EAAE;MACjB,MAAMC,MAAM,GAAG,EAAE;MAEjBC,MAAM,CAACC,OAAO,CAACf,cAAc,CAAC,CAACgB,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAEZ,IAAI,CAAC,KAAK;QACzDO,MAAM,CAACM,IAAI,CAAC,UAAUD,QAAQ,EAAE,CAAC;QACjC,MAAME,GAAG,GAAGC,UAAU,CAACf,IAAI,CAACgB,GAAG,GAAGhB,IAAI,CAACiB,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;QACxDV,MAAM,CAACK,IAAI,CAACM,MAAM,CAACL,GAAG,CAAC,CAAC;MAC5B,CAAC,CAAC;MAEF,IAAI1B,QAAQ,CAACgC,GAAG,CAAC1B,QAAQ,CAACY,OAAO,EAAE;QAC/BC,MAAM;QACNC,MAAM,EAAE,CAACA,MAAM;MACnB,CAAC,EAAE;QACCa,KAAK,EAAE;UACHC,WAAW,EAAE,IAAI;UACjBC,MAAM,EAAE;QACZ,CAAC;QACDC,gBAAgB,EAAE;MACtB,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAAC7B,cAAc,CAAC,CAAC;EAEpB,oBACIJ,OAAA;IAAKkC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBnC,OAAA;MAAIkC,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAAiC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7EvC,OAAA;MAAKwC,GAAG,EAAErC,QAAS;MAAC+B,SAAS,EAAC;IAA8B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClE,CAAC;AAEd,CAAC;AAACrC,EAAA,CA9CID,cAAc;AAAAwC,EAAA,GAAdxC,cAAc;AAgDpB,eAAeA,cAAc;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}