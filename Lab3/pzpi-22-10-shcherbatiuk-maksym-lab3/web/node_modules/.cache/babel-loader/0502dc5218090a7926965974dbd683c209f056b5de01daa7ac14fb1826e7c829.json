{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom'; // Імпортуємо useNavigate\nimport { auth, googleProvider } from '../firebase';\nimport { signInWithPopup } from 'firebase/auth';\nimport { UserContext } from '../contexts/UserContext';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate(); // Отримуємо функцію навігації\n  const {\n    user,\n    handleLoginSuccess\n  } = useContext(UserContext);\n  const [loginInProgress, setLoginInProgress] = useState(false);\n  const [formError, setFormError] = useState(null);\n  if (user) {\n    console.log('LoginPage: User is already logged in, navigating to /.');\n    navigate('/', {\n      replace: true\n    });\n    return null;\n  }\n  const handleLogin = async ({\n    email,\n    password\n  }) => {\n    setLoginInProgress(true);\n    setFormError(null);\n    console.log('LoginPage: Attempting password login with data:', {\n      email,\n      password\n    });\n    try {\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Password login success. Response received.');\n      const {\n        user\n      } = res.data;\n      localStorage.setItem('userName', user.name);\n      localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false');\n      localStorage.setItem('userId', user.id);\n      if (user.profile_picture_url) {\n        localStorage.setItem('profilePicture', user.profile_picture_url);\n        console.log('LoginPage: profilePicture saved to localStorage:', user.profile_picture_url);\n      } else {\n        localStorage.removeItem('profilePicture');\n        console.log('LoginPage: No profile picture URL received, removed from localStorage.');\n      }\n      handleLoginSuccess(user);\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('LoginPage: Password login error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Помилка входу';\n      setFormError(errorMessage);\n      alert('Помилка входу: ' + errorMessage);\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true);\n    setFormError(null);\n    console.log('LoginPage: Initiating Google sign-in popup.');\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      console.log('LoginPage: Firebase Google auth success. Token obtained.');\n      console.log('LoginPage: Sending Google token to backend /auth/login/google...');\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Backend Google login success. Response received.', res.data);\n      const {\n        user\n      } = res.data;\n      localStorage.setItem('userName', user.name);\n      localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false');\n      localStorage.setItem('userId', user.id);\n      if (user.profile_picture_url) {\n        localStorage.setItem('profilePicture', user.profile_picture_url);\n        console.log('LoginPage: profilePicture saved to localStorage:', user.profile_picture_url);\n      } else {\n        localStorage.removeItem('profilePicture');\n        console.log('LoginPage: No profile picture URL received, removed from localStorage.');\n      }\n      handleLoginSuccess(user);\n    } catch (error) {\n      console.error('LoginPage: Google login error:', error);\n      const errorMessage = error.message || 'Помилка авторизації через Google';\n      setFormError(errorMessage);\n      alert('Помилка авторизації через Google: ' + errorMessage);\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n\n  // Функція для переходу на сторінку реєстрації\n  const switchToRegister = () => {\n    navigate('/register');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px',\n        textAlign: 'center'\n      },\n      children: formError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      type: \"login\",\n      onSubmit: handleLogin,\n      onGoogleLogin: handleGoogleLogin,\n      isSubmitting: loginInProgress,\n      onSwitchType: switchToRegister // Передаємо функцію переходу\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(LoginPage, \"5RdBEZAkfv3gv9zjbmm2XkouREU=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","api","useNavigate","auth","googleProvider","signInWithPopup","UserContext","AuthForm","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","navigate","user","handleLoginSuccess","loginInProgress","setLoginInProgress","formError","setFormError","console","log","replace","handleLogin","email","password","res","post","withCredentials","data","localStorage","setItem","name","is_admin","id","profile_picture_url","removeItem","err","_err$response","_err$response2","_err$response2$data","error","response","message","errorMessage","alert","handleGoogleLogin","result","token","getIdToken","switchToRegister","children","style","color","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","onSwitchType","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom'; // Імпортуємо useNavigate\r\nimport { auth, googleProvider } from '../firebase';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { UserContext } from '../contexts/UserContext';\r\nimport AuthForm from '../components/AuthForm';\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate(); // Отримуємо функцію навігації\r\n    const { user, handleLoginSuccess } = useContext(UserContext);\r\n\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n    const [formError, setFormError] = useState(null);\r\n\r\n    if (user) {\r\n        console.log('LoginPage: User is already logged in, navigating to /.');\r\n        navigate('/', { replace: true });\r\n        return null;\r\n    }\r\n\r\n    const handleLogin = async ({ email, password }) => {\r\n        setLoginInProgress(true);\r\n        setFormError(null);\r\n        console.log('LoginPage: Attempting password login with data:', { email, password });\r\n        try {\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true\r\n            });\r\n            console.log('LoginPage: Password login success. Response received.');\r\n            const { user } = res.data;\r\n            localStorage.setItem('userName', user.name);\r\n            localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false');\r\n            localStorage.setItem('userId', user.id);\r\n            if (user.profile_picture_url) {\r\n                localStorage.setItem('profilePicture', user.profile_picture_url);\r\n                console.log('LoginPage: profilePicture saved to localStorage:', user.profile_picture_url);\r\n            } else {\r\n                localStorage.removeItem('profilePicture');\r\n                console.log('LoginPage: No profile picture URL received, removed from localStorage.');\r\n            }\r\n            handleLoginSuccess(user);\r\n        } catch (err) {\r\n            console.error('LoginPage: Password login error:', err.response?.data || err.message);\r\n            const errorMessage = err.response?.data?.message || 'Помилка входу';\r\n            setFormError(errorMessage);\r\n            alert('Помилка входу: ' + errorMessage);\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true);\r\n        setFormError(null);\r\n        console.log('LoginPage: Initiating Google sign-in popup.');\r\n        try {\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n            console.log('LoginPage: Firebase Google auth success. Token obtained.');\r\n            console.log('LoginPage: Sending Google token to backend /auth/login/google...');\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('LoginPage: Backend Google login success. Response received.', res.data);\r\n            const { user } = res.data;\r\n            localStorage.setItem('userName', user.name);\r\n            localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false');\r\n            localStorage.setItem('userId', user.id);\r\n            if (user.profile_picture_url) {\r\n                localStorage.setItem('profilePicture', user.profile_picture_url);\r\n                console.log('LoginPage: profilePicture saved to localStorage:', user.profile_picture_url);\r\n            } else {\r\n                localStorage.removeItem('profilePicture');\r\n                console.log('LoginPage: No profile picture URL received, removed from localStorage.');\r\n            }\r\n            handleLoginSuccess(user);\r\n        } catch (error) {\r\n            console.error('LoginPage: Google login error:', error);\r\n            const errorMessage = error.message || 'Помилка авторизації через Google';\r\n            setFormError(errorMessage);\r\n            alert('Помилка авторизації через Google: ' + errorMessage);\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    // Функція для переходу на сторінку реєстрації\r\n    const switchToRegister = () => {\r\n        navigate('/register');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {formError && <div style={{ color: 'red', marginBottom: '10px', textAlign: 'center' }}>{formError}</div>}\r\n\r\n            <AuthForm\r\n                type=\"login\"\r\n                onSubmit={handleLogin}\r\n                onGoogleLogin={handleGoogleLogin}\r\n                isSubmitting={loginInProgress}\r\n                onSwitchType={switchToRegister} // Передаємо функцію переходу\r\n            />\r\n        </>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}