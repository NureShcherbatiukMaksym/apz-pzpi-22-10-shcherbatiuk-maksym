{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\RegisterPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react'; // Додано useContext\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom';\nimport { signInWithPopup } from \"firebase/auth\";\nimport { auth, googleProvider } from \"../firebase\";\nimport { UserContext } from '../contexts/UserContext'; // Імпортуємо UserContext\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RegisterPage() {\n  _s();\n  const navigate = useNavigate();\n  // Отримуємо handleLoginSuccess з UserContext\n  const {\n    handleLoginSuccess\n  } = useContext(UserContext); // Використовуємо useContext\n  const [registerInProgress, setRegisterInProgress] = useState(false);\n  const [formError, setFormError] = useState(null); // Додаємо стан для помилок форми\n\n  // ВИПРАВЛЕНО: Сигнатура функції приймає ОБ'ЄКТ { email, password, name }\n  const handleRegister = async ({\n    email,\n    password,\n    name\n  }) => {\n    setRegisterInProgress(true);\n    setFormError(null); // Скидаємо помилку перед спробою\n    console.log('RegisterPage: Attempting password registration with data:', {\n      email,\n      password,\n      name\n    });\n    try {\n      const res = await api.post('/auth/register/password', {\n        email,\n        password,\n        name\n      });\n      console.log('Password registration success:', res.data);\n      const {\n        user\n      } = res.data; // Отримуємо об'єкт user з відповіді бекенда\n\n      // !!! ВИКЛИКАЄМО handleLoginSuccess для оновлення контексту та localStorage\n      handleLoginSuccess(user);\n\n      // Перенаправляємо на головну або іншу сторінку після успішної реєстрації та логіну\n      // Навігація на /login після успішної реєстрації не є типовою, краще перенаправити на головну\n      navigate('/'); // Наприклад, на головну сторінку\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('Registration error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Помилка реєстрації';\n      setFormError(errorMessage); // Встановлюємо помилку форми\n      alert('Помилка реєстрації: ' + errorMessage); // Показуємо повідомлення про помилку\n    } finally {\n      setRegisterInProgress(false);\n    }\n  };\n\n  // Ця функція ініціює Firebase popup\n  const handleGoogleRegister = async () => {\n    setRegisterInProgress(true);\n    setFormError(null); // Скидаємо помилку перед спробою\n    console.log('RegisterPage: Initiating Google sign-in popup for registration.');\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      console.log('RegisterPage: Sending Google token to backend /auth/register/google...');\n      const res = await api.post('/auth/register/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('Google registration success:', res.data);\n      const {\n        user\n      } = res.data; // Отримуємо об'єкт user з відповіді бекенда\n\n      // !!! ВИКЛИКАЄМО handleLoginSuccess для оновлення контексту та localStorage\n      handleLoginSuccess(user);\n\n      // Перенаправляємо на головну або іншу сторінку після успішної реєстрації та логіну через Google\n      navigate('/'); // Наприклад, на головну сторінку\n    } catch (error) {\n      console.error('Google registration error:', error);\n      const errorMessage = error.message || 'Помилка авторизації через Google';\n      setFormError(errorMessage); // Встановлюємо помилку форми\n      alert('Помилка авторизації через Google: ' + errorMessage); // Показуємо повідомлення про помилку\n    } finally {\n      setRegisterInProgress(false);\n    }\n  };\n\n  // Функція для переходу на сторінку логіну (використовується кнопкою перемикання)\n  const switchToLogin = () => {\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px',\n        textAlign: 'center'\n      },\n      children: formError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      type: \"register\",\n      onSubmit: handleRegister,\n      onGoogleLogin: handleGoogleRegister,\n      isSubmitting: registerInProgress,\n      onSwitchType: switchToLogin // Передаємо обробник для кнопки перемикання\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(RegisterPage, \"C5UUpLDs2BwcBzCW1Hd0idQo4bg=\", false, function () {\n  return [useNavigate];\n});\n_c = RegisterPage;\nvar _c;\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"names":["React","useState","useContext","AuthForm","api","useNavigate","signInWithPopup","auth","googleProvider","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","RegisterPage","_s","navigate","handleLoginSuccess","registerInProgress","setRegisterInProgress","formError","setFormError","handleRegister","email","password","name","console","log","res","post","data","user","err","_err$response","_err$response2","_err$response2$data","error","response","message","errorMessage","alert","handleGoogleRegister","result","token","getIdToken","withCredentials","switchToLogin","children","style","color","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","onSwitchType","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/RegisterPage.jsx"],"sourcesContent":["import React, { useState, useContext } from 'react'; // Додано useContext\r\nimport AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { signInWithPopup } from \"firebase/auth\";\r\nimport { auth, googleProvider } from \"../firebase\";\r\nimport { UserContext } from '../contexts/UserContext'; // Імпортуємо UserContext\r\n\r\nexport default function RegisterPage() {\r\n    const navigate = useNavigate();\r\n    // Отримуємо handleLoginSuccess з UserContext\r\n    const { handleLoginSuccess } = useContext(UserContext); // Використовуємо useContext\r\n    const [registerInProgress, setRegisterInProgress] = useState(false);\r\n    const [formError, setFormError] = useState(null); // Додаємо стан для помилок форми\r\n\r\n    // ВИПРАВЛЕНО: Сигнатура функції приймає ОБ'ЄКТ { email, password, name }\r\n    const handleRegister = async ({ email, password, name }) => {\r\n        setRegisterInProgress(true);\r\n        setFormError(null); // Скидаємо помилку перед спробою\r\n        console.log('RegisterPage: Attempting password registration with data:', { email, password, name });\r\n\r\n        try {\r\n            const res = await api.post('/auth/register/password', { email, password, name });\r\n            console.log('Password registration success:', res.data);\r\n\r\n            const { user } = res.data; // Отримуємо об'єкт user з відповіді бекенда\r\n\r\n            // !!! ВИКЛИКАЄМО handleLoginSuccess для оновлення контексту та localStorage\r\n            handleLoginSuccess(user);\r\n\r\n            // Перенаправляємо на головну або іншу сторінку після успішної реєстрації та логіну\r\n            // Навігація на /login після успішної реєстрації не є типовою, краще перенаправити на головну\r\n            navigate('/'); // Наприклад, на головну сторінку\r\n\r\n        } catch (err) {\r\n            console.error('Registration error:', err.response?.data || err.message);\r\n            const errorMessage = err.response?.data?.message || 'Помилка реєстрації';\r\n            setFormError(errorMessage); // Встановлюємо помилку форми\r\n            alert('Помилка реєстрації: ' + errorMessage); // Показуємо повідомлення про помилку\r\n        } finally {\r\n            setRegisterInProgress(false);\r\n        }\r\n    };\r\n\r\n\r\n    // Ця функція ініціює Firebase popup\r\n    const handleGoogleRegister = async () => {\r\n        setRegisterInProgress(true);\r\n        setFormError(null); // Скидаємо помилку перед спробою\r\n        console.log('RegisterPage: Initiating Google sign-in popup for registration.');\r\n        try {\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n\r\n            console.log('RegisterPage: Sending Google token to backend /auth/register/google...');\r\n            const res = await api.post('/auth/register/google', { token }, { withCredentials: true });\r\n\r\n            console.log('Google registration success:', res.data);\r\n            const { user } = res.data; // Отримуємо об'єкт user з відповіді бекенда\r\n\r\n            // !!! ВИКЛИКАЄМО handleLoginSuccess для оновлення контексту та localStorage\r\n            handleLoginSuccess(user);\r\n\r\n            // Перенаправляємо на головну або іншу сторінку після успішної реєстрації та логіну через Google\r\n            navigate('/'); // Наприклад, на головну сторінку\r\n\r\n        } catch (error) {\r\n            console.error('Google registration error:', error);\r\n            const errorMessage = error.message || 'Помилка авторизації через Google';\r\n            setFormError(errorMessage); // Встановлюємо помилку форми\r\n            alert('Помилка авторизації через Google: ' + errorMessage); // Показуємо повідомлення про помилку\r\n        } finally {\r\n            setRegisterInProgress(false);\r\n        }\r\n    };\r\n\r\n    // Функція для переходу на сторінку логіну (використовується кнопкою перемикання)\r\n    const switchToLogin = () => {\r\n        navigate('/login');\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {formError && <div style={{ color: 'red', marginBottom: '10px', textAlign: 'center' }}>{formError}</div>}\r\n\r\n            <AuthForm\r\n                type=\"register\"\r\n                onSubmit={handleRegister}\r\n                onGoogleLogin={handleGoogleRegister}\r\n                isSubmitting={registerInProgress}\r\n                onSwitchType={switchToLogin} // Передаємо обробник для кнопки перемикання\r\n            />\r\n        </>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}