{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\AnalyticsField.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Line as LineChart } from 'chartist';\nimport 'chartist/dist/chartist.css';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalyticsField = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [timeRange, setTimeRange] = useState('7d');\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const chartRef = useRef(null);\n  const selectField = useCallback(async fieldId => {\n    if (!fieldId) return;\n    try {\n      await api.post('/fields/select/', {\n        fieldId\n      });\n    } catch (err) {\n      console.error(`Помилка при виборі поля ID ${fieldId}:`, err);\n      throw new Error('Не вдалося вибрати поле.');\n    }\n  }, []);\n  const deselectField = useCallback(async fieldId => {\n    if (!fieldId) return;\n    try {\n      await api.post('/fields/deselect/', {\n        fieldId\n      });\n    } catch (err) {\n      console.warn(`Не вдалося деселектнути поле ID ${fieldId}:`, err);\n    }\n  }, []);\n  const fetchData = useCallback(async () => {\n    if (!id) return;\n    setIsLoading(true);\n    setError(null);\n    setChartData(null);\n    try {\n      await selectField(id);\n      const {\n        data\n      } = await api.get(`/field-measurements/chart/${timeRange}`);\n      const rawData = data === null || data === void 0 ? void 0 : data.aggregatedData;\n      if (!Array.isArray(rawData)) throw new Error('Неправильний формат даних.');\n      const timestamps = new Set();\n      rawData.forEach(sensor => {\n        var _sensor$data;\n        return (_sensor$data = sensor.data) === null || _sensor$data === void 0 ? void 0 : _sensor$data.forEach(entry => {\n          if (entry !== null && entry !== void 0 && entry.timestamp) timestamps.add(entry.timestamp);\n        });\n      });\n      const labels = [...timestamps].sort((a, b) => new Date(a) - new Date(b));\n      const series = rawData.map(sensor => {\n        var _sensor$data2;\n        const map = new Map();\n        (_sensor$data2 = sensor.data) === null || _sensor$data2 === void 0 ? void 0 : _sensor$data2.forEach(entry => {\n          if (entry.timestamp && entry.value != null) {\n            map.set(entry.timestamp, entry.value);\n          }\n        });\n        return labels.map(ts => {\n          var _map$get;\n          return (_map$get = map.get(ts)) !== null && _map$get !== void 0 ? _map$get : null;\n        });\n      });\n      const hasData = series.some(s => s.some(v => v !== null));\n      setChartData(hasData ? {\n        labels,\n        series\n      } : null);\n    } catch (err) {\n      setError(err.message || 'Помилка при завантаженні даних');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [id, timeRange, selectField]);\n  useEffect(() => {\n    fetchData();\n    return () => {\n      if (id) deselectField(id);\n    };\n  }, [fetchData, deselectField, id]);\n  useEffect(() => {\n    if (!chartData || !chartRef.current) return;\n    new LineChart(chartRef.current, chartData, {\n      fullWidth: true,\n      showPoint: true,\n      axisX: {\n        showGrid: false\n      },\n      axisY: {\n        onlyInteger: true\n      }\n    });\n  }, [chartData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold\",\n      children: \"\\u0410\\u043D\\u0430\\u043B\\u0456\\u0442\\u0438\\u043A\\u0430 \\u043F\\u043E\\u043B\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 27\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 23\n    }, this), !isLoading && !chartData && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0414\\u0430\\u043D\\u0456 \\u0432\\u0456\\u0434\\u0441\\u0443\\u0442\\u043D\\u0456.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartRef,\n      className: \"ct-chart ct-major-tenth mt-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(AnalyticsField, \"Kyjk2CtEGY1nacRgt6RHVuV0/6c=\", false, function () {\n  return [useParams];\n});\n_c = AnalyticsField;\nexport default AnalyticsField;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsField\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useParams","Line","LineChart","api","jsxDEV","_jsxDEV","AnalyticsField","_s","id","timeRange","setTimeRange","chartData","setChartData","isLoading","setIsLoading","error","setError","chartRef","selectField","fieldId","post","err","console","Error","deselectField","warn","fetchData","data","get","rawData","aggregatedData","Array","isArray","timestamps","Set","forEach","sensor","_sensor$data","entry","timestamp","add","labels","sort","a","b","Date","series","map","_sensor$data2","Map","value","set","ts","_map$get","hasData","some","s","v","message","current","fullWidth","showPoint","axisX","showGrid","axisY","onlyInteger","children","className","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/AnalyticsField.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Line as LineChart } from 'chartist';\r\nimport 'chartist/dist/chartist.css';\r\nimport api from '../utils/api';\r\n\r\nconst AnalyticsField = () => {\r\n    const { id } = useParams();\r\n    const [timeRange, setTimeRange] = useState('7d');\r\n    const [chartData, setChartData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const chartRef = useRef(null);\r\n\r\n    const selectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) return;\r\n        try {\r\n            await api.post('/fields/select/', { fieldId });\r\n        } catch (err) {\r\n            console.error(`Помилка при виборі поля ID ${fieldId}:`, err);\r\n            throw new Error('Не вдалося вибрати поле.');\r\n        }\r\n    }, []);\r\n\r\n    const deselectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) return;\r\n        try {\r\n            await api.post('/fields/deselect/', { fieldId });\r\n        } catch (err) {\r\n            console.warn(`Не вдалося деселектнути поле ID ${fieldId}:`, err);\r\n        }\r\n    }, []);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        if (!id) return;\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n        setChartData(null);\r\n\r\n        try {\r\n            await selectField(id);\r\n\r\n            const { data } = await api.get(`/field-measurements/chart/${timeRange}`);\r\n            const rawData = data?.aggregatedData;\r\n\r\n            if (!Array.isArray(rawData)) throw new Error('Неправильний формат даних.');\r\n\r\n            const timestamps = new Set();\r\n            rawData.forEach(sensor =>\r\n                sensor.data?.forEach(entry => {\r\n                    if (entry?.timestamp) timestamps.add(entry.timestamp);\r\n                })\r\n            );\r\n            const labels = [...timestamps].sort((a, b) => new Date(a) - new Date(b));\r\n\r\n            const series = rawData.map(sensor => {\r\n                const map = new Map();\r\n                sensor.data?.forEach(entry => {\r\n                    if (entry.timestamp && entry.value != null) {\r\n                        map.set(entry.timestamp, entry.value);\r\n                    }\r\n                });\r\n                return labels.map(ts => map.get(ts) ?? null);\r\n            });\r\n\r\n            const hasData = series.some(s => s.some(v => v !== null));\r\n\r\n            setChartData(hasData ? { labels, series } : null);\r\n        } catch (err) {\r\n            setError(err.message || 'Помилка при завантаженні даних');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [id, timeRange, selectField]);\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n\r\n        return () => {\r\n            if (id) deselectField(id);\r\n        };\r\n    }, [fetchData, deselectField, id]);\r\n\r\n    useEffect(() => {\r\n        if (!chartData || !chartRef.current) return;\r\n\r\n        new LineChart(chartRef.current, chartData, {\r\n            fullWidth: true,\r\n            showPoint: true,\r\n            axisX: { showGrid: false },\r\n            axisY: { onlyInteger: true }\r\n        });\r\n    }, [chartData]);\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"text-xl font-semibold\">Аналітика поля</h2>\r\n            {isLoading && <p>Завантаження...</p>}\r\n            {error && <p className=\"text-red-500\">{error}</p>}\r\n            {!isLoading && !chartData && <p>Дані відсутні.</p>}\r\n            <div ref={chartRef} className=\"ct-chart ct-major-tenth mt-4\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalyticsField;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}