{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\RegisterPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // *** ДОДАНО useState для стану завантаження ***\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom';\nimport { signInWithPopup } from \"firebase/auth\";\nimport { auth, googleProvider } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegisterPage() {\n  _s();\n  const navigate = useNavigate();\n  const [registerInProgress, setRegisterInProgress] = useState(false); // *** СТАН ЗАВАНТАЖЕННЯ ***\n\n  // *** ВИПРАВЛЕНО: Сигнатура функції приймає ОБ'ЄКТ { email, password, name } ***\n  const handleRegister = async ({\n    email,\n    password,\n    name\n  }) => {\n    setRegisterInProgress(true); // *** ВСТАНОВЛЮЄМО ЗАВАНТАЖЕННЯ НАЧАЛО ***\n    console.log('RegisterPage: Attempting password registration with data:', {\n      email,\n      password,\n      name\n    }); // Лог даних перед відправкою на бекенд\n\n    try {\n      // *** ВИКОРИСТОВУЄМО email, password, name, ВИЯТНУТІ З ОБ'ЄКТА ***\n      const res = await api.post('/auth/register/password', {\n        email,\n        password,\n        name\n      });\n      console.log('Register success:', res.data);\n\n      // ... Обробка успіху (як у вашому попередньому коді) ...\n      const {\n        user\n      } = res.data; // Припускаємо, що бекенд повертає об'єкт користувача на успіх\n\n      // *** ПРАВИЛЬНЕ ЗБЕРІГАННЯ В localStorage (з вашої \"робочої\" версії логіну) ***\n      localStorage.setItem('userName', user.name);\n      localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false'); // Зберігаємо булеве як рядок\n      localStorage.setItem('userId', user.id); // *** ЗБЕРІГАЄМО ID КОРИСТУВАЧА ***\n\n      // *** Перенаправляємо на сторінку логіну після успішної реєстрації ***\n      navigate('/login');\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('Registration error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message); // Лог помилки Axios\n      alert('Помилка реєстрації: ' + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message)); // Показуємо повідомлення про помилку\n    } finally {\n      setRegisterInProgress(false); // *** ВИМИКАЄМО ЗАВАНТАЖЕННЯ В КІНЦІ ***\n    }\n  };\n\n  // *** ВИПРАВЛЕНО: Сигнатура handleGoogleRegister (хоча AuthForm передає event, ця функція його не використовує) ***\n  // Ця функція ініціює Firebase popup, тому вона не приймає аргументів email/password/name від форми.\n  const handleGoogleRegister = async () => {\n    setRegisterInProgress(true); // *** ВСТАНОВЛЮЄМО ЗАВАНТАЖЕННЯ ***\n    console.log('RegisterPage: Initiating Google sign-in popup for registration.');\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      console.log('RegisterPage: Sending Google token to backend /auth/register/google (assuming endpoint exists)...');\n      // Примітка: Ваш попередній код використовував /auth/login/google тут.\n      // Якщо це реєстрація через Google, вам може знадобитися інший endpoint на бекенді, наприклад, /auth/register/google.\n      const res = await api.post('/auth/register/google', {\n        token\n      }, {\n        withCredentials: true\n      }); // *** Передаємо токен ***\n\n      console.log('Google registration success:', res.data);\n      // ... Обробка успіху (як у вашому попередньому коді) ...\n      const {\n        user\n      } = res.data; // Припускаємо, що бекенд повертає об'єкт користувача на успіх\n\n      // *** ПРАВИЛЬНЕ ЗБЕРІГАННЯ В localStorage ***\n      localStorage.setItem('userName', user.name);\n      localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false'); // Зберігаємо булеве як рядок\n      localStorage.setItem('userId', user.id); // *** ЗБЕРІГАЄМО ID КОРИСТУВАЧА ***\n\n      // *** Перенаправляємо після успішної реєстрації через Google ***\n      navigate('/home');\n    } catch (error) {\n      console.error('Google registration error:', error);\n      alert('Помилка авторизації через Google'); // Показуємо повідомлення про помилку\n    } finally {\n      setRegisterInProgress(false); // *** ВИМИКАЄМО ЗАВАНТАЖЕННЯ В КІНЦІ ***\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: \"register\",\n    onSubmit: handleRegister // Передаємо виправлений обробник\n    ,\n    onGoogleLogin: handleGoogleRegister // Передаємо обробник Google\n    ,\n    isSubmitting: registerInProgress // *** ПЕРЕДАЄМО СТАН ЗАВАНТАЖЕННЯ ДО ФОРМИ ***\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(RegisterPage, \"ZaiNOkPZp47JHY/iAOUV9AthnFo=\", false, function () {\n  return [useNavigate];\n});\n_c = RegisterPage;\nvar _c;\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"names":["React","useState","AuthForm","api","useNavigate","signInWithPopup","auth","googleProvider","jsxDEV","_jsxDEV","RegisterPage","_s","navigate","registerInProgress","setRegisterInProgress","handleRegister","email","password","name","console","log","res","post","data","user","localStorage","setItem","is_admin","id","err","_err$response","_err$response2","_err$response2$data","error","response","message","alert","handleGoogleRegister","result","token","getIdToken","withCredentials","type","onSubmit","onGoogleLogin","isSubmitting","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/RegisterPage.jsx"],"sourcesContent":["import React, { useState } from 'react'; // *** ДОДАНО useState для стану завантаження ***\r\nimport AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { signInWithPopup } from \"firebase/auth\";\r\nimport { auth, googleProvider } from \"../firebase\";\r\n\r\nexport default function RegisterPage() {\r\n    const navigate = useNavigate();\r\n    const [registerInProgress, setRegisterInProgress] = useState(false); // *** СТАН ЗАВАНТАЖЕННЯ ***\r\n\r\n\r\n    // *** ВИПРАВЛЕНО: Сигнатура функції приймає ОБ'ЄКТ { email, password, name } ***\r\n    const handleRegister = async ({ email, password, name }) => {\r\n        setRegisterInProgress(true); // *** ВСТАНОВЛЮЄМО ЗАВАНТАЖЕННЯ НАЧАЛО ***\r\n        console.log('RegisterPage: Attempting password registration with data:', { email, password, name }); // Лог даних перед відправкою на бекенд\r\n\r\n        try {\r\n            // *** ВИКОРИСТОВУЄМО email, password, name, ВИЯТНУТІ З ОБ'ЄКТА ***\r\n            const res = await api.post('/auth/register/password', { email, password, name });\r\n            console.log('Register success:', res.data);\r\n\r\n            // ... Обробка успіху (як у вашому попередньому коді) ...\r\n            const { user } = res.data; // Припускаємо, що бекенд повертає об'єкт користувача на успіх\r\n\r\n            // *** ПРАВИЛЬНЕ ЗБЕРІГАННЯ В localStorage (з вашої \"робочої\" версії логіну) ***\r\n            localStorage.setItem('userName', user.name);\r\n            localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false'); // Зберігаємо булеве як рядок\r\n            localStorage.setItem('userId', user.id); // *** ЗБЕРІГАЄМО ID КОРИСТУВАЧА ***\r\n\r\n            // *** Перенаправляємо на сторінку логіну після успішної реєстрації ***\r\n            navigate('/login');\r\n\r\n        } catch (err) {\r\n            console.error('Registration error:', err.response?.data || err.message); // Лог помилки Axios\r\n            alert('Помилка реєстрації: ' + (err.response?.data?.message || err.message)); // Показуємо повідомлення про помилку\r\n        } finally {\r\n            setRegisterInProgress(false); // *** ВИМИКАЄМО ЗАВАНТАЖЕННЯ В КІНЦІ ***\r\n        }\r\n    };\r\n\r\n\r\n    // *** ВИПРАВЛЕНО: Сигнатура handleGoogleRegister (хоча AuthForm передає event, ця функція його не використовує) ***\r\n    // Ця функція ініціює Firebase popup, тому вона не приймає аргументів email/password/name від форми.\r\n    const handleGoogleRegister = async () => {\r\n        setRegisterInProgress(true); // *** ВСТАНОВЛЮЄМО ЗАВАНТАЖЕННЯ ***\r\n        console.log('RegisterPage: Initiating Google sign-in popup for registration.');\r\n        try {\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n\r\n            console.log('RegisterPage: Sending Google token to backend /auth/register/google (assuming endpoint exists)...');\r\n            // Примітка: Ваш попередній код використовував /auth/login/google тут.\r\n            // Якщо це реєстрація через Google, вам може знадобитися інший endpoint на бекенді, наприклад, /auth/register/google.\r\n            const res = await api.post('/auth/register/google', { token }, { withCredentials: true }); // *** Передаємо токен ***\r\n\r\n            console.log('Google registration success:', res.data);\r\n            // ... Обробка успіху (як у вашому попередньому коді) ...\r\n            const { user } = res.data; // Припускаємо, що бекенд повертає об'єкт користувача на успіх\r\n\r\n            // *** ПРАВИЛЬНЕ ЗБЕРІГАННЯ В localStorage ***\r\n            localStorage.setItem('userName', user.name);\r\n            localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false'); // Зберігаємо булеве як рядок\r\n            localStorage.setItem('userId', user.id); // *** ЗБЕРІГАЄМО ID КОРИСТУВАЧА ***\r\n\r\n\r\n            // *** Перенаправляємо після успішної реєстрації через Google ***\r\n            navigate('/home');\r\n\r\n        } catch (error) {\r\n            console.error('Google registration error:', error);\r\n            alert('Помилка авторизації через Google'); // Показуємо повідомлення про помилку\r\n        } finally {\r\n            setRegisterInProgress(false); // *** ВИМИКАЄМО ЗАВАНТАЖЕННЯ В КІНЦІ ***\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <AuthForm\r\n            type=\"register\"\r\n            onSubmit={handleRegister} // Передаємо виправлений обробник\r\n            onGoogleLogin={handleGoogleRegister} // Передаємо обробник Google\r\n            isSubmitting={registerInProgress} // *** ПЕРЕДАЄМО СТАН ЗАВАНТАЖЕННЯ ДО ФОРМИ ***\r\n        />\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}