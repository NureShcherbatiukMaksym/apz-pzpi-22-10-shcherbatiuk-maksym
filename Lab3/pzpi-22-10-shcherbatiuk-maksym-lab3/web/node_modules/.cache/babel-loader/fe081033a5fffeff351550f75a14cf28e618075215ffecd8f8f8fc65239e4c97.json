{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\n// pages/LoginPage.js\nimport React, { useState, useContext } from 'react';\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api';\n// navigate потрібен для перенаправлення в початковій перевірці\nimport { useNavigate } from 'react-router-dom';\nimport { auth, googleProvider } from '../firebase';\nimport { signInWithPopup } from 'firebase/auth';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n\n  // Отримуємо user та handleLoginSuccess з UserContext\n  // user потрібен для початкової перевірки, handleLoginSuccess для повідомлення контексту про успіх\n  const {\n    user,\n    handleLoginSuccess\n  } = useContext(UserContext);\n\n  // Стан завантаження для кнопки/форми\n  const [loginInProgress, setLoginInProgress] = useState(false);\n  // Стан для відображення помилок форми\n  const [formError, setFormError] = useState(null);\n\n  // --- Перенаправлення, якщо користувач вже залогінений (перевірка стану з контексту) ---\n  // Цей блок ПЕРЕД рендерингом форми. Якщо user з контексту існує, ми одразу перенаправляємо.\n  // Це запобігає короткочасному показу форми логіну автентифікованим користувачам\n  // до того, як спрацює основний ефект перенаправлення в App.js.\n  // Використовуємо navigate hook.\n  if (user) {\n    console.log('LoginPage: User is already logged in, navigating to /.');\n    navigate('/', {\n      replace: true\n    }); // Використовуємо navigate для перенаправлення\n    return null; // Рендеримо null під час навігації\n  }\n\n  // --- Логіка стандартного логіну (email/password) ---\n  const handleLogin = async (email, password) => {\n    setLoginInProgress(true); // Встановлюємо стан завантаження\n    setFormError(null); // Очищаємо попередні помилки форми\n\n    try {\n      console.log('LoginPage: Attempting password login...');\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Password login success. Response received.');\n\n      // --- ПРАВИЛЬНИЙ ДОСТУП ДО ДАНИХ З ВІДПОВІДІ ВИКОРИСТОВУЮЧИ ДЕСТРУКТУРИЗАЦІЮ ---\n      const {\n        user\n      } = res.data; // Отримуємо вкладений об'єкт user\n      // --- КІНЕЦЬ ДЕСТРУКТУРИЗАЦІЇ ---\n\n      // --- ЗБЕРІГАННЯ В localStorage ---\n      // Використовуємо дані з деструктурованого об'єкта user\n      localStorage.setItem('userName', user.name);\n      localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false'); // Зберігаємо булеве як рядок\n      console.log('LoginPage: userName and isAdmin saved to localStorage.');\n      // --- КІНЕЦЬ ЗБЕРІГАННЯ ---\n\n      // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\n      // Передаємо ВЕСЬ деструктурований об'єкт user в контекст\n      // Контекст оновить свої стани (user, isAdmin) та запустить логіку перевірки пристрою (checkDeviceStatus).\n      handleLoginSuccess(user); // Передаємо деструктурований об'єкт user\n\n      // *** Не перенаправляємо тут! Навігацію контролює App.js на основі стану контексту (user, hasDevice). ***\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      // Обробка помилки логіну\n      console.error('LoginPage: Password login error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Помилка входу';\n      setFormError(errorMessage); // Встановлюємо помилку для відображення у формі\n      alert('Помилка входу: ' + errorMessage); // Також показуємо спливаюче повідомлення\n    } finally {\n      // Завжди завершуємо стан завантаження, незалежно від успіху чи помилки API логіну\n      setLoginInProgress(false);\n    }\n  };\n\n  // --- Логіка логіну через Google ---\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true); // Встановлюємо стан завантаження\n    setFormError(null); // Очищаємо попередні помилки форми\n\n    try {\n      console.log('LoginPage: Initiating Google sign-in popup.');\n      const result = await signInWithPopup(auth, googleProvider);\n      // Отримуємо ID токен від Firebase Auth\n      const token = await result.user.getIdToken();\n      console.log('LoginPage: Firebase Google auth success. Token obtained.');\n\n      // Відправляємо ID токен на ваш бекенд для верифікації та створення сесії\n      console.log('LoginPage: Sending Google token to backend /auth/login/google...');\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Backend Google login success. Response received.', res.data);\n\n      // --- ПРАВИЛЬНИЙ ДОСТУП ДО ДАНИХ З ВІДПОВІДІ ВИКОРИСТОВУЮЧИ ДЕСТРУКТУРИЗАЦІЮ ---\n      const {\n        user\n      } = res.data; // Отримуємо вкладений об'єкт user\n      // --- КІНЕЦЬ ДЕСТРУКТУРИЗАЦІЇ ---\n\n      // --- ЗБЕРІГАННЯ В localStorage ---\n      localStorage.setItem('userName', user.name); // Використовуємо дані з деструктурованого об'єкта\n      localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false'); // Використовуємо дані з деструктурованого об'єкта\n      console.log('LoginPage: userName and isAdmin saved to localStorage.');\n      // --- КІНЕЦЬ ЗБЕРІГАННЯ ---\n\n      // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\n      // Передаємо ВЕСЬ деструктурований об'єкт user в контекст\n      handleLoginSuccess(user); // Передаємо деструктурований об'єкт user\n\n      // *** Не перенаправляємо тут! Навігацію контролює App.js на основі стану контексту. ***\n    } catch (error) {\n      // Обробка помилки авторизації через Google\n      console.error('LoginPage: Google login error:', error);\n      const errorMessage = error.message || 'Помилка авторизації через Google';\n      setFormError(errorMessage); // Встановлюємо помилку для відображення у формі\n      alert('Помилка авторизації через Google: ' + errorMessage); // Також показуємо спливаюче повідомлення\n    } finally {\n      // Завжди завершуємо стан завантаження\n      setLoginInProgress(false);\n    }\n  };\n\n  // Рендеримо форму логіну тільки якщо user null (не авторизований).\n  // Якщо user є, блок if (user) вище поверне null і форма не покажеться.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px',\n        textAlign: 'center'\n      },\n      children: formError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      type: \"login\" // Тип форми: 'login' або 'register'\n      ,\n      onSubmit: handleLogin // Обробник для стандартного логіну/реєстрації\n      ,\n      onGoogleLogin: handleGoogleLogin // Обробник для логіну/реєстрації через Google\n      ,\n      isSubmitting: loginInProgress // Пропс для відображення стану завантаження у формі\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(LoginPage, \"5RdBEZAkfv3gv9zjbmm2XkouREU=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","AuthForm","api","useNavigate","auth","googleProvider","signInWithPopup","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","navigate","user","handleLoginSuccess","loginInProgress","setLoginInProgress","formError","setFormError","console","log","replace","handleLogin","email","password","res","post","withCredentials","data","localStorage","setItem","name","is_admin","err","_err$response","_err$response2","_err$response2$data","error","response","message","errorMessage","alert","handleGoogleLogin","result","token","getIdToken","children","style","color","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["// pages/LoginPage.js\r\nimport React, { useState, useContext } from 'react';\r\nimport AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api';\r\n// navigate потрібен для перенаправлення в початковій перевірці\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { auth, googleProvider } from '../firebase';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate();\r\n\r\n    // Отримуємо user та handleLoginSuccess з UserContext\r\n    // user потрібен для початкової перевірки, handleLoginSuccess для повідомлення контексту про успіх\r\n    const { user, handleLoginSuccess } = useContext(UserContext);\r\n\r\n    // Стан завантаження для кнопки/форми\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n    // Стан для відображення помилок форми\r\n    const [formError, setFormError] = useState(null);\r\n\r\n    // --- Перенаправлення, якщо користувач вже залогінений (перевірка стану з контексту) ---\r\n    // Цей блок ПЕРЕД рендерингом форми. Якщо user з контексту існує, ми одразу перенаправляємо.\r\n    // Це запобігає короткочасному показу форми логіну автентифікованим користувачам\r\n    // до того, як спрацює основний ефект перенаправлення в App.js.\r\n    // Використовуємо navigate hook.\r\n    if (user) {\r\n        console.log('LoginPage: User is already logged in, navigating to /.');\r\n        navigate('/', { replace: true }); // Використовуємо navigate для перенаправлення\r\n        return null; // Рендеримо null під час навігації\r\n    }\r\n\r\n\r\n    // --- Логіка стандартного логіну (email/password) ---\r\n    const handleLogin = async (email, password) => {\r\n        setLoginInProgress(true); // Встановлюємо стан завантаження\r\n        setFormError(null); // Очищаємо попередні помилки форми\r\n\r\n        try {\r\n            console.log('LoginPage: Attempting password login...');\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true\r\n            });\r\n            console.log('LoginPage: Password login success. Response received.');\r\n\r\n            // --- ПРАВИЛЬНИЙ ДОСТУП ДО ДАНИХ З ВІДПОВІДІ ВИКОРИСТОВУЮЧИ ДЕСТРУКТУРИЗАЦІЮ ---\r\n            const { user } = res.data; // Отримуємо вкладений об'єкт user\r\n            // --- КІНЕЦЬ ДЕСТРУКТУРИЗАЦІЇ ---\r\n\r\n            // --- ЗБЕРІГАННЯ В localStorage ---\r\n            // Використовуємо дані з деструктурованого об'єкта user\r\n            localStorage.setItem('userName', user.name);\r\n            localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false'); // Зберігаємо булеве як рядок\r\n            console.log('LoginPage: userName and isAdmin saved to localStorage.');\r\n            // --- КІНЕЦЬ ЗБЕРІГАННЯ ---\r\n\r\n            // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\r\n            // Передаємо ВЕСЬ деструктурований об'єкт user в контекст\r\n            // Контекст оновить свої стани (user, isAdmin) та запустить логіку перевірки пристрою (checkDeviceStatus).\r\n            handleLoginSuccess(user); // Передаємо деструктурований об'єкт user\r\n\r\n            // *** Не перенаправляємо тут! Навігацію контролює App.js на основі стану контексту (user, hasDevice). ***\r\n\r\n        } catch (err) {\r\n            // Обробка помилки логіну\r\n            console.error('LoginPage: Password login error:', err.response?.data || err.message);\r\n            const errorMessage = err.response?.data?.message || 'Помилка входу';\r\n            setFormError(errorMessage); // Встановлюємо помилку для відображення у формі\r\n            alert('Помилка входу: ' + errorMessage); // Також показуємо спливаюче повідомлення\r\n        } finally {\r\n            // Завжди завершуємо стан завантаження, незалежно від успіху чи помилки API логіну\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    // --- Логіка логіну через Google ---\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true); // Встановлюємо стан завантаження\r\n        setFormError(null); // Очищаємо попередні помилки форми\r\n\r\n        try {\r\n            console.log('LoginPage: Initiating Google sign-in popup.');\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            // Отримуємо ID токен від Firebase Auth\r\n            const token = await result.user.getIdToken();\r\n            console.log('LoginPage: Firebase Google auth success. Token obtained.');\r\n\r\n            // Відправляємо ID токен на ваш бекенд для верифікації та створення сесії\r\n            console.log('LoginPage: Sending Google token to backend /auth/login/google...');\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('LoginPage: Backend Google login success. Response received.', res.data);\r\n\r\n            // --- ПРАВИЛЬНИЙ ДОСТУП ДО ДАНИХ З ВІДПОВІДІ ВИКОРИСТОВУЮЧИ ДЕСТРУКТУРИЗАЦІЮ ---\r\n            const { user } = res.data; // Отримуємо вкладений об'єкт user\r\n            // --- КІНЕЦЬ ДЕСТРУКТУРИЗАЦІЇ ---\r\n\r\n            // --- ЗБЕРІГАННЯ В localStorage ---\r\n            localStorage.setItem('userName', user.name); // Використовуємо дані з деструктурованого об'єкта\r\n            localStorage.setItem('isAdmin', user.is_admin ? 'true' : 'false'); // Використовуємо дані з деструктурованого об'єкта\r\n            console.log('LoginPage: userName and isAdmin saved to localStorage.');\r\n            // --- КІНЕЦЬ ЗБЕРІГАННЯ ---\r\n\r\n\r\n            // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\r\n            // Передаємо ВЕСЬ деструктурований об'єкт user в контекст\r\n            handleLoginSuccess(user); // Передаємо деструктурований об'єкт user\r\n\r\n\r\n            // *** Не перенаправляємо тут! Навігацію контролює App.js на основі стану контексту. ***\r\n\r\n\r\n        } catch (error) {\r\n            // Обробка помилки авторизації через Google\r\n            console.error('LoginPage: Google login error:', error);\r\n            const errorMessage = error.message || 'Помилка авторизації через Google';\r\n            setFormError(errorMessage); // Встановлюємо помилку для відображення у формі\r\n            alert('Помилка авторизації через Google: ' + errorMessage); // Також показуємо спливаюче повідомлення\r\n        } finally {\r\n            // Завжди завершуємо стан завантаження\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n\r\n    // Рендеримо форму логіну тільки якщо user null (не авторизований).\r\n    // Якщо user є, блок if (user) вище поверне null і форма не покажеться.\r\n    return (\r\n        <>\r\n            {/* Відображаємо помилку форми, якщо вона є */}\r\n            {formError && <div style={{ color: 'red', marginBottom: '10px', textAlign: 'center' }}>{formError}</div>}\r\n\r\n            {/* Компонент форми автентифікації */}\r\n            <AuthForm\r\n                type=\"login\" // Тип форми: 'login' або 'register'\r\n                onSubmit={handleLogin} // Обробник для стандартного логіну/реєстрації\r\n                onGoogleLogin={handleGoogleLogin} // Обробник для логіну/реєстрації через Google\r\n                isSubmitting={loginInProgress} // Пропс для відображення стану завантаження у формі\r\n            />\r\n        </>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}