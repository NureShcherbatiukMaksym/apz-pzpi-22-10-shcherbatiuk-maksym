{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\n// pages/LoginPage.js\nimport React, { useState, useContext, useEffect } from 'react';\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom'; // Still need navigate for successful login redirect\nimport { auth, googleProvider } from '../firebase';\nimport { signInWithPopup } from 'firebase/auth';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n\n  // Get user state, loading (optional now), and the update/logout functions\n  const {\n    user,\n    loading: userLoading,\n    logoutUser,\n    updateUserStateAfterLogin\n  } = useContext(UserContext); // userLoading is less critical here now\n\n  const [loginInProgress, setLoginInProgress] = useState(false);\n  const [formError, setFormError] = useState(null); // State for login form specific errors\n\n  // --- No useEffect to redirect on mount anymore ---\n  // If the user is already logged in (user !== null in context),\n  // the top-level App component or Router will handle routing them away from /login.\n  // We only care about the user state *after* a successful login attempt here.\n\n  // Function to perform the device check and complete the login process\n  // This is called ONLY after a successful /auth/login... API call\n  const checkDevicesAndCompleteLogin = async userDataFromLogin => {\n    console.log('LoginPage: Checking devices after successful login...');\n    setLoginInProgress(true); // Keep loading true until this is done\n    setFormError(null); // Clear any previous form errors\n\n    try {\n      // This is the SINGLE place where device ownership is checked after login.\n      const devicesRes = await api.get('/user-iot-devices');\n      const userHasDevice = devicesRes.data && devicesRes.data.length > 0;\n      if (userHasDevice) {\n        console.log('LoginPage: Device check success. User has devices.');\n        // Store user info from login response in localStorage\n        localStorage.setItem('userName', userDataFromLogin.name);\n        localStorage.setItem('isAdmin', userDataFromLogin.is_admin ? 'true' : 'false'); // Store as string\n\n        // Update context state - signals successful login and device presence\n        updateUserStateAfterLogin(userDataFromLogin); // Pass user data\n\n        // Redirect to home page AFTER state is updated\n        navigate('/', {\n          replace: true\n        });\n      } else {\n        console.log('LoginPage: Device check success. User has NO devices.');\n        // User is authenticated by login API but has no device.\n        // Trigger logout which clears state/localStorage and redirects via App component.\n        logoutUser();\n        alert('Будь ласка, придбайте спочатку пристрій.'); // Show alert\n        // No explicit navigate needed here; logoutUser + App's effect handles it.\n      }\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('LoginPage: Error during device check after login:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      // If device check fails for any reason (network, 500 etc - NOT 401 as interceptor handles it),\n      // we treat it as an invalid login flow.\n      // Alert the user and force a local logout to ensure a clean state.\n      alert('Помилка перевірки пристроїв: ' + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message));\n      logoutUser(); // Force logout (clears state/LS, triggers App redirect)\n    } finally {\n      setLoginInProgress(false); // End loading state\n    }\n  };\n  const handleLogin = async (email, password) => {\n    setLoginInProgress(true);\n    setFormError(null); // Clear previous errors\n\n    try {\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Password login success.');\n\n      // Proceed to check devices and complete the login process\n      await checkDevicesAndCompleteLogin(res.data); // Pass user data from login response\n    } catch (err) {\n      var _err$response3, _err$response4, _err$response4$data;\n      console.error('LoginPage: Password login error:', ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || err.message);\n      const errorMessage = ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Помилка входу';\n      setFormError(errorMessage); // Set error for the form\n      // Alert the user as well\n      alert('Помилка входу: ' + errorMessage);\n      setLoginInProgress(false); // End loading state on login failure\n    }\n    // Note: setLoginInProgress(false) for success is handled inside checkDevicesAndCompleteLogin\n  };\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true);\n    setFormError(null); // Clear previous errors\n\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      console.log('LoginPage: Firebase Google auth success. Token obtained.');\n\n      // Send token to your backend for verification and session creation\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Backend Google login success.');\n\n      // Proceed to check devices and complete the login process\n      await checkDevicesAndCompleteLogin(res.data); // Pass user data from backend response\n    } catch (error) {\n      console.error('LoginPage: Google login error:', error);\n      const errorMessage = error.message || 'Помилка авторизації через Google';\n      setFormError(errorMessage); // Set error for the form\n      // Alert the user as well\n      alert('Помилка авторизації через Google: ' + errorMessage);\n      setLoginInProgress(false); // End loading state on login failure\n    }\n    // Note: setLoginInProgress(false) for success is handled inside checkDevicesAndCompleteLogin\n  };\n\n  // If user is already logged in according to context, this page shouldn't be shown.\n  // The top-level App component's effect will handle the redirect.\n  // We can render null or a simple message if this component is somehow reached while user is not null.\n  if (user) {\n    // This scenario should ideally be prevented by routing configuration\n    // and the App-level redirect effect.\n    return null; // Or a loading indicator if navigating\n  }\n\n  // Render the login form only if user is null (not logged in)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px'\n      },\n      children: formError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      type: \"login\",\n      onSubmit: handleLogin,\n      onGoogleLogin: handleGoogleLogin,\n      isSubmitting: loginInProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(LoginPage, \"bwAMu84pvp2cTbtwHpIELx8RZvI=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","useEffect","AuthForm","api","useNavigate","auth","googleProvider","signInWithPopup","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","navigate","user","loading","userLoading","logoutUser","updateUserStateAfterLogin","loginInProgress","setLoginInProgress","formError","setFormError","checkDevicesAndCompleteLogin","userDataFromLogin","console","log","devicesRes","get","userHasDevice","data","length","localStorage","setItem","name","is_admin","replace","alert","err","_err$response","_err$response2","_err$response2$data","error","response","message","handleLogin","email","password","res","post","withCredentials","_err$response3","_err$response4","_err$response4$data","errorMessage","handleGoogleLogin","result","token","getIdToken","children","style","color","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["// pages/LoginPage.js\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom'; // Still need navigate for successful login redirect\r\nimport { auth, googleProvider } from '../firebase';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate();\r\n\r\n    // Get user state, loading (optional now), and the update/logout functions\r\n    const { user, loading: userLoading, logoutUser, updateUserStateAfterLogin } = useContext(UserContext); // userLoading is less critical here now\r\n\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n    const [formError, setFormError] = useState(null); // State for login form specific errors\r\n\r\n    // --- No useEffect to redirect on mount anymore ---\r\n    // If the user is already logged in (user !== null in context),\r\n    // the top-level App component or Router will handle routing them away from /login.\r\n    // We only care about the user state *after* a successful login attempt here.\r\n\r\n    // Function to perform the device check and complete the login process\r\n    // This is called ONLY after a successful /auth/login... API call\r\n    const checkDevicesAndCompleteLogin = async (userDataFromLogin) => {\r\n        console.log('LoginPage: Checking devices after successful login...');\r\n        setLoginInProgress(true); // Keep loading true until this is done\r\n        setFormError(null); // Clear any previous form errors\r\n\r\n        try {\r\n            // This is the SINGLE place where device ownership is checked after login.\r\n            const devicesRes = await api.get('/user-iot-devices');\r\n            const userHasDevice = devicesRes.data && devicesRes.data.length > 0;\r\n\r\n            if (userHasDevice) {\r\n                console.log('LoginPage: Device check success. User has devices.');\r\n                // Store user info from login response in localStorage\r\n                localStorage.setItem('userName', userDataFromLogin.name);\r\n                localStorage.setItem('isAdmin', userDataFromLogin.is_admin ? 'true' : 'false'); // Store as string\r\n\r\n                // Update context state - signals successful login and device presence\r\n                updateUserStateAfterLogin(userDataFromLogin); // Pass user data\r\n\r\n                // Redirect to home page AFTER state is updated\r\n                navigate('/', { replace: true });\r\n\r\n            } else {\r\n                console.log('LoginPage: Device check success. User has NO devices.');\r\n                // User is authenticated by login API but has no device.\r\n                // Trigger logout which clears state/localStorage and redirects via App component.\r\n                logoutUser();\r\n                alert('Будь ласка, придбайте спочатку пристрій.'); // Show alert\r\n                // No explicit navigate needed here; logoutUser + App's effect handles it.\r\n            }\r\n        } catch (err) {\r\n            console.error('LoginPage: Error during device check after login:', err.response?.data || err.message);\r\n            // If device check fails for any reason (network, 500 etc - NOT 401 as interceptor handles it),\r\n            // we treat it as an invalid login flow.\r\n            // Alert the user and force a local logout to ensure a clean state.\r\n            alert('Помилка перевірки пристроїв: ' + (err.response?.data?.message || err.message));\r\n            logoutUser(); // Force logout (clears state/LS, triggers App redirect)\r\n        } finally {\r\n            setLoginInProgress(false); // End loading state\r\n        }\r\n    }\r\n\r\n\r\n    const handleLogin = async (email, password) => {\r\n        setLoginInProgress(true);\r\n        setFormError(null); // Clear previous errors\r\n\r\n        try {\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true\r\n            });\r\n            console.log('LoginPage: Password login success.');\r\n\r\n            // Proceed to check devices and complete the login process\r\n            await checkDevicesAndCompleteLogin(res.data); // Pass user data from login response\r\n\r\n        } catch (err) {\r\n            console.error('LoginPage: Password login error:', err.response?.data || err.message);\r\n            const errorMessage = err.response?.data?.message || 'Помилка входу';\r\n            setFormError(errorMessage); // Set error for the form\r\n            // Alert the user as well\r\n            alert('Помилка входу: ' + errorMessage);\r\n            setLoginInProgress(false); // End loading state on login failure\r\n        }\r\n        // Note: setLoginInProgress(false) for success is handled inside checkDevicesAndCompleteLogin\r\n    };\r\n\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true);\r\n        setFormError(null); // Clear previous errors\r\n\r\n        try {\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n            console.log('LoginPage: Firebase Google auth success. Token obtained.');\r\n\r\n            // Send token to your backend for verification and session creation\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('LoginPage: Backend Google login success.');\r\n\r\n            // Proceed to check devices and complete the login process\r\n            await checkDevicesAndCompleteLogin(res.data); // Pass user data from backend response\r\n\r\n        } catch (error) {\r\n            console.error('LoginPage: Google login error:', error);\r\n            const errorMessage = error.message || 'Помилка авторизації через Google';\r\n            setFormError(errorMessage); // Set error for the form\r\n            // Alert the user as well\r\n            alert('Помилка авторизації через Google: ' + errorMessage);\r\n            setLoginInProgress(false); // End loading state on login failure\r\n        }\r\n        // Note: setLoginInProgress(false) for success is handled inside checkDevicesAndCompleteLogin\r\n    };\r\n\r\n    // If user is already logged in according to context, this page shouldn't be shown.\r\n    // The top-level App component's effect will handle the redirect.\r\n    // We can render null or a simple message if this component is somehow reached while user is not null.\r\n    if (user) {\r\n        // This scenario should ideally be prevented by routing configuration\r\n        // and the App-level redirect effect.\r\n        return null; // Or a loading indicator if navigating\r\n    }\r\n\r\n\r\n    // Render the login form only if user is null (not logged in)\r\n    return (\r\n        <>\r\n            {formError && <div style={{ color: 'red', marginBottom: '10px' }}>{formError}</div>}\r\n            <AuthForm\r\n                type=\"login\"\r\n                onSubmit={handleLogin}\r\n                onGoogleLogin={handleGoogleLogin}\r\n                isSubmitting={loginInProgress}\r\n            />\r\n        </>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}