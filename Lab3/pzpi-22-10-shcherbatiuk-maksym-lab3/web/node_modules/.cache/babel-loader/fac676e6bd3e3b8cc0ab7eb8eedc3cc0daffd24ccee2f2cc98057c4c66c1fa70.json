{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\n// pages/LoginPage.js\nimport React, { useState, useContext } from 'react';\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom'; // Потрібен для App.js, тут можна прибрати, якщо не використовується в error handling\nimport { auth, googleProvider } from '../firebase';\nimport { signInWithPopup } from 'firebase/auth';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  // navigate тут не потрібен, оскільки перенаправленням керує App.js після оновлення контексту\n  // const navigate = useNavigate(); // Можна прибрати\n\n  const {\n    user,\n    logoutUser,\n    handleLoginSuccess\n  } = useContext(UserContext);\n  const [loginInProgress, setLoginInProgress] = useState(false);\n  const [formError, setFormError] = useState(null); // Стан для помилок форми логіну\n\n  // *** ВИДАЛЕНО: ПРЯМЕ ПЕРЕНАПРАВЛЕННЯ В ТІЛІ КОМПОНЕНТА ***\n  if (user) {\n    console.log('LoginPage: User is already logged in, rendering null.');\n    // Використовуйте navigate з App.js для перенаправлення, якщо компонент App ще цього не зробив\n    // Якщо використовуєте навігацію тут, потрібно імпортувати useNavigate і розкоментувати:\n    // const navigate = useNavigate();\n    // navigate('/', { replace: true });\n    return null;\n  }\n\n  // --- Логіка логіну ---\n  const handleLogin = async (email, password) => {\n    setLoginInProgress(true);\n    setFormError(null); // Очищаємо попередні помилки\n\n    try {\n      console.log('LoginPage: Attempting password login...');\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Password login success. Response received:', res.data); // Логуємо всю відповідь для перевірки\n\n      // --- ЗБЕРІГАННЯ В localStorage ---\n      // *** ВИПРАВЛЕНО ДОСТУП ДО Вкладених ДАНИХ ***\n      localStorage.setItem('userName', res.data.user.name); // Додано .user\n      localStorage.setItem('isAdmin', res.data.user.is_admin ? 'true' : 'false'); // Додано .user\n      console.log('LoginPage: userName and isAdmin saved to localStorage.');\n      // --- ЗБЕРІГАННЯ В localStorage ---\n\n      // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\n      // *** ВИПРАВЛЕНО ПЕРЕДАЧУ Вкладених ДАНИХ В КОНТЕКСТ ***\n      // Передаємо Вкладений об'єкт user\n      handleLoginSuccess(res.data.user);\n\n      // Перенаправлення відбудеться в App.js, коли контекст оновить стани.\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('LoginPage: Password login error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Помилка входу';\n      setFormError(errorMessage);\n      alert('Помилка входу: ' + errorMessage);\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true);\n    setFormError(null); // Очищаємо попередні помилки\n\n    try {\n      console.log('LoginPage: Initiating Google sign-in popup.');\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      console.log('LoginPage: Firebase Google auth success. Token obtained.');\n      console.log('LoginPage: Sending Google token to backend /auth/login/google...');\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Backend Google login success. Response received:', res.data); // Логуємо всю відповідь\n\n      // --- ЗБЕРІГАННЯ В localStorage ---\n      // *** ВИПРАВЛЕНО ДОСТУП ДО Вкладених ДАНИХ ***\n      localStorage.setItem('userName', res.data.user.name); // Додано .user\n      localStorage.setItem('isAdmin', res.data.user.is_admin ? 'true' : 'false'); // Додано .user\n      console.log('LoginPage: userName and isAdmin saved to localStorage.');\n      // --- ЗБЕРІГАННЯ В localStorage ---\n\n      // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\n      // *** ВИПРАВЛЕНО ПЕРЕДАЧУ Вкладених ДАНИХ В КОНТЕКСТ ***\n      handleLoginSuccess(res.data.user); // Передаємо Вкладений об'єкт user\n\n      // Перенаправлення відбудеться в App.js, коли контекст оновить стани.\n    } catch (error) {\n      console.error('LoginPage: Google login error:', error);\n      const errorMessage = error.message || 'Помилка авторизації через Google';\n      setFormError(errorMessage);\n      alert('Помилка авторизації через Google: ' + errorMessage);\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n\n  // Рендеримо форму логіну тільки якщо користувач null (не авторизований)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px',\n        textAlign: 'center'\n      },\n      children: formError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      type: \"login\",\n      onSubmit: handleLogin,\n      onGoogleLogin: handleGoogleLogin,\n      isSubmitting: loginInProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(LoginPage, \"CfOD21D1wFydEBbsAmrjk+7jSXU=\");\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","AuthForm","api","useNavigate","auth","googleProvider","signInWithPopup","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","user","logoutUser","handleLoginSuccess","loginInProgress","setLoginInProgress","formError","setFormError","console","log","handleLogin","email","password","res","post","withCredentials","data","localStorage","setItem","name","is_admin","err","_err$response","_err$response2","_err$response2$data","error","response","message","errorMessage","alert","handleGoogleLogin","result","token","getIdToken","children","style","color","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["// pages/LoginPage.js\r\nimport React, { useState, useContext } from 'react';\r\nimport AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom'; // Потрібен для App.js, тут можна прибрати, якщо не використовується в error handling\r\nimport { auth, googleProvider } from '../firebase';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nexport default function LoginPage() {\r\n    // navigate тут не потрібен, оскільки перенаправленням керує App.js після оновлення контексту\r\n    // const navigate = useNavigate(); // Можна прибрати\r\n\r\n    const { user, logoutUser, handleLoginSuccess } = useContext(UserContext);\r\n\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n    const [formError, setFormError] = useState(null); // Стан для помилок форми логіну\r\n\r\n    // *** ВИДАЛЕНО: ПРЯМЕ ПЕРЕНАПРАВЛЕННЯ В ТІЛІ КОМПОНЕНТА ***\r\n    if (user) {\r\n        console.log('LoginPage: User is already logged in, rendering null.');\r\n        // Використовуйте navigate з App.js для перенаправлення, якщо компонент App ще цього не зробив\r\n        // Якщо використовуєте навігацію тут, потрібно імпортувати useNavigate і розкоментувати:\r\n        // const navigate = useNavigate();\r\n        // navigate('/', { replace: true });\r\n        return null;\r\n    }\r\n\r\n    // --- Логіка логіну ---\r\n    const handleLogin = async (email, password) => {\r\n        setLoginInProgress(true);\r\n        setFormError(null); // Очищаємо попередні помилки\r\n\r\n        try {\r\n            console.log('LoginPage: Attempting password login...');\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true\r\n            });\r\n            console.log('LoginPage: Password login success. Response received:', res.data); // Логуємо всю відповідь для перевірки\r\n\r\n            // --- ЗБЕРІГАННЯ В localStorage ---\r\n            // *** ВИПРАВЛЕНО ДОСТУП ДО Вкладених ДАНИХ ***\r\n            localStorage.setItem('userName', res.data.user.name); // Додано .user\r\n            localStorage.setItem('isAdmin', res.data.user.is_admin ? 'true' : 'false'); // Додано .user\r\n            console.log('LoginPage: userName and isAdmin saved to localStorage.');\r\n            // --- ЗБЕРІГАННЯ В localStorage ---\r\n\r\n            // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\r\n            // *** ВИПРАВЛЕНО ПЕРЕДАЧУ Вкладених ДАНИХ В КОНТЕКСТ ***\r\n            // Передаємо Вкладений об'єкт user\r\n            handleLoginSuccess(res.data.user);\r\n\r\n            // Перенаправлення відбудеться в App.js, коли контекст оновить стани.\r\n\r\n        } catch (err) {\r\n            console.error('LoginPage: Password login error:', err.response?.data || err.message);\r\n            const errorMessage = err.response?.data?.message || 'Помилка входу';\r\n            setFormError(errorMessage);\r\n            alert('Помилка входу: ' + errorMessage);\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true);\r\n        setFormError(null); // Очищаємо попередні помилки\r\n\r\n        try {\r\n            console.log('LoginPage: Initiating Google sign-in popup.');\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n            console.log('LoginPage: Firebase Google auth success. Token obtained.');\r\n\r\n            console.log('LoginPage: Sending Google token to backend /auth/login/google...');\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('LoginPage: Backend Google login success. Response received:', res.data); // Логуємо всю відповідь\r\n\r\n            // --- ЗБЕРІГАННЯ В localStorage ---\r\n            // *** ВИПРАВЛЕНО ДОСТУП ДО Вкладених ДАНИХ ***\r\n            localStorage.setItem('userName', res.data.user.name); // Додано .user\r\n            localStorage.setItem('isAdmin', res.data.user.is_admin ? 'true' : 'false'); // Додано .user\r\n            console.log('LoginPage: userName and isAdmin saved to localStorage.');\r\n            // --- ЗБЕРІГАННЯ В localStorage ---\r\n\r\n\r\n            // --- ПОВІДОМЛЯЄМО КОНТЕКСТ ПРО УСПІХ ---\r\n            // *** ВИПРАВЛЕНО ПЕРЕДАЧУ Вкладених ДАНИХ В КОНТЕКСТ ***\r\n            handleLoginSuccess(res.data.user); // Передаємо Вкладений об'єкт user\r\n\r\n            // Перенаправлення відбудеться в App.js, коли контекст оновить стани.\r\n\r\n\r\n        } catch (error) {\r\n            console.error('LoginPage: Google login error:', error);\r\n            const errorMessage = error.message || 'Помилка авторизації через Google';\r\n            setFormError(errorMessage);\r\n            alert('Помилка авторизації через Google: ' + errorMessage);\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n\r\n    // Рендеримо форму логіну тільки якщо користувач null (не авторизований)\r\n    return (\r\n        <>\r\n            {formError && <div style={{ color: 'red', marginBottom: '10px', textAlign: 'center' }}>{formError}</div>}\r\n            <AuthForm\r\n                type=\"login\"\r\n                onSubmit={handleLogin}\r\n                onGoogleLogin={handleGoogleLogin}\r\n                isSubmitting={loginInProgress}\r\n            />\r\n        </>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}