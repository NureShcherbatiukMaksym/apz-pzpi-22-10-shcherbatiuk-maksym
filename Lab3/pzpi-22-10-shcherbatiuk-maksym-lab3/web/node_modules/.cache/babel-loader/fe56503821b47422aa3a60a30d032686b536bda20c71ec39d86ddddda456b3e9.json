{"ast":null,"code":"// utils/api.js\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  // або твій домен\n  withCredentials: true // якщо токени/сесія у cookie\n});\n\n// Змінна для зберігання функції logoutUser, яку ми передамо з UserContext\n// Це патерн, який дозволяє не-React коду (Interceptor) викликати React-логіку (logout)\nlet onUnauthorizedCallback = null;\n\n// Функція для встановлення зворотного виклику для обробки неавторизованих запитів\nexport const setUnauthorizedCallback = callback => {\n  onUnauthorizedCallback = callback;\n};\n\n// Додаємо інтерцептор для відповідей\napi.interceptors.response.use(response => response,\n// Якщо відповідь успішна, просто передаємо далі\nasync error => {\n  var _error$response;\n  // Перевіряємо, чи це помилка відповіді від сервера, статус 401\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.error('API Interceptor: Received 401 Unauthorized. Logging out.');\n    // Викликаємо зворотний виклик, якщо він встановлений\n    if (onUnauthorizedCallback) {\n      // Можливо, варто переконатися, що ми не викликаємо його кілька разів поспіль\n      // наприклад, встановити прапор isLoggingOut = true\n      // if (!isLoggingOut) { isLoggingOut = true; await onUnauthorizedCallback(); isLoggingOut = false; }\n      await onUnauthorizedCallback(); // Викликаємо функцію logoutUser з контексту\n      // Перенаправлення на сторінку логіну може бути частиною logoutUser або окремою дією\n    } else {\n      console.warn('API Interceptor: 401 received, but no unauthorized callback is set.');\n      // Якщо callback не встановлено (наприклад, на сторінці логіну), можемо просто логувати\n    }\n  }\n  // Важливо: завжди повертаємо помилку, щоб компонент, який зробив запит, міг її обробити\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","onUnauthorizedCallback","setUnauthorizedCallback","callback","interceptors","response","use","error","_error$response","status","console","warn","Promise","reject"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/utils/api.js"],"sourcesContent":["// utils/api.js\r\nimport axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:5000/api', // або твій домен\r\n    withCredentials: true, // якщо токени/сесія у cookie\r\n});\r\n\r\n// Змінна для зберігання функції logoutUser, яку ми передамо з UserContext\r\n// Це патерн, який дозволяє не-React коду (Interceptor) викликати React-логіку (logout)\r\nlet onUnauthorizedCallback = null;\r\n\r\n// Функція для встановлення зворотного виклику для обробки неавторизованих запитів\r\nexport const setUnauthorizedCallback = (callback) => {\r\n    onUnauthorizedCallback = callback;\r\n};\r\n\r\n// Додаємо інтерцептор для відповідей\r\napi.interceptors.response.use(\r\n    response => response, // Якщо відповідь успішна, просто передаємо далі\r\n    async error => {\r\n        // Перевіряємо, чи це помилка відповіді від сервера, статус 401\r\n        if (error.response?.status === 401) {\r\n            console.error('API Interceptor: Received 401 Unauthorized. Logging out.');\r\n            // Викликаємо зворотний виклик, якщо він встановлений\r\n            if (onUnauthorizedCallback) {\r\n                // Можливо, варто переконатися, що ми не викликаємо його кілька разів поспіль\r\n                // наприклад, встановити прапор isLoggingOut = true\r\n                // if (!isLoggingOut) { isLoggingOut = true; await onUnauthorizedCallback(); isLoggingOut = false; }\r\n                await onUnauthorizedCallback(); // Викликаємо функцію logoutUser з контексту\r\n                // Перенаправлення на сторінку логіну може бути частиною logoutUser або окремою дією\r\n            } else {\r\n                console.warn('API Interceptor: 401 received, but no unauthorized callback is set.');\r\n                // Якщо callback не встановлено (наприклад, на сторінці логіну), можемо просто логувати\r\n            }\r\n        }\r\n        // Важливо: завжди повертаємо помилку, щоб компонент, який зробив запит, міг її обробити\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;;AAEF;AACA;AACA,IAAIC,sBAAsB,GAAG,IAAI;;AAEjC;AACA,OAAO,MAAMC,uBAAuB,GAAIC,QAAQ,IAAK;EACjDF,sBAAsB,GAAGE,QAAQ;AACrC,CAAC;;AAED;AACAN,GAAG,CAACO,YAAY,CAACC,QAAQ,CAACC,GAAG,CACzBD,QAAQ,IAAIA,QAAQ;AAAE;AACtB,MAAME,KAAK,IAAI;EAAA,IAAAC,eAAA;EACX;EACA,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAChCC,OAAO,CAACH,KAAK,CAAC,0DAA0D,CAAC;IACzE;IACA,IAAIN,sBAAsB,EAAE;MACxB;MACA;MACA;MACA,MAAMA,sBAAsB,CAAC,CAAC,CAAC,CAAC;MAChC;IACJ,CAAC,MAAM;MACHS,OAAO,CAACC,IAAI,CAAC,qEAAqE,CAAC;MACnF;IACJ;EACJ;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeV,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}