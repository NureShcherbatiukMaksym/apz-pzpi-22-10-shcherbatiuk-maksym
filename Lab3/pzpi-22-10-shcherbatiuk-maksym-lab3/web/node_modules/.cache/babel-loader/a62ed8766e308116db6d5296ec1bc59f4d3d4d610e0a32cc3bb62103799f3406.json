{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\n// pages/LoginPage.js\nimport React, { useState, useContext } from 'react'; // Прибрано useEffect\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom'; // Потрібно для перенаправлення ПІСЛЯ успішного логіну\nimport { auth, googleProvider } from '../firebase';\nimport { signInWithPopup } from 'firebase/auth';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n\n  // Отримуємо стан користувача та функції update/logout\n  // userLoading тепер менш критичний, оскільки немає початкового завантаження автентифікації\n  const {\n    user,\n    logoutUser,\n    updateUserStateAfterLogin\n  } = useContext(UserContext);\n  const [loginInProgress, setLoginInProgress] = useState(false);\n  const [formError, setFormError] = useState(null); // Стан для помилок форми логіну\n\n  // --- useEffect для перенаправлення при монтуванні ВИДАЛЕНО ---\n  // Якщо 'user' не null (користувач авторизований), це означає, що компонент App\n  // вже визначив його статус і, якщо потрібно, перенаправить звідси.\n  // Ми просто не рендеримо форму логіну, якщо користувач є.\n  if (user) {\n    // Ця ситуація в ідеалі має запобігатися конфігурацією роутінгу в App.js\n    // та ефектом перенаправлення на рівні App.\n    return null; // Або індикатор завантаження, якщо відбувається навігація\n  }\n\n  // Функція для виконання перевірки пристроїв та завершення процесу логіну\n  // Ця функція викликається ТІЛЬКИ після успішного виклику API логіну (статус 200)\n  const checkDevicesAndCompleteLogin = async userDataFromLogin => {\n    console.log('LoginPage: Checking devices after successful login...');\n    // setLoginInProgress(true); // Цей стан вже встановлено у handleLogin/handleGoogleLogin\n\n    try {\n      // Це ЄДИНЕ місце, де перевіряється наявність пристрою після логіну.\n      const devicesRes = await api.get('/user-iot-devices');\n      const userHasDevice = devicesRes.data && devicesRes.data.length > 0;\n      if (userHasDevice) {\n        console.log('LoginPage: Device check success. User has devices.');\n        // --- ЗБЕРІГАННЯ В localStorage ---\n        localStorage.setItem('userName', userDataFromLogin.name);\n        localStorage.setItem('isAdmin', userDataFromLogin.is_admin ? 'true' : 'false'); // Зберігаємо як рядок\n        console.log('LoginPage: userName and isAdmin saved to localStorage.');\n        // --- ЗБЕРІГАННЯ В localStorage ---\n\n        // Оновлюємо стан контексту - сигналізує про успішний логін та наявність пристрою\n        updateUserStateAfterLogin(userDataFromLogin); // Передаємо дані користувача\n\n        // Перенаправляємо на домашню сторінку ПІСЛЯ оновлення стану. Використовуємо navigate з react-router-dom.\n        navigate('/', {\n          replace: true\n        });\n      } else {\n        console.log('LoginPage: Device check success. User has NO devices.');\n        // Користувач автентифікований API логіну, але не має пристрою.\n        // Запускаємо процес виходу, який очистить стан/localStorage та викличе перенаправлення через компонент App.\n        logoutUser(); // Це викличе локальне очищення та спрацює ефект навігації в App\n        alert('Будь ласка, придбайте спочатку пристрій.'); // Показуємо повідомлення\n        // Немає потреби в явному navigate тут; logoutUser + ефект App справляться з цим.\n      }\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('LoginPage: Error during device check after login:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      // Якщо перевірка пристроїв не вдалася з будь-якої причини (мережа, 500 тощо - НЕ 401, оскільки його обробляє перехоплювач),\n      // ми вважаємо це некоректним потоком логіну.\n      // Повідомляємо користувача про помилку та примусово запускаємо локальний вихід для забезпечення чистого стану.\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Помилка перевірки пристроїв';\n      setFormError(errorMessage); // Встановлюємо помилку для форми\n      alert(errorMessage); // Також повідомляємо користувача\n      logoutUser(); // Примусовий вихід (очищає стан/LS, запускає перенаправлення App)\n    } finally {\n      setLoginInProgress(false); // Завершуємо стан завантаження\n    }\n  };\n  const handleLogin = async (email, password) => {\n    setLoginInProgress(true);\n    setFormError(null); // Очищаємо попередні помилки\n\n    try {\n      console.log('LoginPage: Attempting password login...');\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Password login success. Response received.');\n\n      // Переходимо до перевірки пристроїв та завершення процесу логіну\n      // Передаємо дані користувача з відповіді логіну (припускаємо, що вона містить { name, is_admin })\n      await checkDevicesAndCompleteLogin(res.data);\n    } catch (err) {\n      var _err$response3, _err$response4, _err$response4$data;\n      console.error('LoginPage: Password login error:', ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || err.message);\n      const errorMessage = ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Помилка входу';\n      setFormError(errorMessage); // Встановлюємо помилку для форми\n      alert('Помилка входу: ' + errorMessage); // Також повідомляємо користувача\n      setLoginInProgress(false); // Завершуємо стан завантаження при помилці логіну\n    }\n    // Note: setLoginInProgress(false) для успіху обробляється всередині checkDevicesAndCompleteLogin\n  };\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true);\n    setFormError(null); // Очищаємо попередні помилки\n\n    try {\n      console.log('LoginPage: Initiating Google sign-in popup.');\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      console.log('LoginPage: Firebase Google auth success. Token obtained.');\n\n      // Відправляємо токен на ваш бекенд для верифікації та створення сесії\n      console.log('LoginPage: Sending Google token to backend /auth/login/google...');\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Backend Google login success. Response received.');\n\n      // Переходимо до перевірки пристроїв та завершення процесу логіну\n      // Передаємо дані користувача з відповіді бекенду (припускаємо, що вона містить { name, is_admin })\n      await checkDevicesAndCompleteLogin(res.data);\n    } catch (error) {\n      console.error('LoginPage: Google login error:', error);\n      const errorMessage = error.message || 'Помилка авторизації через Google';\n      setFormError(errorMessage); // Встановлюємо помилку для форми\n      alert('Помилка авторизації через Google: ' + errorMessage); // Також повідомляємо користувача\n      setLoginInProgress(false); // Завершуємо стан завантаження при помилці логіну\n    }\n    // Note: setLoginInProgress(false) для успіху обробляється всередині checkDevicesAndCompleteLogin\n  };\n\n  // Рендеримо форму логіну тільки якщо користувач null (не авторизований)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px',\n        textAlign: 'center'\n      },\n      children: formError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      type: \"login\",\n      onSubmit: handleLogin,\n      onGoogleLogin: handleGoogleLogin,\n      isSubmitting: loginInProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(LoginPage, \"+IZH/aGDxizRFQZl0ODFzop+axA=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","AuthForm","api","useNavigate","auth","googleProvider","signInWithPopup","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","navigate","user","logoutUser","updateUserStateAfterLogin","loginInProgress","setLoginInProgress","formError","setFormError","checkDevicesAndCompleteLogin","userDataFromLogin","console","log","devicesRes","get","userHasDevice","data","length","localStorage","setItem","name","is_admin","replace","alert","err","_err$response","_err$response2","_err$response2$data","error","response","message","errorMessage","handleLogin","email","password","res","post","withCredentials","_err$response3","_err$response4","_err$response4$data","handleGoogleLogin","result","token","getIdToken","children","style","color","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["// pages/LoginPage.js\r\nimport React, { useState, useContext } from 'react'; // Прибрано useEffect\r\nimport AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom'; // Потрібно для перенаправлення ПІСЛЯ успішного логіну\r\nimport { auth, googleProvider } from '../firebase';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate();\r\n\r\n    // Отримуємо стан користувача та функції update/logout\r\n    // userLoading тепер менш критичний, оскільки немає початкового завантаження автентифікації\r\n    const { user, logoutUser, updateUserStateAfterLogin } = useContext(UserContext);\r\n\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n    const [formError, setFormError] = useState(null); // Стан для помилок форми логіну\r\n\r\n    // --- useEffect для перенаправлення при монтуванні ВИДАЛЕНО ---\r\n    // Якщо 'user' не null (користувач авторизований), це означає, що компонент App\r\n    // вже визначив його статус і, якщо потрібно, перенаправить звідси.\r\n    // Ми просто не рендеримо форму логіну, якщо користувач є.\r\n    if (user) {\r\n        // Ця ситуація в ідеалі має запобігатися конфігурацією роутінгу в App.js\r\n        // та ефектом перенаправлення на рівні App.\r\n        return null; // Або індикатор завантаження, якщо відбувається навігація\r\n    }\r\n\r\n    // Функція для виконання перевірки пристроїв та завершення процесу логіну\r\n    // Ця функція викликається ТІЛЬКИ після успішного виклику API логіну (статус 200)\r\n    const checkDevicesAndCompleteLogin = async (userDataFromLogin) => {\r\n        console.log('LoginPage: Checking devices after successful login...');\r\n        // setLoginInProgress(true); // Цей стан вже встановлено у handleLogin/handleGoogleLogin\r\n\r\n        try {\r\n            // Це ЄДИНЕ місце, де перевіряється наявність пристрою після логіну.\r\n            const devicesRes = await api.get('/user-iot-devices');\r\n            const userHasDevice = devicesRes.data && devicesRes.data.length > 0;\r\n\r\n            if (userHasDevice) {\r\n                console.log('LoginPage: Device check success. User has devices.');\r\n                // --- ЗБЕРІГАННЯ В localStorage ---\r\n                localStorage.setItem('userName', userDataFromLogin.name);\r\n                localStorage.setItem('isAdmin', userDataFromLogin.is_admin ? 'true' : 'false'); // Зберігаємо як рядок\r\n                console.log('LoginPage: userName and isAdmin saved to localStorage.');\r\n                // --- ЗБЕРІГАННЯ В localStorage ---\r\n\r\n                // Оновлюємо стан контексту - сигналізує про успішний логін та наявність пристрою\r\n                updateUserStateAfterLogin(userDataFromLogin); // Передаємо дані користувача\r\n\r\n                // Перенаправляємо на домашню сторінку ПІСЛЯ оновлення стану. Використовуємо navigate з react-router-dom.\r\n                navigate('/', { replace: true });\r\n\r\n            } else {\r\n                console.log('LoginPage: Device check success. User has NO devices.');\r\n                // Користувач автентифікований API логіну, але не має пристрою.\r\n                // Запускаємо процес виходу, який очистить стан/localStorage та викличе перенаправлення через компонент App.\r\n                logoutUser(); // Це викличе локальне очищення та спрацює ефект навігації в App\r\n                alert('Будь ласка, придбайте спочатку пристрій.'); // Показуємо повідомлення\r\n                // Немає потреби в явному navigate тут; logoutUser + ефект App справляться з цим.\r\n            }\r\n        } catch (err) {\r\n            console.error('LoginPage: Error during device check after login:', err.response?.data || err.message);\r\n            // Якщо перевірка пристроїв не вдалася з будь-якої причини (мережа, 500 тощо - НЕ 401, оскільки його обробляє перехоплювач),\r\n            // ми вважаємо це некоректним потоком логіну.\r\n            // Повідомляємо користувача про помилку та примусово запускаємо локальний вихід для забезпечення чистого стану.\r\n            const errorMessage = err.response?.data?.message || 'Помилка перевірки пристроїв';\r\n            setFormError(errorMessage); // Встановлюємо помилку для форми\r\n            alert(errorMessage); // Також повідомляємо користувача\r\n            logoutUser(); // Примусовий вихід (очищає стан/LS, запускає перенаправлення App)\r\n        } finally {\r\n            setLoginInProgress(false); // Завершуємо стан завантаження\r\n        }\r\n    }\r\n\r\n\r\n    const handleLogin = async (email, password) => {\r\n        setLoginInProgress(true);\r\n        setFormError(null); // Очищаємо попередні помилки\r\n\r\n        try {\r\n            console.log('LoginPage: Attempting password login...');\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true\r\n            });\r\n            console.log('LoginPage: Password login success. Response received.');\r\n\r\n            // Переходимо до перевірки пристроїв та завершення процесу логіну\r\n            // Передаємо дані користувача з відповіді логіну (припускаємо, що вона містить { name, is_admin })\r\n            await checkDevicesAndCompleteLogin(res.data);\r\n\r\n        } catch (err) {\r\n            console.error('LoginPage: Password login error:', err.response?.data || err.message);\r\n            const errorMessage = err.response?.data?.message || 'Помилка входу';\r\n            setFormError(errorMessage); // Встановлюємо помилку для форми\r\n            alert('Помилка входу: ' + errorMessage); // Також повідомляємо користувача\r\n            setLoginInProgress(false); // Завершуємо стан завантаження при помилці логіну\r\n        }\r\n        // Note: setLoginInProgress(false) для успіху обробляється всередині checkDevicesAndCompleteLogin\r\n    };\r\n\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true);\r\n        setFormError(null); // Очищаємо попередні помилки\r\n\r\n        try {\r\n            console.log('LoginPage: Initiating Google sign-in popup.');\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n            console.log('LoginPage: Firebase Google auth success. Token obtained.');\r\n\r\n            // Відправляємо токен на ваш бекенд для верифікації та створення сесії\r\n            console.log('LoginPage: Sending Google token to backend /auth/login/google...');\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('LoginPage: Backend Google login success. Response received.');\r\n\r\n            // Переходимо до перевірки пристроїв та завершення процесу логіну\r\n            // Передаємо дані користувача з відповіді бекенду (припускаємо, що вона містить { name, is_admin })\r\n            await checkDevicesAndCompleteLogin(res.data);\r\n\r\n        } catch (error) {\r\n            console.error('LoginPage: Google login error:', error);\r\n            const errorMessage = error.message || 'Помилка авторизації через Google';\r\n            setFormError(errorMessage); // Встановлюємо помилку для форми\r\n            alert('Помилка авторизації через Google: ' + errorMessage); // Також повідомляємо користувача\r\n            setLoginInProgress(false); // Завершуємо стан завантаження при помилці логіну\r\n        }\r\n        // Note: setLoginInProgress(false) для успіху обробляється всередині checkDevicesAndCompleteLogin\r\n    };\r\n\r\n\r\n    // Рендеримо форму логіну тільки якщо користувач null (не авторизований)\r\n    return (\r\n        <>\r\n            {formError && <div style={{ color: 'red', marginBottom: '10px', textAlign: 'center' }}>{formError}</div>}\r\n            <AuthForm\r\n                type=\"login\"\r\n                onSubmit={handleLogin}\r\n                onGoogleLogin={handleGoogleLogin}\r\n                isSubmitting={loginInProgress}\r\n            />\r\n        </>\r\n    );\r\n}"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO,CAAC,CAAC;AACrD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,GAAG,MAAM,cAAc;AAC9B,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,SAASC,IAAI,EAAEC,cAAc,QAAQ,aAAa;AAClD,SAASC,eAAe,QAAQ,eAAe;AAC/C,SAASC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtD,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACA;EACA,MAAM;IAAEY,IAAI;IAAEC,UAAU;IAAEC;EAA0B,CAAC,GAAGjB,UAAU,CAACO,WAAW,CAAC;EAE/E,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD;EACA;EACA;EACA;EACA,IAAIgB,IAAI,EAAE;IACN;IACA;IACA,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEA;EACA;EACA,MAAMO,4BAA4B,GAAG,MAAOC,iBAAiB,IAAK;IAC9DC,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;IACpE;;IAEA,IAAI;MACA;MACA,MAAMC,UAAU,GAAG,MAAMxB,GAAG,CAACyB,GAAG,CAAC,mBAAmB,CAAC;MACrD,MAAMC,aAAa,GAAGF,UAAU,CAACG,IAAI,IAAIH,UAAU,CAACG,IAAI,CAACC,MAAM,GAAG,CAAC;MAEnE,IAAIF,aAAa,EAAE;QACfJ,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;QACjE;QACAM,YAAY,CAACC,OAAO,CAAC,UAAU,EAAET,iBAAiB,CAACU,IAAI,CAAC;QACxDF,YAAY,CAACC,OAAO,CAAC,SAAS,EAAET,iBAAiB,CAACW,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;QAChFV,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;QACrE;;QAEA;QACAR,yBAAyB,CAACM,iBAAiB,CAAC,CAAC,CAAC;;QAE9C;QACAT,QAAQ,CAAC,GAAG,EAAE;UAAEqB,OAAO,EAAE;QAAK,CAAC,CAAC;MAEpC,CAAC,MAAM;QACHX,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;QACpE;QACA;QACAT,UAAU,CAAC,CAAC,CAAC,CAAC;QACdoB,KAAK,CAAC,0CAA0C,CAAC,CAAC,CAAC;QACnD;MACJ;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,cAAA,EAAAC,mBAAA;MACVhB,OAAO,CAACiB,KAAK,CAAC,mDAAmD,EAAE,EAAAH,aAAA,GAAAD,GAAG,CAACK,QAAQ,cAAAJ,aAAA,uBAAZA,aAAA,CAAcT,IAAI,KAAIQ,GAAG,CAACM,OAAO,CAAC;MACrG;MACA;MACA;MACA,MAAMC,YAAY,GAAG,EAAAL,cAAA,GAAAF,GAAG,CAACK,QAAQ,cAAAH,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcV,IAAI,cAAAW,mBAAA,uBAAlBA,mBAAA,CAAoBG,OAAO,KAAI,6BAA6B;MACjFtB,YAAY,CAACuB,YAAY,CAAC,CAAC,CAAC;MAC5BR,KAAK,CAACQ,YAAY,CAAC,CAAC,CAAC;MACrB5B,UAAU,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,SAAS;MACNG,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/B;EACJ,CAAC;EAGD,MAAM0B,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC3C5B,kBAAkB,CAAC,IAAI,CAAC;IACxBE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEpB,IAAI;MACAG,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtD,MAAMuB,GAAG,GAAG,MAAM9C,GAAG,CAAC+C,IAAI,CAAC,sBAAsB,EAAE;QAAEH,KAAK;QAAEC;MAAS,CAAC,EAAE;QACpEG,eAAe,EAAE;MACrB,CAAC,CAAC;MACF1B,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;;MAEpE;MACA;MACA,MAAMH,4BAA4B,CAAC0B,GAAG,CAACnB,IAAI,CAAC;IAEhD,CAAC,CAAC,OAAOQ,GAAG,EAAE;MAAA,IAAAc,cAAA,EAAAC,cAAA,EAAAC,mBAAA;MACV7B,OAAO,CAACiB,KAAK,CAAC,kCAAkC,EAAE,EAAAU,cAAA,GAAAd,GAAG,CAACK,QAAQ,cAAAS,cAAA,uBAAZA,cAAA,CAActB,IAAI,KAAIQ,GAAG,CAACM,OAAO,CAAC;MACpF,MAAMC,YAAY,GAAG,EAAAQ,cAAA,GAAAf,GAAG,CAACK,QAAQ,cAAAU,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcvB,IAAI,cAAAwB,mBAAA,uBAAlBA,mBAAA,CAAoBV,OAAO,KAAI,eAAe;MACnEtB,YAAY,CAACuB,YAAY,CAAC,CAAC,CAAC;MAC5BR,KAAK,CAAC,iBAAiB,GAAGQ,YAAY,CAAC,CAAC,CAAC;MACzCzB,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/B;IACA;EACJ,CAAC;EAED,MAAMmC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClCnC,kBAAkB,CAAC,IAAI,CAAC;IACxBE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEpB,IAAI;MACAG,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAC1D,MAAM8B,MAAM,GAAG,MAAMjD,eAAe,CAACF,IAAI,EAAEC,cAAc,CAAC;MAC1D,MAAMmD,KAAK,GAAG,MAAMD,MAAM,CAACxC,IAAI,CAAC0C,UAAU,CAAC,CAAC;MAC5CjC,OAAO,CAACC,GAAG,CAAC,0DAA0D,CAAC;;MAEvE;MACAD,OAAO,CAACC,GAAG,CAAC,kEAAkE,CAAC;MAC/E,MAAMuB,GAAG,GAAG,MAAM9C,GAAG,CAAC+C,IAAI,CAAC,oBAAoB,EAAE;QAAEO;MAAM,CAAC,EAAE;QAAEN,eAAe,EAAE;MAAK,CAAC,CAAC;MACtF1B,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC;;MAE1E;MACA;MACA,MAAMH,4BAA4B,CAAC0B,GAAG,CAACnB,IAAI,CAAC;IAEhD,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZjB,OAAO,CAACiB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMG,YAAY,GAAGH,KAAK,CAACE,OAAO,IAAI,kCAAkC;MACxEtB,YAAY,CAACuB,YAAY,CAAC,CAAC,CAAC;MAC5BR,KAAK,CAAC,oCAAoC,GAAGQ,YAAY,CAAC,CAAC,CAAC;MAC5DzB,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/B;IACA;EACJ,CAAC;;EAGD;EACA,oBACIV,OAAA,CAAAE,SAAA;IAAA+C,QAAA,GACKtC,SAAS,iBAAIX,OAAA;MAAKkD,KAAK,EAAE;QAAEC,KAAK,EAAE,KAAK;QAAEC,YAAY,EAAE,MAAM;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAJ,QAAA,EAAEtC;IAAS;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxGzD,OAAA,CAACR,QAAQ;MACLkE,IAAI,EAAC,OAAO;MACZC,QAAQ,EAAEvB,WAAY;MACtBwB,aAAa,EAAEf,iBAAkB;MACjCgB,YAAY,EAAEpD;IAAgB;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAAA,eACJ,CAAC;AAEX;AAACrD,EAAA,CAvIuBD,SAAS;EAAA,QACZT,WAAW;AAAA;AAAAoE,EAAA,GADR3D,SAAS;AAAA,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}