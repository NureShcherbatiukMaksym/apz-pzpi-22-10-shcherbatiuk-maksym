{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\utils\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\n// components/ProtectedRoute.js\nimport React, { useContext } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  // Отримуємо user, isAdmin, hasDevice та стани завантаження\n  // *** Додано isAdmin ***\n  const {\n    user,\n    isAdmin,\n    hasDevice,\n    loadingInitial,\n    loadingDevice\n  } = useContext(UserContext);\n  const location = useLocation();\n\n  // Показуємо завантаження, якщо йде початкова перевірка або перевірка пристрою\n  if (loadingInitial || loadingDevice) {\n    // Можна повернути спінер або інший індикатор завантаження\n    console.log('ProtectedRoute: Loading user or device status...');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0441\\u0442\\u0430\\u0442\\u0443\\u0441\\u0443 \\u043A\\u043E\\u0440\\u0438\\u0441\\u0442\\u0443\\u0432\\u0430\\u0447\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this);\n  }\n  if (!user) {\n    console.log('ProtectedRoute: Access denied (user is null). Redirecting to /login.');\n    // Перенаправляємо на логін. Зберігаємо поточний шлях, щоб повернутись після логіну.\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location.pathname\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }\n\n  // --- Користувач автентифікований (user не null) звідси ---\n\n  // Тепер додаємо виняток для адміна:\n  if (!isAdmin || !hasDevice) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/buy-device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Якщо користувач автентифікований І\n  // - Він адміністратор ( isAdmin === true, тоді умова !isAdmin && !hasDevice не виконається) АБО\n  // - Він не адміністратор, але має пристрій ( !isAdmin && hasDevice === true )\n  // ТО дозволяємо доступ - рендеримо захищений контент\n  console.log('ProtectedRoute: Access granted.');\n  return children;\n};\n_s(ProtectedRoute, \"5+LInFo1cQZveVpqdkJ7nlBC+IU=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","Navigate","useLocation","UserContext","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","user","isAdmin","hasDevice","loadingInitial","loadingDevice","location","console","log","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","pathname","replace","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/utils/PrivateRoute.js"],"sourcesContent":["// components/ProtectedRoute.js\r\nimport React, { useContext } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n    // Отримуємо user, isAdmin, hasDevice та стани завантаження\r\n    // *** Додано isAdmin ***\r\n    const { user, isAdmin, hasDevice, loadingInitial, loadingDevice } = useContext(UserContext);\r\n    const location = useLocation();\r\n\r\n    // Показуємо завантаження, якщо йде початкова перевірка або перевірка пристрою\r\n    if (loadingInitial || loadingDevice) {\r\n        // Можна повернути спінер або інший індикатор завантаження\r\n        console.log('ProtectedRoute: Loading user or device status...');\r\n        return <div>Завантаження статусу користувача...</div>;\r\n    }\r\n\r\n    if (!user) {\r\n        console.log('ProtectedRoute: Access denied (user is null). Redirecting to /login.');\r\n        // Перенаправляємо на логін. Зберігаємо поточний шлях, щоб повернутись після логіну.\r\n        return <Navigate to=\"/login\" state={{ from: location.pathname }} replace />;\r\n    }\r\n\r\n    // --- Користувач автентифікований (user не null) звідси ---\r\n\r\n    // Тепер додаємо виняток для адміна:\r\n    if (!isAdmin || !hasDevice) {\r\n        return <Navigate to=\"/buy-device\" />;\r\n    }\r\n\r\n    // Якщо користувач автентифікований І\r\n    // - Він адміністратор ( isAdmin === true, тоді умова !isAdmin && !hasDevice не виконається) АБО\r\n    // - Він не адміністратор, але має пристрій ( !isAdmin && hasDevice === true )\r\n    // ТО дозволяємо доступ - рендеримо захищений контент\r\n    console.log('ProtectedRoute: Access granted.');\r\n    return children;\r\n};\r\n\r\nexport default ProtectedRoute;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC;EACA;EACA,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,SAAS;IAAEC,cAAc;IAAEC;EAAc,CAAC,GAAGb,UAAU,CAACG,WAAW,CAAC;EAC3F,MAAMW,QAAQ,GAAGZ,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAIU,cAAc,IAAIC,aAAa,EAAE;IACjC;IACAE,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;IAC/D,oBAAOX,OAAA;MAAAE,QAAA,EAAK;IAAmC;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACzD;EAEA,IAAI,CAACX,IAAI,EAAE;IACPM,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC;IACnF;IACA,oBAAOX,OAAA,CAACJ,QAAQ;MAACoB,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAET,QAAQ,CAACU;MAAS,CAAE;MAACC,OAAO;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC/E;;EAEA;;EAEA;EACA,IAAI,CAACV,OAAO,IAAI,CAACC,SAAS,EAAE;IACxB,oBAAON,OAAA,CAACJ,QAAQ;MAACoB,EAAE,EAAC;IAAa;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACxC;;EAEA;EACA;EACA;EACA;EACAL,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAC9C,OAAOT,QAAQ;AACnB,CAAC;AAACC,EAAA,CAhCIF,cAAc;EAAA,QAICJ,WAAW;AAAA;AAAAwB,EAAA,GAJ1BpB,cAAc;AAkCpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}