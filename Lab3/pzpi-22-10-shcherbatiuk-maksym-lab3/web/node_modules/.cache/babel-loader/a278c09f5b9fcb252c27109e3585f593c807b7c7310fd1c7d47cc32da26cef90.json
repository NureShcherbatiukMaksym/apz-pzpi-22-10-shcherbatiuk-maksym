{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$();\n// contexts/UserContext.js\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [hasDevice, setHasDevice] = useState(false); // Цей стан тепер буде заповнюватися з одного запиту\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Виносимо логіку завантаження користувача в окрему функцію\n  // Тепер вона робить ЛИШЕ ОДИН запит до /users/me\n  const fetchUser = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Робимо ОДИН запит до бекенду, який тепер має повертати ВСІ потрібні дані\n      // (дані користувача, is_admin, has_device)\n      const res = await api.get('/users/me');\n      if (res.data) {\n        setUser(res.data);\n        setIsAdmin(res.data.is_admin || false);\n\n        // !!! ПЕРЕДБАЧАЄМО: Бекенд тепер повертає поле `has_device` у відповіді /users/me !!!\n        // Якщо поле називається інакше, або повертається масив пристроїв, адаптуйте логіку тут.\n        // Наприклад, якщо повертається поле `devices`: setHasDevice(res.data.devices && res.data.devices.length > 0);\n        setHasDevice(res.data.has_device || false); // <--- Читаємо статус пристрою з відповіді /users/me\n\n        console.log('User data fetched successfully (single request).', res.data);\n      } else {\n        // Якщо /users/me повернув 200 OK, але без даних (малоймовірно для /me)\n        setUser(null);\n        setIsAdmin(false);\n        setHasDevice(false);\n        console.log('No user data returned from /users/me (status 200).');\n      }\n    } catch (err) {\n      var _err$response;\n      // Обробка помилки, включаючи 401 (не авторизований)\n      console.error('Failed to fetch user data:', err);\n      // Якщо помилка 401, Axios Interceptor нижче також може це обробити,\n      // але ця catch гілка все одно корисна для інших типів помилок або як запасний варіант.\n      if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401) {\n        console.log('User is not authorized (401 error).');\n        // Interceptor має спрацювати і перенаправити, але очистити стан тут безпечно.\n        // Можливо, Interceptor буде викликати logoutUser()\n      } else {\n        // Обробка інших помилок запиту\n        setError(err); // Можна зберегти іншу помилку\n      }\n      setUser(null); // Встановлюємо користувача в null при будь-якій помилці запиту /users/me\n      setIsAdmin(false);\n      setHasDevice(false);\n    } finally {\n      setLoading(false);\n    }\n  }, []); // Залежності порожні, функція стабільна завдяки useCallback\n\n  // useEffect для ПЕРШОГО завантаження при монтуванні провайдера\n  useEffect(() => {\n    fetchUser();\n  }, [fetchUser]); // Залежність від fetchUser\n\n  // Функція для виходу з системи\n  const logoutUser = useCallback(async () => {\n    try {\n      // Викликаємо API для виходу на бекенді\n      await api.post('/auth/logout'); // Замініть на ваш реальний шлях виходу\n    } catch (err) {\n      console.error('Failed to log out on backend:', err);\n      // Продовжуємо очищати стан на фронтенді, навіть якщо API виходу не спрацювало\n    } finally {\n      // Очищаємо стан користувача на фронтенді\n      setUser(null);\n      setIsAdmin(false);\n      setHasDevice(false);\n      setError(null); // Скидаємо помилку\n      setLoading(false); // Вважаємо, що \"вихід\" - це кінцевий стан, не \"завантаження\"\n      console.log('User state cleared on frontend (logged out).');\n      // !!! Можливо, тут також потрібно перенаправити на /login !!!\n      // Це можна зробити тут або в компоненті, який викликав logoutUser,\n      // або за допомогою Axios Interceptor, якщо він викликає цю функцію.\n    }\n  }, []);\n\n  // Значення контексту\n  const contextValue = {\n    user,\n    isAdmin,\n    hasDevice,\n    loading,\n    error,\n    fetchUser,\n    // Залишаємо можливість оновити вручну (після логіну/реєстрації)\n    logoutUser // Надаємо функцію виходу\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProvider, \"lov1wDkmLNt0jWTiqqseKafZiWs=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","api","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","isAdmin","setIsAdmin","hasDevice","setHasDevice","loading","setLoading","error","setError","fetchUser","res","get","data","is_admin","has_device","console","log","err","_err$response","response","status","logoutUser","post","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/contexts/UserContext.js"],"sourcesContent":["// contexts/UserContext.js\r\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\r\nimport api from '../utils/api';\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n    const [hasDevice, setHasDevice] = useState(false); // Цей стан тепер буде заповнюватися з одного запиту\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Виносимо логіку завантаження користувача в окрему функцію\r\n    // Тепер вона робить ЛИШЕ ОДИН запит до /users/me\r\n    const fetchUser = useCallback(async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            // Робимо ОДИН запит до бекенду, який тепер має повертати ВСІ потрібні дані\r\n            // (дані користувача, is_admin, has_device)\r\n            const res = await api.get('/users/me');\r\n\r\n            if (res.data) {\r\n                setUser(res.data);\r\n                setIsAdmin(res.data.is_admin || false);\r\n\r\n                // !!! ПЕРЕДБАЧАЄМО: Бекенд тепер повертає поле `has_device` у відповіді /users/me !!!\r\n                // Якщо поле називається інакше, або повертається масив пристроїв, адаптуйте логіку тут.\r\n                // Наприклад, якщо повертається поле `devices`: setHasDevice(res.data.devices && res.data.devices.length > 0);\r\n                setHasDevice(res.data.has_device || false); // <--- Читаємо статус пристрою з відповіді /users/me\r\n\r\n                console.log('User data fetched successfully (single request).', res.data);\r\n\r\n            } else {\r\n                // Якщо /users/me повернув 200 OK, але без даних (малоймовірно для /me)\r\n                setUser(null);\r\n                setIsAdmin(false);\r\n                setHasDevice(false);\r\n                console.log('No user data returned from /users/me (status 200).');\r\n            }\r\n        } catch (err) {\r\n            // Обробка помилки, включаючи 401 (не авторизований)\r\n            console.error('Failed to fetch user data:', err);\r\n            // Якщо помилка 401, Axios Interceptor нижче також може це обробити,\r\n            // але ця catch гілка все одно корисна для інших типів помилок або як запасний варіант.\r\n            if (err.response?.status === 401) {\r\n                console.log('User is not authorized (401 error).');\r\n                // Interceptor має спрацювати і перенаправити, але очистити стан тут безпечно.\r\n                // Можливо, Interceptor буде викликати logoutUser()\r\n            } else {\r\n                // Обробка інших помилок запиту\r\n                setError(err); // Можна зберегти іншу помилку\r\n            }\r\n            setUser(null); // Встановлюємо користувача в null при будь-якій помилці запиту /users/me\r\n            setIsAdmin(false);\r\n            setHasDevice(false);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []); // Залежності порожні, функція стабільна завдяки useCallback\r\n\r\n    // useEffect для ПЕРШОГО завантаження при монтуванні провайдера\r\n    useEffect(() => {\r\n        fetchUser();\r\n    }, [fetchUser]); // Залежність від fetchUser\r\n\r\n    // Функція для виходу з системи\r\n    const logoutUser = useCallback(async () => {\r\n        try {\r\n            // Викликаємо API для виходу на бекенді\r\n            await api.post('/auth/logout'); // Замініть на ваш реальний шлях виходу\r\n\r\n        } catch (err) {\r\n            console.error('Failed to log out on backend:', err);\r\n            // Продовжуємо очищати стан на фронтенді, навіть якщо API виходу не спрацювало\r\n        } finally {\r\n            // Очищаємо стан користувача на фронтенді\r\n            setUser(null);\r\n            setIsAdmin(false);\r\n            setHasDevice(false);\r\n            setError(null); // Скидаємо помилку\r\n            setLoading(false); // Вважаємо, що \"вихід\" - це кінцевий стан, не \"завантаження\"\r\n            console.log('User state cleared on frontend (logged out).');\r\n            // !!! Можливо, тут також потрібно перенаправити на /login !!!\r\n            // Це можна зробити тут або в компоненті, який викликав logoutUser,\r\n            // або за допомогою Axios Interceptor, якщо він викликає цю функцію.\r\n        }\r\n    }, []);\r\n\r\n\r\n    // Значення контексту\r\n    const contextValue = {\r\n        user,\r\n        isAdmin,\r\n        hasDevice,\r\n        loading,\r\n        error,\r\n        fetchUser, // Залишаємо можливість оновити вручну (після логіну/реєстрації)\r\n        logoutUser // Надаємо функцію виходу\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={contextValue}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}