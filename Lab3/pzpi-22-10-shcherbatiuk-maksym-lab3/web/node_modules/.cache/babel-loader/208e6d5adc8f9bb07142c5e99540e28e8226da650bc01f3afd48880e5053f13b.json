{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\AnalyticsField.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react'; // Додано useCallback\nimport { useParams } from \"react-router-dom\";\nimport { Line as LineChart, Svg } from 'chartist';\nimport 'chartist/dist/chartist.css';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalyticsField = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // ID поточного вибраного поля з URL\n\n  const [timeRange, setTimeRange] = useState('7d');\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const chartContainerRef = useRef(null);\n  const chartInstanceRef = useRef(null); // Для збереження інстансу графіка\n\n  // --- API Функції ---\n  // Використовуємо useCallback, щоб функції не створювались заново при кожному рендері,\n  // якщо їхні залежності не змінились (хоча тут залежностей немає, це хороша практика)\n  // API Функція для вибору поля\n  const selectField = useCallback(async fieldId => {\n    if (!fieldId) {\n      console.warn('[AnalyticsField:selectField] Спроба вибору поля без ID.');\n      return;\n    }\n    try {\n      console.log(`[AnalyticsField:selectField] Відправка запиту на select поля ID: ${fieldId}.`);\n      await api.get(`/fields/select/${fieldId}`); // Замінили на .get\n      console.log(`[AnalyticsField:selectField] Поле ID ${fieldId} успішно вибрано.`);\n    } catch (err) {\n      console.error(`[AnalyticsField:selectField] Помилка при виборі поля ID ${fieldId}:`, err);\n      throw new Error(`Не вдалося вибрати поле ID ${fieldId}.`);\n    }\n  }, []);\n\n  // API Функція для деселекту поля\n  const deselectField = useCallback(async fieldId => {\n    if (!fieldId) {\n      console.warn('[AnalyticsField:deselectField] Спроба деселекту поля без ID.');\n      return;\n    }\n    try {\n      console.log(`[AnalyticsField:deselectField] Відправка запиту на deselect поля ID: ${fieldId}.`);\n      await api.get(`/fields/deselect/${fieldId}`); // Замінили на .get\n      console.log(`[AnalyticsField:deselectField:SUCCESS] Поле ID ${fieldId} успішно деселектнуто.`);\n    } catch (err) {\n      console.error(`[AnalyticsField:deselectField:ERROR] Не вдалося деселектнути поле ID ${fieldId}:`, err);\n    }\n  }, []);\n\n  // --- Effect для Завантаження Даних та Вибору/Деселекту Поля ---\n  useEffect(() => {\n    // Якщо немає ID в URL, просто скидаємо стан\n    if (!id) {\n      console.log('[AnalyticsField:useEffect:data] Немає ID в URL, очищення стану.');\n      setChartData(null);\n      setError(null);\n      setIsLoading(false);\n      // Якщо був якийсь попередній ID, його треба деселектнути\n      // (хоча логіка залежностей useEffect має це обробити)\n      return;\n    }\n\n    // Створюємо асинхронну функцію всередині useEffect\n    const fetchDataForSelectedField = async () => {\n      setIsLoading(true);\n      setError(null);\n      setChartData(null); // Очищаємо старі дані перед новим запитом\n\n      try {\n        var _response$data;\n        // Крок 1: Вибрати поле. Чекаємо на завершення.\n        await selectField(id);\n\n        // Крок 2: Запитати дані для вибраного поля (яке тепер активне на бекенді)\n        const apiUrl = `/field-measurements/chart/${timeRange}`;\n        console.log(`[AnalyticsField:useEffect:data] Запит даних графіка з: ${apiUrl} (після вибору поля ${id})`);\n        const response = await api.get(apiUrl);\n\n        // Крок 3: Обробка відповіді\n        console.log('[AnalyticsField:useEffect:data] Отримано сирі дані:', response.data);\n        const rawData = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.aggregatedData; // Безпечний доступ\n\n        // Перевірка, чи дані є масивом\n        if (!Array.isArray(rawData)) {\n          throw new Error('Некоректний формат відповіді від сервера або дані відсутні.');\n        }\n        console.log('[AnalyticsField:useEffect:data] Обробка масиву aggregatedData:', rawData);\n\n        // --- Логіка Трансформації Даних (залишається без змін) ---\n        const uniqueTimestampsSet = new Set();\n        rawData.forEach(sensor => {\n          if (sensor && Array.isArray(sensor.data)) {\n            sensor.data.forEach(entry => {\n              if (entry && entry.timestamp) {\n                uniqueTimestampsSet.add(entry.timestamp);\n              }\n            });\n          }\n        });\n        // Сортуємо мітки часу\n        const labels = Array.from(uniqueTimestampsSet).sort((a, b) => new Date(a) - new Date(b));\n        console.log('[AnalyticsField:useEffect:data] Згенеровані мітки (labels):', labels);\n        const series = rawData.map(sensor => {\n          const timestampToValueMap = new Map();\n          if (sensor && Array.isArray(sensor.data)) {\n            sensor.data.forEach(entry => {\n              // Перевіряємо, що значення не undefined і не null (Chartist погано обробляє undefined)\n              if (entry && entry.timestamp && entry.value !== undefined && entry.value !== null) {\n                timestampToValueMap.set(entry.timestamp, entry.value);\n              }\n            });\n          }\n          // Для кожної мітки часу шукаємо значення, якщо немає - ставимо null\n          const seriesData = labels.map(timestamp => {\n            var _timestampToValueMap$;\n            return (_timestampToValueMap$ = timestampToValueMap.get(timestamp)) !== null && _timestampToValueMap$ !== void 0 ? _timestampToValueMap$ : null;\n          });\n          return {\n            // Використовуємо назву сенсора або ID, якщо назви немає\n            name: sensor.sensorType || `Sensor ${sensor.sensorId || 'Unknown'}`,\n            data: seriesData\n          };\n        });\n        // Chartist очікує лише масив масивів значень\n        const chartistSeriesData = series.map(s => s.data);\n        console.log('[AnalyticsField:useEffect:data] Згенеровані серії (з іменами):', series);\n        console.log('[AnalyticsField:useEffect:data] Дані серій для Chartist:', chartistSeriesData);\n        // --- Кінець Трансформації Даних ---\n\n        // Перевіряємо, чи є хоч якісь дані для відображення\n        const hasDataPoints = chartistSeriesData.some(seriesData => Array.isArray(seriesData) && seriesData.some(point => point !== null));\n        if (labels.length === 0 || !hasDataPoints) {\n          console.log('[AnalyticsField:useEffect:data] Трансформовані дані порожні або містять тільки null.');\n          setChartData(null); // Встановлюємо null, щоб показати повідомлення \"Немає даних\"\n        } else {\n          setChartData({\n            labels,\n            series: chartistSeriesData\n          });\n        }\n        setError(null); // Скидаємо помилку при успішному завантаженні\n      } catch (err) {\n        // Обробка будь-яких помилок (з selectField або api.get)\n        console.error('[AnalyticsField:useEffect:data] Помилка під час вибору поля або завантаження даних:', err);\n        setError(err.message || 'Не вдалося завантажити дані графіка.'); // Використовуємо повідомлення з помилки, якщо є\n        setChartData(null); // Скидаємо дані при помилці\n      } finally {\n        // Завжди вимикаємо індикатор завантаження\n        setIsLoading(false);\n      }\n    };\n\n    // Викликаємо асинхронну функцію\n    fetchDataForSelectedField();\n\n    // --- Функція Очищення (Cleanup) ---\n    // Ця функція викликається, коли компонент розмонтовується АБО коли змінюється id чи timeRange (перед наступним запуском effect)\n    const fieldIdToDeselect = id; // Зберігаємо ID, який був активним під час цього запуску effect\n    return () => {\n      console.log(`[AnalyticsField:useEffect:data] Запуск очищення для ID: ${fieldIdToDeselect}`);\n      if (fieldIdToDeselect) {\n        // Викликаємо deselect для поля, яке було активним\n        deselectField(fieldIdToDeselect);\n      }\n      // Також можна зупинити будь-які активні запити, якщо використовується бібліотека типу Axios з AbortController\n      // console.log('[AnalyticsField:useEffect:data] Ефект очищено.');\n    };\n  }, [id, timeRange, selectField, deselectField]); // Додаємо selectField та deselectField до залежностей, оскільки вони тепер useCallback\n\n  useEffect(() => {\n    const fetchDataForSelectedField = async () => {\n      setIsLoading(true);\n      setError(null);\n      setChartData(null); // Reset previous data\n\n      try {\n        var _response$data2;\n        await selectField(id);\n        const apiUrl = `/field-measurements/chart/${timeRange}`;\n        const response = await api.get(apiUrl);\n        const rawData = (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.aggregatedData;\n        if (!Array.isArray(rawData)) {\n          throw new Error('Invalid data format.');\n        }\n        const uniqueTimestampsSet = new Set();\n        rawData.forEach(sensor => {\n          if (sensor && Array.isArray(sensor.data)) {\n            sensor.data.forEach(entry => {\n              if (entry && entry.timestamp) {\n                uniqueTimestampsSet.add(entry.timestamp);\n              }\n            });\n          }\n        });\n        const labels = Array.from(uniqueTimestampsSet).sort((a, b) => new Date(a) - new Date(b));\n        const series = rawData.map(sensor => {\n          const timestampToValueMap = new Map();\n          if (sensor && Array.isArray(sensor.data)) {\n            sensor.data.forEach(entry => {\n              if (entry && entry.timestamp && entry.value !== undefined && entry.value !== null) {\n                timestampToValueMap.set(entry.timestamp, entry.value);\n              }\n            });\n          }\n          const seriesData = labels.map(timestamp => {\n            var _timestampToValueMap$2;\n            return (_timestampToValueMap$2 = timestampToValueMap.get(timestamp)) !== null && _timestampToValueMap$2 !== void 0 ? _timestampToValueMap$2 : null;\n          });\n          return {\n            name: sensor.sensorType || `Sensor ${sensor.sensorId || 'Unknown'}`,\n            data: seriesData\n          };\n        });\n        const chartistSeriesData = series.map(s => s.data);\n        const hasDataPoints = chartistSeriesData.some(seriesData => Array.isArray(seriesData) && seriesData.some(point => point !== null));\n        if (labels.length === 0 || !hasDataPoints) {\n          setChartData(null);\n        } else {\n          setChartData({\n            labels,\n            series: chartistSeriesData\n          });\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message || 'Failed to load chart data.');\n        setChartData(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchDataForSelectedField();\n    const fieldIdToDeselect = id;\n    return () => {\n      if (fieldIdToDeselect) {\n        deselectField(fieldIdToDeselect);\n      }\n    };\n  }, [id, timeRange, selectField, deselectField]);\n\n  // --- Обробник Зміни Діапазону Часу ---\n  const handleTimeRangeChange = range => {\n    // Не оновлюємо, якщо вибрано той самий діапазон або йде завантаження\n    if (range !== timeRange && !isLoading) {\n      setTimeRange(range);\n    }\n  };\n  console.log(`[AnalyticsField] Рендер компонента. ID: ${id}, isLoading: ${isLoading}, error: ${error}, chartData: ${chartData ? 'є' : 'немає/порожньо'}`);\n\n  // --- JSX Рендеринг ---\n  return (\n    /*#__PURE__*/\n    // Використовуємо `h-full` або `min-h-screen` для батьківських контейнерів, якщо потрібно розтягнути контент\n    _jsxDEV(\"div\", {\n      id: \"main-content\",\n      className: \"w-full flex-1 bg-gray-100 p-6\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-7xl mx-auto\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white shadow rounded-lg p-4 md:p-6\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between items-center border-b border-gray-200 pb-3 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"text-xl font-bold text-gray-900\",\n              children: [\"\\u0410\\u043D\\u0430\\u043B\\u0456\\u0442\\u0438\\u043A\\u0430 \\u0432\\u0438\\u043C\\u0456\\u0440\\u044E\\u0432\\u0430\\u043D\\u044C \", id ? `для поля ID: ${id}` : '(Поле не вибрано)']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex space-x-2\",\n              children: ['7d', '6m', '1y'].map(range => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleTimeRangeChange(range),\n                disabled: isLoading // Блокуємо кнопки під час завантаження\n                ,\n                className: `px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ease-in-out ${timeRange === range ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}` // Стилі для блокування\n                ,\n                children: [range === '7d' && '7 днів', range === '6m' && '6 міс', range === '1y' && '1 рік']\n              }, range, true, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative min-h-[350px]\",\n            children: [\" \", !id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute inset-0 flex items-center justify-center\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-gray-500 text-lg\",\n                children: \"\\u0411\\u0443\\u0434\\u044C \\u043B\\u0430\\u0441\\u043A\\u0430, \\u043E\\u0431\\u0435\\u0440\\u0456\\u0442\\u044C \\u043F\\u043E\\u043B\\u0435 \\u0437\\u0456 \\u0441\\u043F\\u0438\\u0441\\u043A\\u0443.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 29\n            }, this), id && isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute inset-0 flex items-center justify-center bg-white bg-opacity-75 z-10\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-gray-600 text-lg animate-pulse\",\n                children: \"\\u0417\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0434\\u0430\\u043D\\u0438\\u0445...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 29\n            }, this), id && error && !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute inset-0 flex items-center justify-center\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-red-600 text-lg px-4 py-2 bg-red-100 rounded border border-red-300\",\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 29\n            }, this), id && !isLoading && !error && !chartData &&\n            /*#__PURE__*/\n            // Показуємо, якщо не завантаження, немає помилки і chartData = null\n            _jsxDEV(\"div\", {\n              className: \"absolute inset-0 flex items-center justify-center\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-gray-500 text-lg\",\n                children: \"\\u0414\\u0430\\u043D\\u0456 \\u0434\\u043B\\u044F \\u043E\\u0431\\u0440\\u0430\\u043D\\u043E\\u0433\\u043E \\u043F\\u043E\\u043B\\u044F \\u0437\\u0430 \\u0446\\u0435\\u0439 \\u043F\\u0435\\u0440\\u0456\\u043E\\u0434 \\u0432\\u0456\\u0434\\u0441\\u0443\\u0442\\u043D\\u0456.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `ct-chart ct-golden-section ${!id || isLoading || error || !chartData ? 'opacity-0' : 'opacity-100'} transition-opacity duration-300` // Ховаємо контейнер, якщо немає що показувати\n              ,\n              ref: chartContainerRef,\n              style: {\n                minHeight: '350px'\n              } // Забезпечуємо мінімальну висоту\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(AnalyticsField, \"AF2RZyH/ANrjtoxSPckbsjXLXE4=\", false, function () {\n  return [useParams];\n});\n_c = AnalyticsField;\nexport default AnalyticsField;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsField\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useParams","Line","LineChart","Svg","api","jsxDEV","_jsxDEV","AnalyticsField","_s","id","timeRange","setTimeRange","chartData","setChartData","isLoading","setIsLoading","error","setError","chartContainerRef","chartInstanceRef","selectField","fieldId","console","warn","log","get","err","Error","deselectField","fetchDataForSelectedField","_response$data","apiUrl","response","data","rawData","aggregatedData","Array","isArray","uniqueTimestampsSet","Set","forEach","sensor","entry","timestamp","add","labels","from","sort","a","b","Date","series","map","timestampToValueMap","Map","value","undefined","set","seriesData","_timestampToValueMap$","name","sensorType","sensorId","chartistSeriesData","s","hasDataPoints","some","point","length","message","fieldIdToDeselect","_response$data2","_timestampToValueMap$2","handleTimeRangeChange","range","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ref","style","minHeight","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/AnalyticsField.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react'; // Додано useCallback\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Line as LineChart, Svg } from 'chartist';\r\nimport 'chartist/dist/chartist.css';\r\nimport api from '../utils/api';\r\n\r\nconst AnalyticsField = () => {\r\n    const { id } = useParams(); // ID поточного вибраного поля з URL\r\n\r\n    const [timeRange, setTimeRange] = useState('7d');\r\n    const [chartData, setChartData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const chartContainerRef = useRef(null);\r\n    const chartInstanceRef = useRef(null); // Для збереження інстансу графіка\r\n\r\n    // --- API Функції ---\r\n    // Використовуємо useCallback, щоб функції не створювались заново при кожному рендері,\r\n    // якщо їхні залежності не змінились (хоча тут залежностей немає, це хороша практика)\r\n    // API Функція для вибору поля\r\n    const selectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) {\r\n            console.warn('[AnalyticsField:selectField] Спроба вибору поля без ID.');\r\n            return;\r\n        }\r\n        try {\r\n            console.log(`[AnalyticsField:selectField] Відправка запиту на select поля ID: ${fieldId}.`);\r\n            await api.get(`/fields/select/${fieldId}`); // Замінили на .get\r\n            console.log(`[AnalyticsField:selectField] Поле ID ${fieldId} успішно вибрано.`);\r\n        } catch (err) {\r\n            console.error(`[AnalyticsField:selectField] Помилка при виборі поля ID ${fieldId}:`, err);\r\n            throw new Error(`Не вдалося вибрати поле ID ${fieldId}.`);\r\n        }\r\n    }, []);\r\n\r\n// API Функція для деселекту поля\r\n    const deselectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) {\r\n            console.warn('[AnalyticsField:deselectField] Спроба деселекту поля без ID.');\r\n            return;\r\n        }\r\n        try {\r\n            console.log(`[AnalyticsField:deselectField] Відправка запиту на deselect поля ID: ${fieldId}.`);\r\n            await api.get(`/fields/deselect/${fieldId}`); // Замінили на .get\r\n            console.log(`[AnalyticsField:deselectField:SUCCESS] Поле ID ${fieldId} успішно деселектнуто.`);\r\n        } catch (err) {\r\n            console.error(`[AnalyticsField:deselectField:ERROR] Не вдалося деселектнути поле ID ${fieldId}:`, err);\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n    // --- Effect для Завантаження Даних та Вибору/Деселекту Поля ---\r\n    useEffect(() => {\r\n        // Якщо немає ID в URL, просто скидаємо стан\r\n        if (!id) {\r\n            console.log('[AnalyticsField:useEffect:data] Немає ID в URL, очищення стану.');\r\n            setChartData(null);\r\n            setError(null);\r\n            setIsLoading(false);\r\n            // Якщо був якийсь попередній ID, його треба деселектнути\r\n            // (хоча логіка залежностей useEffect має це обробити)\r\n            return;\r\n        }\r\n\r\n        // Створюємо асинхронну функцію всередині useEffect\r\n        const fetchDataForSelectedField = async () => {\r\n            setIsLoading(true);\r\n            setError(null);\r\n            setChartData(null); // Очищаємо старі дані перед новим запитом\r\n\r\n            try {\r\n                // Крок 1: Вибрати поле. Чекаємо на завершення.\r\n                await selectField(id);\r\n\r\n                // Крок 2: Запитати дані для вибраного поля (яке тепер активне на бекенді)\r\n                const apiUrl = `/field-measurements/chart/${timeRange}`;\r\n                console.log(`[AnalyticsField:useEffect:data] Запит даних графіка з: ${apiUrl} (після вибору поля ${id})`);\r\n                const response = await api.get(apiUrl);\r\n\r\n                // Крок 3: Обробка відповіді\r\n                console.log('[AnalyticsField:useEffect:data] Отримано сирі дані:', response.data);\r\n                const rawData = response.data?.aggregatedData; // Безпечний доступ\r\n\r\n                // Перевірка, чи дані є масивом\r\n                if (!Array.isArray(rawData)) {\r\n                    throw new Error('Некоректний формат відповіді від сервера або дані відсутні.');\r\n                }\r\n                console.log('[AnalyticsField:useEffect:data] Обробка масиву aggregatedData:', rawData);\r\n\r\n                // --- Логіка Трансформації Даних (залишається без змін) ---\r\n                const uniqueTimestampsSet = new Set();\r\n                rawData.forEach(sensor => {\r\n                    if (sensor && Array.isArray(sensor.data)) {\r\n                        sensor.data.forEach(entry => {\r\n                            if (entry && entry.timestamp) {\r\n                                uniqueTimestampsSet.add(entry.timestamp);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                // Сортуємо мітки часу\r\n                const labels = Array.from(uniqueTimestampsSet).sort((a, b) => new Date(a) - new Date(b));\r\n                console.log('[AnalyticsField:useEffect:data] Згенеровані мітки (labels):', labels);\r\n\r\n                const series = rawData.map(sensor => {\r\n                    const timestampToValueMap = new Map();\r\n                    if (sensor && Array.isArray(sensor.data)) {\r\n                        sensor.data.forEach(entry => {\r\n                            // Перевіряємо, що значення не undefined і не null (Chartist погано обробляє undefined)\r\n                            if (entry && entry.timestamp && entry.value !== undefined && entry.value !== null) {\r\n                                timestampToValueMap.set(entry.timestamp, entry.value);\r\n                            }\r\n                        });\r\n                    }\r\n                    // Для кожної мітки часу шукаємо значення, якщо немає - ставимо null\r\n                    const seriesData = labels.map(timestamp => timestampToValueMap.get(timestamp) ?? null);\r\n                    return {\r\n                        // Використовуємо назву сенсора або ID, якщо назви немає\r\n                        name: sensor.sensorType || `Sensor ${sensor.sensorId || 'Unknown'}`,\r\n                        data: seriesData\r\n                    };\r\n                });\r\n                // Chartist очікує лише масив масивів значень\r\n                const chartistSeriesData = series.map(s => s.data);\r\n                console.log('[AnalyticsField:useEffect:data] Згенеровані серії (з іменами):', series);\r\n                console.log('[AnalyticsField:useEffect:data] Дані серій для Chartist:', chartistSeriesData);\r\n                // --- Кінець Трансформації Даних ---\r\n\r\n                // Перевіряємо, чи є хоч якісь дані для відображення\r\n                const hasDataPoints = chartistSeriesData.some(seriesData =>\r\n                    Array.isArray(seriesData) && seriesData.some(point => point !== null)\r\n                );\r\n\r\n                if (labels.length === 0 || !hasDataPoints) {\r\n                    console.log('[AnalyticsField:useEffect:data] Трансформовані дані порожні або містять тільки null.');\r\n                    setChartData(null); // Встановлюємо null, щоб показати повідомлення \"Немає даних\"\r\n                } else {\r\n                    setChartData({ labels, series: chartistSeriesData });\r\n                }\r\n                setError(null); // Скидаємо помилку при успішному завантаженні\r\n\r\n            } catch (err) {\r\n                // Обробка будь-яких помилок (з selectField або api.get)\r\n                console.error('[AnalyticsField:useEffect:data] Помилка під час вибору поля або завантаження даних:', err);\r\n                setError(err.message || 'Не вдалося завантажити дані графіка.'); // Використовуємо повідомлення з помилки, якщо є\r\n                setChartData(null); // Скидаємо дані при помилці\r\n            } finally {\r\n                // Завжди вимикаємо індикатор завантаження\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        // Викликаємо асинхронну функцію\r\n        fetchDataForSelectedField();\r\n\r\n        // --- Функція Очищення (Cleanup) ---\r\n        // Ця функція викликається, коли компонент розмонтовується АБО коли змінюється id чи timeRange (перед наступним запуском effect)\r\n        const fieldIdToDeselect = id; // Зберігаємо ID, який був активним під час цього запуску effect\r\n        return () => {\r\n            console.log(`[AnalyticsField:useEffect:data] Запуск очищення для ID: ${fieldIdToDeselect}`);\r\n            if (fieldIdToDeselect) {\r\n                // Викликаємо deselect для поля, яке було активним\r\n                deselectField(fieldIdToDeselect);\r\n            }\r\n            // Також можна зупинити будь-які активні запити, якщо використовується бібліотека типу Axios з AbortController\r\n            // console.log('[AnalyticsField:useEffect:data] Ефект очищено.');\r\n        };\r\n\r\n    }, [id, timeRange, selectField, deselectField]); // Додаємо selectField та deselectField до залежностей, оскільки вони тепер useCallback\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchDataForSelectedField = async () => {\r\n            setIsLoading(true);\r\n            setError(null);\r\n            setChartData(null); // Reset previous data\r\n\r\n            try {\r\n                await selectField(id);\r\n\r\n                const apiUrl = `/field-measurements/chart/${timeRange}`;\r\n                const response = await api.get(apiUrl);\r\n                const rawData = response.data?.aggregatedData;\r\n\r\n                if (!Array.isArray(rawData)) {\r\n                    throw new Error('Invalid data format.');\r\n                }\r\n\r\n                const uniqueTimestampsSet = new Set();\r\n                rawData.forEach(sensor => {\r\n                    if (sensor && Array.isArray(sensor.data)) {\r\n                        sensor.data.forEach(entry => {\r\n                            if (entry && entry.timestamp) {\r\n                                uniqueTimestampsSet.add(entry.timestamp);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                const labels = Array.from(uniqueTimestampsSet).sort((a, b) => new Date(a) - new Date(b));\r\n\r\n                const series = rawData.map(sensor => {\r\n                    const timestampToValueMap = new Map();\r\n                    if (sensor && Array.isArray(sensor.data)) {\r\n                        sensor.data.forEach(entry => {\r\n                            if (entry && entry.timestamp && entry.value !== undefined && entry.value !== null) {\r\n                                timestampToValueMap.set(entry.timestamp, entry.value);\r\n                            }\r\n                        });\r\n                    }\r\n                    const seriesData = labels.map(timestamp => timestampToValueMap.get(timestamp) ?? null);\r\n                    return { name: sensor.sensorType || `Sensor ${sensor.sensorId || 'Unknown'}`, data: seriesData };\r\n                });\r\n\r\n                const chartistSeriesData = series.map(s => s.data);\r\n                const hasDataPoints = chartistSeriesData.some(seriesData =>\r\n                    Array.isArray(seriesData) && seriesData.some(point => point !== null)\r\n                );\r\n\r\n                if (labels.length === 0 || !hasDataPoints) {\r\n                    setChartData(null);\r\n                } else {\r\n                    setChartData({ labels, series: chartistSeriesData });\r\n                }\r\n                setError(null);\r\n            } catch (err) {\r\n                setError(err.message || 'Failed to load chart data.');\r\n                setChartData(null);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchDataForSelectedField();\r\n\r\n        const fieldIdToDeselect = id;\r\n        return () => {\r\n            if (fieldIdToDeselect) {\r\n                deselectField(fieldIdToDeselect);\r\n            }\r\n        };\r\n    }, [id, timeRange, selectField, deselectField]);\r\n\r\n    // --- Обробник Зміни Діапазону Часу ---\r\n    const handleTimeRangeChange = (range) => {\r\n        // Не оновлюємо, якщо вибрано той самий діапазон або йде завантаження\r\n        if (range !== timeRange && !isLoading) {\r\n            setTimeRange(range);\r\n        }\r\n    };\r\n\r\n    console.log(`[AnalyticsField] Рендер компонента. ID: ${id}, isLoading: ${isLoading}, error: ${error}, chartData: ${chartData ? 'є' : 'немає/порожньо'}`);\r\n\r\n    // --- JSX Рендеринг ---\r\n    return (\r\n        // Використовуємо `h-full` або `min-h-screen` для батьківських контейнерів, якщо потрібно розтягнути контент\r\n        <div id=\"main-content\" className=\"w-full flex-1 bg-gray-100 p-6\"> {/* Додано фон і падінг */}\r\n            <div className=\"max-w-7xl mx-auto\"> {/* Обмежуємо максимальну ширину */}\r\n                <div className=\"bg-white shadow rounded-lg p-4 md:p-6\"> {/* Картка для графіка */}\r\n                    {/* Заголовок та кнопки вибору діапазону */}\r\n                    <div className=\"flex justify-between items-center border-b border-gray-200 pb-3 mb-4\">\r\n                        <h5 className=\"text-xl font-bold text-gray-900\">\r\n                            Аналітика вимірювань {id ? `для поля ID: ${id}` : '(Поле не вибрано)'}\r\n                        </h5>\r\n                        <div className=\"flex space-x-2\">\r\n                            {['7d', '6m', '1y'].map(range => (\r\n                                <button\r\n                                    key={range}\r\n                                    onClick={() => handleTimeRangeChange(range)}\r\n                                    disabled={isLoading} // Блокуємо кнопки під час завантаження\r\n                                    className={`px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ease-in-out ${\r\n                                        timeRange === range\r\n                                            ? 'bg-blue-600 text-white hover:bg-blue-700'\r\n                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n                                    } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`} // Стилі для блокування\r\n                                >\r\n                                    {range === '7d' && '7 днів'}\r\n                                    {range === '6m' && '6 міс'}\r\n                                    {range === '1y' && '1 рік'}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Контейнер для графіка та повідомлень */}\r\n                    <div className=\"relative min-h-[350px]\"> {/* Мінімальна висота для графіка */}\r\n                        {/* Повідомлення стану */}\r\n                        {!id && (\r\n                            <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                <p className=\"text-center text-gray-500 text-lg\">\r\n                                    Будь ласка, оберіть поле зі списку.\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                        {id && isLoading && (\r\n                            <div className=\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-75 z-10\">\r\n                                <p className=\"text-center text-gray-600 text-lg animate-pulse\">Завантаження даних...</p>\r\n                                {/* Можна додати спінер тут */}\r\n                            </div>\r\n                        )}\r\n                        {id && error && !isLoading && (\r\n                            <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                <p className=\"text-center text-red-600 text-lg px-4 py-2 bg-red-100 rounded border border-red-300\">{error}</p>\r\n                            </div>\r\n                        )}\r\n                        {/* Повідомлення \"Немає даних\" */}\r\n                        {id && !isLoading && !error && !chartData && ( // Показуємо, якщо не завантаження, немає помилки і chartData = null\r\n                            <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                <p className=\"text-center text-gray-500 text-lg\">\r\n                                    Дані для обраного поля за цей період відсутні.\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Власник контейнер для графіка */}\r\n                        {/* Ми додаємо/видаляємо графік динамічно, тому повідомлення показуються поверх */}\r\n                        <div\r\n                            className={`ct-chart ct-golden-section ${!id || isLoading || error || !chartData ? 'opacity-0' : 'opacity-100'} transition-opacity duration-300`} // Ховаємо контейнер, якщо немає що показувати\r\n                            ref={chartContainerRef}\r\n                            style={{minHeight: '350px'}} // Забезпечуємо мінімальну висоту\r\n                        >\r\n                            {/* Chartist буде малювати сюди */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* --- Видалено секцію з таблицею та правою колонкою --- */}\r\n                {/* Якщо вони потрібні, їх треба реалізувати з відповідною логікою */}\r\n                {/*\r\n                 <div className=\"mt-6 bg-white shadow rounded-lg p-4 md:p-6\">\r\n                     <h5 className=\"text-xl font-bold text-gray-900 border-b pb-3 mb-4\">Додаткова інформація</h5>\r\n                     { // Тут може бути таблиця з даними або інші елементи\r\n                     }\r\n                 </div>\r\n                 */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalyticsField;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}