{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\utils\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\n// components/ProtectedRoute.js\nimport React, { useContext } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  // We no longer rely on `loading` in context for initial auth check here.\n  // `loading` might be used by *other* components while fetching specific data.\n  // The key states for protection are `user` and `hasDevice`.\n  const {\n    user,\n    hasDevice\n  } = useContext(UserContext); // Removed 'loading', 'error' if not used\n\n  const location = useLocation();\n\n  // If user is null, they are not authenticated (either never logged in,\n  // or session expired and interceptor called logoutUser, setting user to null).\n  // Navigation away from this protected route is handled by the App component\n  // watching the user state. This component returning null/Navigate simply\n  // indicates access is denied *at this location*.\n  if (!user) {\n    console.log('ProtectedRoute: Access denied (user is null).');\n    // Returning Navigate here ensures that if this component *is* rendered\n    // while user is null (e.g., before the App effect navigates), it will redirect.\n    // Use `replace` to avoid leaving the protected page in history.\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If user is authenticated but does not have a device\n  if (!hasDevice) {\n    console.log('ProtectedRoute: Access denied (no device). Redirecting to /get-device.');\n    // Redirect to the get device page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/get-device\",\n      state: {\n        reason: 'no-device',\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If user is authenticated AND has devices - render the protected content\n  console.log('ProtectedRoute: Access granted.');\n  return children;\n};\n_s(ProtectedRoute, \"0MlDNuS42myMttbdSg3sW69QhFs=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","Navigate","useLocation","UserContext","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","user","hasDevice","location","console","log","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","reason","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/utils/PrivateRoute.js"],"sourcesContent":["// components/ProtectedRoute.js\r\nimport React, { useContext } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n    // We no longer rely on `loading` in context for initial auth check here.\r\n    // `loading` might be used by *other* components while fetching specific data.\r\n    // The key states for protection are `user` and `hasDevice`.\r\n    const { user, hasDevice } = useContext(UserContext); // Removed 'loading', 'error' if not used\r\n\r\n    const location = useLocation();\r\n\r\n    // If user is null, they are not authenticated (either never logged in,\r\n    // or session expired and interceptor called logoutUser, setting user to null).\r\n    // Navigation away from this protected route is handled by the App component\r\n    // watching the user state. This component returning null/Navigate simply\r\n    // indicates access is denied *at this location*.\r\n    if (!user) {\r\n        console.log('ProtectedRoute: Access denied (user is null).');\r\n        // Returning Navigate here ensures that if this component *is* rendered\r\n        // while user is null (e.g., before the App effect navigates), it will redirect.\r\n        // Use `replace` to avoid leaving the protected page in history.\r\n        return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n    }\r\n\r\n    // If user is authenticated but does not have a device\r\n    if (!hasDevice) {\r\n        console.log('ProtectedRoute: Access denied (no device). Redirecting to /get-device.');\r\n        // Redirect to the get device page\r\n        return <Navigate to=\"/get-device\" state={{ reason: 'no-device', from: location }} replace />;\r\n    }\r\n\r\n    // If user is authenticated AND has devices - render the protected content\r\n    console.log('ProtectedRoute: Access granted.');\r\n    return children;\r\n};\r\n\r\nexport default ProtectedRoute;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC;EACA;EACA;EACA,MAAM;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGV,UAAU,CAACG,WAAW,CAAC,CAAC,CAAC;;EAErD,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,CAAC;;EAE9B;EACA;EACA;EACA;EACA;EACA,IAAI,CAACO,IAAI,EAAE;IACPG,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAC5D;IACA;IACA;IACA,oBAAOR,OAAA,CAACJ,QAAQ;MAACa,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEL;MAAS,CAAE;MAACM,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtE;;EAEA;EACA,IAAI,CAACX,SAAS,EAAE;IACZE,OAAO,CAACC,GAAG,CAAC,wEAAwE,CAAC;IACrF;IACA,oBAAOR,OAAA,CAACJ,QAAQ;MAACa,EAAE,EAAC,aAAa;MAACC,KAAK,EAAE;QAAEO,MAAM,EAAE,WAAW;QAAEN,IAAI,EAAEL;MAAS,CAAE;MAACM,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAChG;;EAEA;EACAT,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAC9C,OAAON,QAAQ;AACnB,CAAC;AAACC,EAAA,CA/BIF,cAAc;EAAA,QAMCJ,WAAW;AAAA;AAAAqB,EAAA,GAN1BjB,cAAc;AAiCpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}