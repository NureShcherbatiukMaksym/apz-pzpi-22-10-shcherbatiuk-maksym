{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom';\nimport { signInWithPopup } from 'firebase/auth';\nimport { auth, googleProvider } from '../firebase';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    user,\n    handleLoginSuccess\n  } = useContext(UserContext);\n  const [loginInProgress, setLoginInProgress] = useState(false);\n  const [formError, setFormError] = useState(null);\n  if (user) {\n    navigate('/', {\n      replace: true\n    });\n    return null;\n  }\n  const handleLogin = async (email, password) => {\n    setLoginInProgress(true);\n    setFormError(null);\n    try {\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      const data = res.data;\n      localStorage.setItem('userName', data.name);\n      localStorage.setItem('isAdmin', data.is_admin ? 'true' : 'false');\n      handleLoginSuccess(data);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Помилка входу';\n      setFormError(errorMessage);\n      alert('Помилка входу: ' + errorMessage);\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true);\n    setFormError(null);\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      const data = res.data;\n      localStorage.setItem('userName', data.name);\n      localStorage.setItem('isAdmin', data.is_admin ? 'true' : 'false');\n      handleLoginSuccess(data);\n    } catch (error) {\n      const errorMessage = error.message || 'Помилка авторизації через Google';\n      setFormError(errorMessage);\n      alert('Помилка авторизації через Google: ' + errorMessage);\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px',\n        textAlign: 'center'\n      },\n      children: formError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      type: \"login\",\n      onSubmit: handleLogin,\n      onGoogleLogin: handleGoogleLogin,\n      isSubmitting: loginInProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(LoginPage, \"5RdBEZAkfv3gv9zjbmm2XkouREU=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","AuthForm","api","useNavigate","signInWithPopup","auth","googleProvider","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","navigate","user","handleLoginSuccess","loginInProgress","setLoginInProgress","formError","setFormError","replace","handleLogin","email","password","res","post","withCredentials","data","localStorage","setItem","name","is_admin","err","_err$response","_err$response$data","errorMessage","response","message","alert","handleGoogleLogin","result","token","getIdToken","error","children","style","color","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { auth, googleProvider } from '../firebase';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate();\r\n    const { user, handleLoginSuccess } = useContext(UserContext);\r\n\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n    const [formError, setFormError] = useState(null);\r\n\r\n    if (user) {\r\n        navigate('/', { replace: true });\r\n        return null;\r\n    }\r\n\r\n    const handleLogin = async (email, password) => {\r\n        setLoginInProgress(true);\r\n        setFormError(null);\r\n\r\n        try {\r\n            const res = await api.post('/auth/login/password', { email, password }, { withCredentials: true });\r\n            const data = res.data;\r\n\r\n            localStorage.setItem('userName', data.name);\r\n            localStorage.setItem('isAdmin', data.is_admin ? 'true' : 'false');\r\n\r\n            handleLoginSuccess(data);\r\n        } catch (err) {\r\n            const errorMessage = err.response?.data?.message || 'Помилка входу';\r\n            setFormError(errorMessage);\r\n            alert('Помилка входу: ' + errorMessage);\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true);\r\n        setFormError(null);\r\n\r\n        try {\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            const data = res.data;\r\n\r\n            localStorage.setItem('userName', data.name);\r\n            localStorage.setItem('isAdmin', data.is_admin ? 'true' : 'false');\r\n\r\n            handleLoginSuccess(data);\r\n        } catch (error) {\r\n            const errorMessage = error.message || 'Помилка авторизації через Google';\r\n            setFormError(errorMessage);\r\n            alert('Помилка авторизації через Google: ' + errorMessage);\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {formError && <div style={{ color: 'red', marginBottom: '10px', textAlign: 'center' }}>{formError}</div>}\r\n            <AuthForm\r\n                type=\"login\"\r\n                onSubmit={handleLogin}\r\n                onGoogleLogin={handleGoogleLogin}\r\n                isSubmitting={loginInProgress}\r\n            />\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}