{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\AnalyticsField.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../utils/api';\nimport Chartist from 'chartist';\nimport 'chartist/dist/chartist.min.css';\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AnalyticsField = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [timeRange, setTimeRange] = useState('7d');\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    t\n  } = useTranslation(); // Assuming i18n instance is not directly used in this snippet\n  const chartContainerRef = useRef(null);\n  const [isFieldSelectedAndReady, setIsFieldSelectedAndReady] = useState(false); // New state\n\n  const selectField = useCallback(async fieldId => {\n    if (!fieldId) return;\n    // setIsLoading and setError will be handled by the calling effect\n    try {\n      await api.post('/fields/select/', {\n        fieldId\n      });\n      // No need to return true explicitly unless used elsewhere\n    } catch (err) {\n      console.error('Помилка при виборі поля:', err);\n      throw err; // Re-throw to be caught by the calling useEffect\n    }\n  }, []);\n  const deselectField = useCallback(async fieldId => {\n    if (!fieldId) return;\n    try {\n      await api.post('/fields/deselect/', {\n        fieldId\n      });\n    } catch (err) {\n      console.error('Помилка при деселекті поля:', err);\n    }\n  }, []);\n  const fetchData = useCallback(async () => {\n    if (!id) {\n      console.log('fetchData: No ID, skipping fetch.');\n      setChartData(null);\n      setError(null);\n      return;\n    }\n    console.log(`WorkspaceData: Fetching data for field ${id} and timeRange ${timeRange}`);\n    setIsLoading(true);\n    setError(null);\n    // setChartData(null); // Вирішіть, чи очищати дані тут, чи покладатися на умовний рендеринг\n\n    try {\n      const response = await api.get(`/field-measurements/chart/${timeRange}`);\n      console.log('fetchData: API response received:', JSON.stringify(response.data, null, 2));\n      if (response.data && response.data.aggregatedData) {\n        setChartData(response.data);\n      } else {\n        console.warn('fetchData: API response missing aggregatedData.');\n        setChartData({\n          aggregatedData: []\n        }); // Встановлюємо порожні дані, щоб логіка очищення графіків спрацювала\n        setError('Дані отримано, але вони порожні або у невірному форматі.');\n      }\n    } catch (err) {\n      console.error('fetchData: Помилка при завантаженні аналітики:', err);\n      setError(t('failed_load_data'));\n      setChartData(null); // Очищаємо дані при помилці\n    } finally {\n      setIsLoading(false);\n    }\n  }, [id, timeRange]); // Залежності fetchData\n\n  // Effect to handle field selection when 'id' changes\n  useEffect(() => {\n    if (!id) {\n      console.log('Selection useEffect: No ID.');\n      setIsFieldSelectedAndReady(false);\n      setChartData(null);\n      setError(null);\n      return;\n    }\n    console.log(`Selection useEffect: ID changed to ${id}. Starting selection process.`);\n    // ... (решта логіки doSelect) ...\n    const doSelect = async () => {\n      setIsLoading(true);\n      setError(null);\n      setIsFieldSelectedAndReady(false);\n      console.log(`doSelect: Selecting field ${id}`);\n      try {\n        await selectField(id);\n        console.log(`doSelect: Field ${id} selected successfully.`);\n        setIsFieldSelectedAndReady(true);\n      } catch (err) {\n        console.error(`doSelect: Помилка при виборі поля ${id}:`, err);\n        setError('Не вдалося вибрати поле.');\n        setIsFieldSelectedAndReady(false);\n        setChartData(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    doSelect();\n    // ... (cleanup) ...\n  }, [id, selectField, deselectField]);\n\n  // Effect to fetch data once field is selected/ready OR when timeRange changes\n  useEffect(() => {\n    console.log(`Data fetching trigger useEffect: id=${id}, isFieldSelectedAndReady=${isFieldSelectedAndReady}, timeRange=${timeRange}`);\n    if (id && isFieldSelectedAndReady) {\n      console.log('Data fetching trigger useEffect: Conditions met, calling fetchData.');\n      fetchData();\n    } else if (!id) {\n      console.log('Data fetching trigger useEffect: No ID, clearing chartData.');\n      setChartData(null);\n      setError(null);\n    } else {\n      console.log('Data fetching trigger useEffect: Conditions not met (field not ready or no ID).');\n    }\n  }, [id, isFieldSelectedAndReady, timeRange, fetchData]);\n\n  // useEffect для рендерингу графіків Chartist\n  useEffect(() => {\n    console.log('Chart rendering effect triggered. chartData:', JSON.stringify(chartData, null, 2));\n    const clearChartContainer = elementId => {\n      const element = document.getElementById(elementId);\n      if (element) {\n        element.innerHTML = ''; // Найпростіший спосіб очистити\n      } else {\n        console.warn(`Chart container #${elementId} not found for clearing.`);\n      }\n      return element; // Повертаємо елемент для подальшого використання\n    };\n    if (!chartData || !chartData.aggregatedData || chartData.aggregatedData.length === 0) {\n      console.log('No chart data or empty aggregatedData, skipping chart rendering and clearing old charts.');\n      clearChartContainer('overall-chart');\n      // Якщо chartData існувало раніше, але стало порожнім, потрібно також очистити графіки сенсорів.\n      // Це може бути складніше, якщо у вас немає списку попередніх sensorId.\n      // Якщо JSX приховує ці div'и, коли chartData порожнє, це може бути достатньо.\n      // Якщо div'и залишаються, їх треба очистити. Наприклад, якщо ви знаєте максимальну кількість сенсорів або маєте їх ID.\n      // Для простоти, якщо chartData.aggregatedData порожнє, але chartData існує, ми можемо спробувати очистити відомі div'и,\n      // але краще, щоб JSX обробляв їх видалення/приховування.\n      // У нашому випадку, якщо chartData.aggregatedData порожнє, цикл forEach нижче не виконається.\n      return;\n    }\n\n    // Персональні графіки по сенсорах\n    chartData.aggregatedData.forEach(sensor => {\n      const containerId = `chart-${sensor.sensorId}`;\n      const chartElement = clearChartContainer(containerId); // Очищаємо і отримуємо елемент\n\n      if (!chartElement) {\n        // Попередження вже було виведено в clearChartContainer\n        return;\n      }\n      const labels = sensor.data.map(entry => {\n        const date = new Date(entry.timestamp || entry.createdAt);\n        return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n      });\n      const values = sensor.data.map(entry => entry.value);\n      console.log(`Rendering chart for Sensor ID ${sensor.sensorId}. Labels count: ${labels.length}, Values count: ${values.length}`);\n      // console.log(`Sensor ID ${sensor.sensorId} - Labels:`, JSON.stringify(labels), \"Values:\", JSON.stringify(values));\n\n      if (labels.length === 0 || values.length === 0) {\n        console.warn(`No data for sensor ${sensor.sensorId}, skipping chart.`);\n        chartElement.innerHTML = '<p style=\"text-align: center; padding-top: 20%;\">Немає даних для цього сенсора.</p>';\n        return;\n      }\n      try {\n        new Chartist.Line(chartElement, {\n          // Передаємо сам DOM-елемент\n          labels,\n          series: [values]\n        }, {\n          fullWidth: true,\n          chartPadding: {\n            right: 40\n          },\n          axisX: {\n            showGrid: false,\n            labelInterpolationFnc: (value, index) => index % 3 === 0 ? value : null\n          }\n        });\n      } catch (e) {\n        console.error(`Error creating chart for sensor ${sensor.sensorId}:`, e);\n        chartElement.innerHTML = '<p style=\"text-align: center; color: red; padding-top: 20%;\">Помилка побудови графіка.</p>';\n      }\n    });\n\n    // Загальний графік\n    const overallChartElement = clearChartContainer('overall-chart'); // Очищаємо і отримуємо елемент\n    if (!overallChartElement) {\n      // Попередження вже було виведено в clearChartContainer\n      return;\n    }\n    const sensorTypesMap = {};\n    chartData.aggregatedData.forEach(sensor => {\n      sensor.data.forEach(entry => {\n        const timeKey = new Date(entry.timestamp || entry.createdAt).toISOString().slice(0, 16); // до хвилин\n        if (!sensorTypesMap[sensor.sensorType]) sensorTypesMap[sensor.sensorType] = {};\n        if (!sensorTypesMap[sensor.sensorType][timeKey]) {\n          sensorTypesMap[sensor.sensorType][timeKey] = [];\n        }\n        sensorTypesMap[sensor.sensorType][timeKey].push(entry.value);\n      });\n    });\n    const allTimestamps = Array.from(new Set(Object.values(sensorTypesMap).flatMap(typeData => Object.keys(typeData)))).sort();\n    const overallLabels = allTimestamps.map(ts => {\n      const date = new Date(ts);\n      return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n    });\n    const overallSeries = Object.keys(sensorTypesMap).map(sensorType => {\n      return allTimestamps.map(ts => {\n        const values = sensorTypesMap[sensorType][ts];\n        if (!values || values.length === 0) return null; // Chartist обробляє null для пропусків\n        const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n        return +avg.toFixed(2);\n      });\n    });\n    console.log(`Rendering overall chart. Labels count: ${overallLabels.length}, Series count: ${overallSeries.length}`);\n    // console.log('Overall Chart - Labels:', JSON.stringify(overallLabels), \"Series:\", JSON.stringify(overallSeries));\n\n    if (overallLabels.length === 0 || overallSeries.length === 0 || overallSeries.every(s => s.length === 0 && s.every(val => val === null))) {\n      console.warn('No data for overall chart, skipping.');\n      overallChartElement.innerHTML = '<p style=\"text-align: center; padding-top: 20%;\">Немає даних для загального графіка.</p>';\n      return;\n    }\n    try {\n      new Chartist.Line(overallChartElement, {\n        // Передаємо сам DOM-елемент\n        labels: overallLabels,\n        series: overallSeries\n      }, {\n        fullWidth: true,\n        chartPadding: {\n          right: 40\n        },\n        axisX: {\n          showGrid: false,\n          labelInterpolationFnc: (value, index) => index % 1 === 0 ? value : null // Показувати кожну мітку\n        },\n        lineSmooth: Chartist.Interpolation.cardinal({\n          tension: 0.2\n        })\n      });\n    } catch (e) {\n      console.error('Error creating overall chart:', e);\n      overallChartElement.innerHTML = '<p style=\"text-align: center; color: red; padding-top: 20%;\">Помилка побудови загального графіка.</p>';\n    }\n  }, [chartData]); // Залежність тільки від chartData\n\n  const handleTimeRangeChange = range => {\n    if (range !== timeRange && !isLoading) {\n      setTimeRange(range);\n    }\n  };\n\n  // JSX rendering part (ensure error messages and loading indicators are shown correctly)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-content\",\n    className: \"w-full flex-1 bg-gray-100 p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white shadow rounded-lg p-4 md:p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center border-b border-gray-200 pb-3 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-xl font-bold text-gray-900\",\n            children: id ? `${t('analytics_title')} ${id}` : t('field_not_selected')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-2\",\n            children: ['7d', '6m', '1y'].map(range => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleTimeRangeChange(range),\n              disabled: isLoading,\n              className: `px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ease-in-out ${timeRange === range ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`,\n              children: range.toUpperCase()\n            }, range, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-blue-600\",\n          children: \"\\u0417\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0434\\u0430\\u043D\\u0438\\u0445...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 35\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-600\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 31\n        }, this), chartData && !error &&\n        /*#__PURE__*/\n        // Only render charts if data is present AND no error\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"font-semibold text-lg mb-2\",\n              children: t(`general_analytics`)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"overall-chart\",\n              className: \"ct-chart ct-major-twelfth\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"font-semibold text-lg mb-2\",\n              children: t(`aggregated_data`)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: chartData.aggregatedData.map(sensor => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-4 bg-gray-50 rounded shadow-sm\",\n                children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                  className: \"font-bold\",\n                  children: sensor.sensorType\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Min:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 309,\n                    columnNumber: 48\n                  }, this), \" \", sensor.min]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Max:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 310,\n                    columnNumber: 48\n                  }, this), \" \", sensor.max]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Avg:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 48\n                  }, this), \" \", sensor.average]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  id: `chart-${sensor.sensorId}`,\n                  className: \"ct-chart ct-major-tenth mt-4\",\n                  style: {\n                    height: '300px'\n                  }\n                  // ref={chartContainerRef} // ref is used for the Chartist useEffect, not individual divs here\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 45\n                }, this)]\n              }, sensor.sensorId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), id && !chartData && !error && !isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u041D\\u0435\\u043C\\u0430\\u0454 \\u0434\\u0430\\u043D\\u0438\\u0445 \\u0434\\u043B\\u044F \\u0432\\u0456\\u0434\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 66\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 9\n  }, this);\n};\n_s(AnalyticsField, \"igZOAz9/dEiJHxOxIJd25yjitEM=\", false, function () {\n  return [useParams, useTranslation];\n});\n_c = AnalyticsField;\nexport default AnalyticsField;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsField\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useParams","api","Chartist","useTranslation","jsxDEV","_jsxDEV","Fragment","_Fragment","AnalyticsField","_s","id","timeRange","setTimeRange","chartData","setChartData","isLoading","setIsLoading","error","setError","t","chartContainerRef","isFieldSelectedAndReady","setIsFieldSelectedAndReady","selectField","fieldId","post","err","console","deselectField","fetchData","log","response","get","JSON","stringify","data","aggregatedData","warn","doSelect","clearChartContainer","elementId","element","document","getElementById","innerHTML","length","forEach","sensor","containerId","sensorId","chartElement","labels","map","entry","date","Date","timestamp","createdAt","getDate","toString","padStart","getMonth","values","value","Line","series","fullWidth","chartPadding","right","axisX","showGrid","labelInterpolationFnc","index","e","overallChartElement","sensorTypesMap","timeKey","toISOString","slice","sensorType","push","allTimestamps","Array","from","Set","Object","flatMap","typeData","keys","sort","overallLabels","ts","overallSeries","avg","reduce","sum","val","toFixed","every","s","lineSmooth","Interpolation","cardinal","tension","handleTimeRangeChange","range","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","toUpperCase","min","max","average","style","height","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/AnalyticsField.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport api from '../utils/api';\r\nimport Chartist from 'chartist';\r\nimport 'chartist/dist/chartist.min.css';\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst AnalyticsField = () => {\r\n    const { id } = useParams();\r\n    const [timeRange, setTimeRange] = useState('7d');\r\n    const [chartData, setChartData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const { t } = useTranslation(); // Assuming i18n instance is not directly used in this snippet\r\n    const chartContainerRef = useRef(null);\r\n    const [isFieldSelectedAndReady, setIsFieldSelectedAndReady] = useState(false); // New state\r\n\r\n    const selectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) return;\r\n        // setIsLoading and setError will be handled by the calling effect\r\n        try {\r\n            await api.post('/fields/select/', { fieldId });\r\n            // No need to return true explicitly unless used elsewhere\r\n        } catch (err) {\r\n            console.error('Помилка при виборі поля:', err);\r\n            throw err; // Re-throw to be caught by the calling useEffect\r\n        }\r\n    }, []);\r\n\r\n    const deselectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) return;\r\n        try {\r\n            await api.post('/fields/deselect/', { fieldId });\r\n        } catch (err) {\r\n            console.error('Помилка при деселекті поля:', err);\r\n        }\r\n    }, []);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        if (!id) {\r\n            console.log('fetchData: No ID, skipping fetch.');\r\n            setChartData(null);\r\n            setError(null);\r\n            return;\r\n        }\r\n\r\n        console.log(`WorkspaceData: Fetching data for field ${id} and timeRange ${timeRange}`);\r\n        setIsLoading(true);\r\n        setError(null);\r\n        // setChartData(null); // Вирішіть, чи очищати дані тут, чи покладатися на умовний рендеринг\r\n\r\n        try {\r\n            const response = await api.get(`/field-measurements/chart/${timeRange}`);\r\n            console.log('fetchData: API response received:', JSON.stringify(response.data, null, 2));\r\n            if (response.data && response.data.aggregatedData) {\r\n                setChartData(response.data);\r\n            } else {\r\n                console.warn('fetchData: API response missing aggregatedData.');\r\n                setChartData({ aggregatedData: [] }); // Встановлюємо порожні дані, щоб логіка очищення графіків спрацювала\r\n                setError('Дані отримано, але вони порожні або у невірному форматі.');\r\n            }\r\n        } catch (err) {\r\n            console.error('fetchData: Помилка при завантаженні аналітики:', err);\r\n            setError(t('failed_load_data'));\r\n            setChartData(null); // Очищаємо дані при помилці\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [id, timeRange]); // Залежності fetchData\r\n\r\n// Effect to handle field selection when 'id' changes\r\n    useEffect(() => {\r\n        if (!id) {\r\n            console.log('Selection useEffect: No ID.');\r\n            setIsFieldSelectedAndReady(false);\r\n            setChartData(null);\r\n            setError(null);\r\n            return;\r\n        }\r\n        console.log(`Selection useEffect: ID changed to ${id}. Starting selection process.`);\r\n        // ... (решта логіки doSelect) ...\r\n        const doSelect = async () => {\r\n            setIsLoading(true);\r\n            setError(null);\r\n            setIsFieldSelectedAndReady(false);\r\n            console.log(`doSelect: Selecting field ${id}`);\r\n            try {\r\n                await selectField(id);\r\n                console.log(`doSelect: Field ${id} selected successfully.`);\r\n                setIsFieldSelectedAndReady(true);\r\n            } catch (err) {\r\n                console.error(`doSelect: Помилка при виборі поля ${id}:`, err);\r\n                setError('Не вдалося вибрати поле.');\r\n                setIsFieldSelectedAndReady(false);\r\n                setChartData(null);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        doSelect();\r\n        // ... (cleanup) ...\r\n    }, [id, selectField, deselectField]);\r\n\r\n// Effect to fetch data once field is selected/ready OR when timeRange changes\r\n    useEffect(() => {\r\n        console.log(`Data fetching trigger useEffect: id=${id}, isFieldSelectedAndReady=${isFieldSelectedAndReady}, timeRange=${timeRange}`);\r\n        if (id && isFieldSelectedAndReady) {\r\n            console.log('Data fetching trigger useEffect: Conditions met, calling fetchData.');\r\n            fetchData();\r\n        } else if (!id) {\r\n            console.log('Data fetching trigger useEffect: No ID, clearing chartData.');\r\n            setChartData(null);\r\n            setError(null);\r\n        } else {\r\n            console.log('Data fetching trigger useEffect: Conditions not met (field not ready or no ID).');\r\n        }\r\n    }, [id, isFieldSelectedAndReady, timeRange, fetchData]);\r\n\r\n    // useEffect для рендерингу графіків Chartist\r\n    useEffect(() => {\r\n        console.log('Chart rendering effect triggered. chartData:', JSON.stringify(chartData, null, 2));\r\n\r\n        const clearChartContainer = (elementId) => {\r\n            const element = document.getElementById(elementId);\r\n            if (element) {\r\n                element.innerHTML = ''; // Найпростіший спосіб очистити\r\n            } else {\r\n                console.warn(`Chart container #${elementId} not found for clearing.`);\r\n            }\r\n            return element; // Повертаємо елемент для подальшого використання\r\n        };\r\n\r\n        if (!chartData || !chartData.aggregatedData || chartData.aggregatedData.length === 0) {\r\n            console.log('No chart data or empty aggregatedData, skipping chart rendering and clearing old charts.');\r\n            clearChartContainer('overall-chart');\r\n            // Якщо chartData існувало раніше, але стало порожнім, потрібно також очистити графіки сенсорів.\r\n            // Це може бути складніше, якщо у вас немає списку попередніх sensorId.\r\n            // Якщо JSX приховує ці div'и, коли chartData порожнє, це може бути достатньо.\r\n            // Якщо div'и залишаються, їх треба очистити. Наприклад, якщо ви знаєте максимальну кількість сенсорів або маєте їх ID.\r\n            // Для простоти, якщо chartData.aggregatedData порожнє, але chartData існує, ми можемо спробувати очистити відомі div'и,\r\n            // але краще, щоб JSX обробляв їх видалення/приховування.\r\n            // У нашому випадку, якщо chartData.aggregatedData порожнє, цикл forEach нижче не виконається.\r\n            return;\r\n        }\r\n\r\n        // Персональні графіки по сенсорах\r\n        chartData.aggregatedData.forEach(sensor => {\r\n            const containerId = `chart-${sensor.sensorId}`;\r\n            const chartElement = clearChartContainer(containerId); // Очищаємо і отримуємо елемент\r\n\r\n            if (!chartElement) {\r\n                // Попередження вже було виведено в clearChartContainer\r\n                return;\r\n            }\r\n\r\n            const labels = sensor.data.map(entry => {\r\n                const date = new Date(entry.timestamp || entry.createdAt);\r\n                return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1)\r\n                    .toString()\r\n                    .padStart(2, '0')}`;\r\n            });\r\n            const values = sensor.data.map(entry => entry.value);\r\n\r\n            console.log(`Rendering chart for Sensor ID ${sensor.sensorId}. Labels count: ${labels.length}, Values count: ${values.length}`);\r\n            // console.log(`Sensor ID ${sensor.sensorId} - Labels:`, JSON.stringify(labels), \"Values:\", JSON.stringify(values));\r\n\r\n\r\n            if (labels.length === 0 || values.length === 0) {\r\n                console.warn(`No data for sensor ${sensor.sensorId}, skipping chart.`);\r\n                chartElement.innerHTML = '<p style=\"text-align: center; padding-top: 20%;\">Немає даних для цього сенсора.</p>';\r\n                return;\r\n            }\r\n\r\n            try {\r\n                new Chartist.Line(chartElement, { // Передаємо сам DOM-елемент\r\n                    labels,\r\n                    series: [values],\r\n                }, {\r\n                    fullWidth: true,\r\n                    chartPadding: { right: 40 },\r\n                    axisX: {\r\n                        showGrid: false,\r\n                        labelInterpolationFnc: (value, index) => index % 3 === 0 ? value : null,\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                console.error(`Error creating chart for sensor ${sensor.sensorId}:`, e);\r\n                chartElement.innerHTML = '<p style=\"text-align: center; color: red; padding-top: 20%;\">Помилка побудови графіка.</p>';\r\n            }\r\n        });\r\n\r\n        // Загальний графік\r\n        const overallChartElement = clearChartContainer('overall-chart'); // Очищаємо і отримуємо елемент\r\n        if (!overallChartElement) {\r\n            // Попередження вже було виведено в clearChartContainer\r\n            return;\r\n        }\r\n\r\n        const sensorTypesMap = {};\r\n        chartData.aggregatedData.forEach(sensor => {\r\n            sensor.data.forEach(entry => {\r\n                const timeKey = new Date(entry.timestamp || entry.createdAt).toISOString().slice(0, 16); // до хвилин\r\n                if (!sensorTypesMap[sensor.sensorType]) sensorTypesMap[sensor.sensorType] = {};\r\n                if (!sensorTypesMap[sensor.sensorType][timeKey]) {\r\n                    sensorTypesMap[sensor.sensorType][timeKey] = [];\r\n                }\r\n                sensorTypesMap[sensor.sensorType][timeKey].push(entry.value);\r\n            });\r\n        });\r\n\r\n        const allTimestamps = Array.from(\r\n            new Set(Object.values(sensorTypesMap).flatMap(typeData => Object.keys(typeData)))\r\n        ).sort();\r\n\r\n        const overallLabels = allTimestamps.map(ts => {\r\n            const date = new Date(ts);\r\n            return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;\r\n        });\r\n\r\n        const overallSeries = Object.keys(sensorTypesMap).map(sensorType => {\r\n            return allTimestamps.map(ts => {\r\n                const values = sensorTypesMap[sensorType][ts];\r\n                if (!values || values.length === 0) return null; // Chartist обробляє null для пропусків\r\n                const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\r\n                return +avg.toFixed(2);\r\n            });\r\n        });\r\n\r\n        console.log(`Rendering overall chart. Labels count: ${overallLabels.length}, Series count: ${overallSeries.length}`);\r\n        // console.log('Overall Chart - Labels:', JSON.stringify(overallLabels), \"Series:\", JSON.stringify(overallSeries));\r\n\r\n        if (overallLabels.length === 0 || overallSeries.length === 0 || overallSeries.every(s => s.length === 0 && s.every(val => val === null))) {\r\n            console.warn('No data for overall chart, skipping.');\r\n            overallChartElement.innerHTML = '<p style=\"text-align: center; padding-top: 20%;\">Немає даних для загального графіка.</p>';\r\n            return;\r\n        }\r\n\r\n        try {\r\n            new Chartist.Line(overallChartElement, { // Передаємо сам DOM-елемент\r\n                labels: overallLabels,\r\n                series: overallSeries,\r\n            }, {\r\n                fullWidth: true,\r\n                chartPadding: { right: 40 },\r\n                axisX: {\r\n                    showGrid: false,\r\n                    labelInterpolationFnc: (value, index) => index % 1 === 0 ? value : null, // Показувати кожну мітку\r\n                },\r\n                lineSmooth: Chartist.Interpolation.cardinal({\r\n                    tension: 0.2\r\n                })\r\n            });\r\n        } catch (e) {\r\n            console.error('Error creating overall chart:', e);\r\n            overallChartElement.innerHTML = '<p style=\"text-align: center; color: red; padding-top: 20%;\">Помилка побудови загального графіка.</p>';\r\n        }\r\n\r\n    }, [chartData]); // Залежність тільки від chartData\r\n\r\n    const handleTimeRangeChange = (range) => {\r\n        if (range !== timeRange && !isLoading) {\r\n            setTimeRange(range);\r\n        }\r\n    };\r\n\r\n    // JSX rendering part (ensure error messages and loading indicators are shown correctly)\r\n    return (\r\n        <div id=\"main-content\" className=\"w-full flex-1 bg-gray-100 p-6\">\r\n            <div className=\"max-w-7xl mx-auto\">\r\n                <div className=\"bg-white shadow rounded-lg p-4 md:p-6\">\r\n                    <div className=\"flex justify-between items-center border-b border-gray-200 pb-3 mb-4\">\r\n                        <h5 className=\"text-xl font-bold text-gray-900\">\r\n                            {id ? `${t('analytics_title')} ${id}` : t('field_not_selected')}\r\n                        </h5>\r\n                        <div className=\"flex space-x-2\">\r\n                            {['7d', '6m', '1y'].map(range => (\r\n                                <button\r\n                                    key={range}\r\n                                    onClick={() => handleTimeRangeChange(range)}\r\n                                    disabled={isLoading}\r\n                                    className={`px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ease-in-out ${\r\n                                        timeRange === range\r\n                                            ? 'bg-blue-600 text-white hover:bg-blue-700'\r\n                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n                                    } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n                                >\r\n                                    {range.toUpperCase()}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {isLoading && <p className=\"text-blue-600\">Завантаження даних...</p>}\r\n                    {error && <p className=\"text-red-600\">{error}</p>}\r\n\r\n                    {/* Conditional rendering for charts based on chartData and no error */}\r\n                    {chartData && !error && ( // Only render charts if data is present AND no error\r\n                        <>\r\n                            <div className=\"mb-8\">\r\n                                <h6 className=\"font-semibold text-lg mb-2\">{t(`general_analytics`)}</h6>\r\n                                <div id=\"overall-chart\" className=\"ct-chart ct-major-twelfth\"></div>\r\n                            </div>\r\n                            <div>\r\n                                <h6 className=\"font-semibold text-lg mb-2\">{t(`aggregated_data`)}</h6>\r\n                                <div className=\"space-y-4\">\r\n                                    {chartData.aggregatedData.map(sensor => (\r\n                                        <div key={sensor.sensorId} className=\"p-4 bg-gray-50 rounded shadow-sm\">\r\n                                            <h6 className=\"font-bold\">{sensor.sensorType}</h6>\r\n                                            <p><strong>Min:</strong> {sensor.min}</p>\r\n                                            <p><strong>Max:</strong> {sensor.max}</p>\r\n                                            <p><strong>Avg:</strong> {sensor.average}</p>\r\n                                            <div\r\n                                                id={`chart-${sensor.sensorId}`}\r\n                                                className=\"ct-chart ct-major-tenth mt-4\"\r\n                                                style={{ height: '300px' }}\r\n                                                // ref={chartContainerRef} // ref is used for the Chartist useEffect, not individual divs here\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                    {/* If there's an id but no chartData and no error, and not loading, it means selection might still be happening or data is empty. */}\r\n                    {id && !chartData && !error && !isLoading && <p>Немає даних для відображення.</p>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalyticsField;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}