{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\MapPolygonPicker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useRef, useEffect } from \"react\";\nimport { GoogleMap, Polygon } from \"@react-google-maps/api\";\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: \"100%\",\n  height: \"100%\"\n};\nconst center = {\n  lat: 48.3794,\n  lng: 31.1656\n};\nconst MapPolygonPicker = ({\n  onPolygonComplete,\n  setManualCoordsFromMap,\n  initialPolygon\n}) => {\n  _s();\n  const [paths, setPaths] = useState([]);\n  const mapRef = useRef(null);\n  const polygonRef = useRef(null);\n  const {\n    t\n  } = useTranslation();\n  useEffect(() => {\n    if (initialPolygon && initialPolygon.length > 2) {\n      let trimmed = initialPolygon;\n      if (initialPolygon[0][0] === initialPolygon[initialPolygon.length - 1][0] && initialPolygon[0][1] === initialPolygon[initialPolygon.length - 1][1]) {\n        trimmed = initialPolygon.slice(0, -1);\n      }\n      const converted = trimmed.map(([lat, lng]) => ({\n        lat,\n        lng\n      }));\n      setPaths(converted);\n      if (mapRef.current && window.google) {\n        const bounds = new window.google.maps.LatLngBounds();\n        converted.forEach(point => bounds.extend(point));\n        mapRef.current.fitBounds(bounds);\n      }\n    }\n  }, [initialPolygon]);\n  const handleClick = useCallback(event => {\n    const newPoint = {\n      lat: parseFloat(event.latLng.lat().toFixed(6)),\n      lng: parseFloat(event.latLng.lng().toFixed(6))\n    };\n    setPaths(prev => {\n      const newPaths = [...prev, newPoint];\n      onPolygonComplete(newPaths.map(p => [p.lat, p.lng]));\n      return newPaths;\n    });\n  }, []);\n  const updateManualCoords = newPaths => {\n    if (setManualCoordsFromMap && newPaths.length > 0) {\n      const coordsText = newPaths.map(point => `[${point.lat}, ${point.lng}]`).join(\",\\n\");\n      setManualCoordsFromMap(coordsText);\n    }\n  };\n  useEffect(() => {\n    updateManualCoords(paths);\n  }, [paths]);\n  const handleReset = () => {\n    setPaths([]);\n    if (setManualCoordsFromMap) {\n      setManualCoordsFromMap(\"\");\n    }\n    polygonRef.current = null;\n  };\n  const onEdit = () => {\n    if (!polygonRef.current) return;\n    const path = polygonRef.current.getPath();\n    const updated = [];\n    for (let i = 0; i < path.getLength(); i++) {\n      const point = path.getAt(i);\n      updated.push({\n        lat: parseFloat(point.lat().toFixed(6)),\n        lng: parseFloat(point.lng().toFixed(6))\n      });\n    }\n    setPaths(updated);\n    updateManualCoords(updated);\n    onPolygonComplete(updated.map(p => [p.lat, p.lng]));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-full relative\",\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 6,\n      onClick: handleClick,\n      onLoad: map => mapRef.current = map,\n      children: paths.length > 0 && /*#__PURE__*/_jsxDEV(Polygon, {\n        path: paths,\n        options: {\n          fillColor: \"#00FF00\",\n          fillOpacity: 0.3,\n          strokeColor: \"#00AA00\",\n          strokeOpacity: 1,\n          strokeWeight: 2,\n          editable: true,\n          draggable: false\n        },\n        onMouseUp: onEdit,\n        onDragEnd: onEdit,\n        onLoad: polygon => polygonRef.current = polygon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute bottom-2 right-2 flex gap-2\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"bg-red-500 text-white px-3 py-1 rounded text-sm shadow-md\",\n        onClick: handleReset,\n        children: t('reset')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(MapPolygonPicker, \"0CIz95f8yQwAcCPG9gnpWg3R5N0=\", false, function () {\n  return [useTranslation];\n});\n_c = MapPolygonPicker;\nexport default MapPolygonPicker;\nvar _c;\n$RefreshReg$(_c, \"MapPolygonPicker\");","map":{"version":3,"names":["React","useCallback","useState","useRef","useEffect","GoogleMap","Polygon","useTranslation","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MapPolygonPicker","onPolygonComplete","setManualCoordsFromMap","initialPolygon","_s","paths","setPaths","mapRef","polygonRef","t","length","trimmed","slice","converted","map","current","window","google","bounds","maps","LatLngBounds","forEach","point","extend","fitBounds","handleClick","event","newPoint","parseFloat","latLng","toFixed","prev","newPaths","p","updateManualCoords","coordsText","join","handleReset","onEdit","path","getPath","updated","i","getLength","getAt","push","className","children","mapContainerStyle","zoom","onClick","onLoad","options","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","editable","draggable","onMouseUp","onDragEnd","polygon","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/MapPolygonPicker.jsx"],"sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from \"react\";\r\nimport { GoogleMap, Polygon } from \"@react-google-maps/api\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst containerStyle = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n};\r\n\r\nconst center = {\r\n    lat: 48.3794,\r\n    lng: 31.1656,\r\n};\r\n\r\nconst MapPolygonPicker = ({ onPolygonComplete, setManualCoordsFromMap, initialPolygon }) => {\r\n    const [paths, setPaths] = useState([]);\r\n    const mapRef = useRef(null);\r\n    const polygonRef = useRef(null);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (initialPolygon && initialPolygon.length > 2) {\r\n            let trimmed = initialPolygon;\r\n\r\n            if (\r\n                initialPolygon[0][0] === initialPolygon[initialPolygon.length - 1][0] &&\r\n                initialPolygon[0][1] === initialPolygon[initialPolygon.length - 1][1]\r\n            ) {\r\n                trimmed = initialPolygon.slice(0, -1);\r\n            }\r\n\r\n            const converted = trimmed.map(([lat, lng]) => ({ lat, lng }));\r\n            setPaths(converted);\r\n\r\n            if (mapRef.current && window.google) {\r\n                const bounds = new window.google.maps.LatLngBounds();\r\n                converted.forEach(point => bounds.extend(point));\r\n                mapRef.current.fitBounds(bounds);\r\n            }\r\n        }\r\n    }, [initialPolygon]);\r\n\r\n\r\n\r\n\r\n    const handleClick = useCallback((event) => {\r\n        const newPoint = {\r\n            lat: parseFloat(event.latLng.lat().toFixed(6)),\r\n            lng: parseFloat(event.latLng.lng().toFixed(6)),\r\n        };\r\n        setPaths(prev => {\r\n            const newPaths = [...prev, newPoint];\r\n            onPolygonComplete(newPaths.map(p => [p.lat, p.lng]));\r\n            return newPaths;\r\n        });\r\n\r\n\r\n    }, []);\r\n\r\n\r\n    const updateManualCoords = (newPaths) => {\r\n        if (setManualCoordsFromMap && newPaths.length > 0) {\r\n            const coordsText = newPaths\r\n                .map((point) => `[${point.lat}, ${point.lng}]`)\r\n                .join(\",\\n\");\r\n            setManualCoordsFromMap(coordsText);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        updateManualCoords(paths);\r\n    }, [paths]);\r\n\r\n\r\n    const handleReset = () => {\r\n        setPaths([]);\r\n        if (setManualCoordsFromMap) {\r\n            setManualCoordsFromMap(\"\");\r\n        }\r\n        polygonRef.current = null;\r\n    };\r\n\r\n\r\n    const onEdit = () => {\r\n        if (!polygonRef.current) return;\r\n        const path = polygonRef.current.getPath();\r\n        const updated = [];\r\n        for (let i = 0; i < path.getLength(); i++) {\r\n            const point = path.getAt(i);\r\n            updated.push({\r\n                lat: parseFloat(point.lat().toFixed(6)),\r\n                lng: parseFloat(point.lng().toFixed(6)),\r\n            });\r\n        }\r\n        setPaths(updated);\r\n        updateManualCoords(updated);\r\n        onPolygonComplete(updated.map(p => [p.lat, p.lng]));\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full h-full relative\">\r\n            <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                center={center}\r\n                zoom={6}\r\n                onClick={handleClick}\r\n                onLoad={(map) => (mapRef.current = map)}\r\n            >\r\n                {paths.length > 0 && (\r\n                    <Polygon\r\n                        path={paths}\r\n                        options={{\r\n                            fillColor: \"#00FF00\",\r\n                            fillOpacity: 0.3,\r\n                            strokeColor: \"#00AA00\",\r\n                            strokeOpacity: 1,\r\n                            strokeWeight: 2,\r\n                            editable: true,\r\n                            draggable: false,\r\n                        }}\r\n                        onMouseUp={onEdit}\r\n                        onDragEnd={onEdit}\r\n                        onLoad={(polygon) => (polygonRef.current = polygon)}\r\n                    />\r\n                )}\r\n            </GoogleMap>\r\n\r\n            <div className=\"absolute bottom-2 right-2 flex gap-2\">\r\n\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"bg-red-500 text-white px-3 py-1 rounded text-sm shadow-md\"\r\n                    onClick={handleReset}\r\n                >\r\n                    {t('reset')}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapPolygonPicker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}