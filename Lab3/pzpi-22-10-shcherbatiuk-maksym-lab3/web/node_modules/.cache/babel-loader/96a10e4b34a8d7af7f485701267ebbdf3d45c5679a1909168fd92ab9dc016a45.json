{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\AnalyticsField.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../utils/api';\nimport Chartist from 'chartist';\nimport 'chartist/dist/chartist.min.css';\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AnalyticsField = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [timeRange, setTimeRange] = useState('7d');\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    t\n  } = useTranslation(); // Assuming i18n instance is not directly used in this snippet\n  const chartContainerRef = useRef(null);\n  const [isFieldSelectedAndReady, setIsFieldSelectedAndReady] = useState(false); // New state\n\n  const selectField = useCallback(async fieldId => {\n    if (!fieldId) return;\n    // setIsLoading and setError will be handled by the calling effect\n    try {\n      await api.post('/fields/select/', {\n        fieldId\n      });\n      // No need to return true explicitly unless used elsewhere\n    } catch (err) {\n      console.error('Помилка при виборі поля:', err);\n      throw err; // Re-throw to be caught by the calling useEffect\n    }\n  }, []);\n  const deselectField = useCallback(async fieldId => {\n    if (!fieldId) return;\n    try {\n      await api.post('/fields/deselect/', {\n        fieldId\n      });\n    } catch (err) {\n      console.error('Помилка при деселекті поля:', err);\n    }\n  }, []);\n  const fetchData = useCallback(async () => {\n    if (!id) {\n      // Guard clause: if no id, don't fetch\n      setChartData(null);\n      setError(null);\n      return;\n    }\n    console.log(`Workspaceing data for field ${id} and timeRange ${timeRange}`);\n    setIsLoading(true);\n    setError(null);\n    // setChartData(null); // Clear previous data at the start of a new fetch\n\n    try {\n      const response = await api.get(`/field-measurements/chart/${timeRange}`);\n      setChartData(response.data);\n    } catch (err) {\n      console.error('Помилка при завантаженні аналітики:', err);\n      setError('Не вдалося завантажити дані.');\n      setChartData(null); // Ensure chartData is null on error\n    } finally {\n      setIsLoading(false);\n    }\n  }, [id, timeRange]); // Added 'id' as a dependency\n\n  // Effect to handle field selection when 'id' changes\n  useEffect(() => {\n    if (!id) {\n      setIsFieldSelectedAndReady(false);\n      setChartData(null); // Clear data if ID is removed/null\n      setError(null);\n      return;\n    }\n    const doSelect = async () => {\n      setIsLoading(true); // For the selection process itself\n      setError(null);\n      setIsFieldSelectedAndReady(false); // Reset ready state\n      try {\n        await selectField(id);\n        setIsFieldSelectedAndReady(true); // Signal that field selection is complete\n      } catch (err) {\n        setError('Не вдалося вибрати поле.');\n        setIsFieldSelectedAndReady(false);\n        setChartData(null); // Clear chart data on selection error\n      } finally {\n        setIsLoading(false); // End loading for selection process\n      }\n    };\n    doSelect();\n    return () => {\n      if (id) {\n        // Only deselect if an id was processed\n        deselectField(id);\n      }\n      setIsFieldSelectedAndReady(false); // Reset on unmount or id change\n    };\n  }, [id, selectField, deselectField]);\n\n  // Effect to fetch data once field is selected/ready OR when timeRange changes\n  useEffect(() => {\n    if (id && isFieldSelectedAndReady) {\n      fetchData();\n    } else if (!id) {\n      // If id becomes null (e.g., navigation away or error)\n      setChartData(null);\n      setError(null);\n    }\n    // If !isFieldSelectedAndReady but 'id' is present,\n    // it means selection is in progress or failed. fetchData won't run, which is correct.\n  }, [id, isFieldSelectedAndReady, timeRange, fetchData]); // fetchData is a dependency\n\n  // This useEffect for rendering charts seems correct and should remain as is.\n  useEffect(() => {\n    if (!chartData || !chartContainerRef.current) {\n      // Optional: Clear any existing charts if chartData is null\n      // This depends on how Chartist handles empty data or element clearing.\n      // For example, you might need to explicitly destroy old chart instances\n      // or clear the container's innerHTML if Chartist doesn't do it.\n      if (chartContainerRef.current) {\n        // Example: Clear existing charts if any\n        // This is a simplified placeholder; actual Chartist cleanup might be different.\n        // document.getElementById('overall-chart').innerHTML = '';\n        // chartData?.aggregatedData?.forEach(sensor => {\n        //    document.getElementById(`chart-${sensor.sensorId}`).innerHTML = '';\n        // });\n      }\n      return;\n    }\n    ;\n\n    // Персональні графіки по сенсорах\n    chartData.aggregatedData.forEach(sensor => {\n      const containerId = `chart-${sensor.sensorId}`;\n      const chartElement = document.getElementById(containerId);\n      if (!chartElement) return; // Ensure element exists\n\n      // Clear previous chart if Chartist doesn't replace/update cleanly\n      // chartElement.innerHTML = ''; // Or use Chartist's detach/destroy method if available\n\n      const labels = sensor.data.map(entry => {\n        const date = new Date(entry.timestamp || entry.createdAt);\n        return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n      });\n      const values = sensor.data.map(entry => entry.value);\n      new Chartist.Line(`#${containerId}`, {\n        labels,\n        series: [values]\n      }, {\n        fullWidth: true,\n        chartPadding: {\n          right: 40\n        },\n        axisX: {\n          showGrid: false,\n          labelInterpolationFnc: (value, index) => index % 3 === 0 ? value : null\n        }\n      });\n    });\n\n    // Загальний графік\n    const overallChartElement = document.getElementById('overall-chart');\n    if (!overallChartElement) return; // Ensure element exists\n    // overallChartElement.innerHTML = ''; // Clear previous chart\n\n    const sensorTypesMap = {};\n    chartData.aggregatedData.forEach(sensor => {\n      sensor.data.forEach(entry => {\n        const timeKey = new Date(entry.timestamp || entry.createdAt).toISOString().slice(0, 16);\n        if (!sensorTypesMap[sensor.sensorType]) sensorTypesMap[sensor.sensorType] = {};\n        if (!sensorTypesMap[sensor.sensorType][timeKey]) {\n          sensorTypesMap[sensor.sensorType][timeKey] = [];\n        }\n        sensorTypesMap[sensor.sensorType][timeKey].push(entry.value);\n      });\n    });\n    const allTimestamps = Array.from(new Set(Object.values(sensorTypesMap).flatMap(typeData => Object.keys(typeData)))).sort();\n    const labels = allTimestamps.map(ts => {\n      const date = new Date(ts);\n      return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n    });\n    const series = Object.keys(sensorTypesMap).map(sensorType => {\n      return allTimestamps.map(ts => {\n        const values = sensorTypesMap[sensorType][ts];\n        if (!values || values.length === 0) return null;\n        const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n        return +avg.toFixed(2);\n      });\n    });\n    new Chartist.Line('#overall-chart', {\n      labels,\n      series\n    }, {\n      fullWidth: true,\n      chartPadding: {\n        right: 40\n      },\n      axisX: {\n        showGrid: false,\n        labelInterpolationFnc: (value, index) => index % 1 === 0 ? value : null\n      },\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0.2\n      })\n    });\n  }, [chartData]); // Keep dependency on chartData\n\n  const handleTimeRangeChange = range => {\n    if (range !== timeRange && !isLoading) {\n      setTimeRange(range);\n    }\n  };\n\n  // JSX rendering part (ensure error messages and loading indicators are shown correctly)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-content\",\n    className: \"w-full flex-1 bg-gray-100 p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white shadow rounded-lg p-4 md:p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center border-b border-gray-200 pb-3 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-xl font-bold text-gray-900\",\n            children: [\"\\u0410\\u043D\\u0430\\u043B\\u0456\\u0442\\u0438\\u043A\\u0430 \\u0432\\u0438\\u043C\\u0456\\u0440\\u044E\\u0432\\u0430\\u043D\\u044C \", id ? `для поля ID: ${id}` : '(Поле не вибрано)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-2\",\n            children: ['7d', '6m', '1y'].map(range => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleTimeRangeChange(range),\n              disabled: isLoading,\n              className: `px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ease-in-out ${timeRange === range ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`,\n              children: range.toUpperCase()\n            }, range, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-blue-600\",\n          children: \"\\u0417\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0434\\u0430\\u043D\\u0438\\u0445...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 35\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-600\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 31\n        }, this), chartData && !error &&\n        /*#__PURE__*/\n        // Only render charts if data is present AND no error\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"font-semibold text-lg mb-2\",\n              children: t(`general_analytics`)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"overall-chart\",\n              className: \"ct-chart ct-major-twelfth\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              className: \"font-semibold text-lg mb-2\",\n              children: t(`aggregated_data`)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: chartData.aggregatedData.map(sensor => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-4 bg-gray-50 rounded shadow-sm\",\n                children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                  className: \"font-bold\",\n                  children: sensor.sensorType\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Min:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 48\n                  }, this), \" \", sensor.min]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Max:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 259,\n                    columnNumber: 48\n                  }, this), \" \", sensor.max]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Avg:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 48\n                  }, this), \" \", sensor.average]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  id: `chart-${sensor.sensorId}`,\n                  className: \"ct-chart ct-major-tenth mt-4\",\n                  style: {\n                    height: '300px'\n                  }\n                  // ref={chartContainerRef} // ref is used for the Chartist useEffect, not individual divs here\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 45\n                }, this)]\n              }, sensor.sensorId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), id && !chartData && !error && !isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u041D\\u0435\\u043C\\u0430\\u0454 \\u0434\\u0430\\u043D\\u0438\\u0445 \\u0434\\u043B\\u044F \\u0432\\u0456\\u0434\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 66\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 9\n  }, this);\n};\n_s(AnalyticsField, \"igZOAz9/dEiJHxOxIJd25yjitEM=\", false, function () {\n  return [useParams, useTranslation];\n});\n_c = AnalyticsField;\nexport default AnalyticsField;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsField\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useParams","api","Chartist","useTranslation","jsxDEV","_jsxDEV","Fragment","_Fragment","AnalyticsField","_s","id","timeRange","setTimeRange","chartData","setChartData","isLoading","setIsLoading","error","setError","t","chartContainerRef","isFieldSelectedAndReady","setIsFieldSelectedAndReady","selectField","fieldId","post","err","console","deselectField","fetchData","log","response","get","data","doSelect","current","aggregatedData","forEach","sensor","containerId","sensorId","chartElement","document","getElementById","labels","map","entry","date","Date","timestamp","createdAt","getDate","toString","padStart","getMonth","values","value","Line","series","fullWidth","chartPadding","right","axisX","showGrid","labelInterpolationFnc","index","overallChartElement","sensorTypesMap","timeKey","toISOString","slice","sensorType","push","allTimestamps","Array","from","Set","Object","flatMap","typeData","keys","sort","ts","length","avg","reduce","sum","val","toFixed","lineSmooth","Interpolation","cardinal","tension","handleTimeRangeChange","range","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","toUpperCase","min","max","average","style","height","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/AnalyticsField.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport api from '../utils/api';\r\nimport Chartist from 'chartist';\r\nimport 'chartist/dist/chartist.min.css';\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst AnalyticsField = () => {\r\n    const { id } = useParams();\r\n    const [timeRange, setTimeRange] = useState('7d');\r\n    const [chartData, setChartData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const { t } = useTranslation(); // Assuming i18n instance is not directly used in this snippet\r\n    const chartContainerRef = useRef(null);\r\n    const [isFieldSelectedAndReady, setIsFieldSelectedAndReady] = useState(false); // New state\r\n\r\n    const selectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) return;\r\n        // setIsLoading and setError will be handled by the calling effect\r\n        try {\r\n            await api.post('/fields/select/', { fieldId });\r\n            // No need to return true explicitly unless used elsewhere\r\n        } catch (err) {\r\n            console.error('Помилка при виборі поля:', err);\r\n            throw err; // Re-throw to be caught by the calling useEffect\r\n        }\r\n    }, []);\r\n\r\n    const deselectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) return;\r\n        try {\r\n            await api.post('/fields/deselect/', { fieldId });\r\n        } catch (err) {\r\n            console.error('Помилка при деселекті поля:', err);\r\n        }\r\n    }, []);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        if (!id) { // Guard clause: if no id, don't fetch\r\n            setChartData(null);\r\n            setError(null);\r\n            return;\r\n        }\r\n\r\n        console.log(`Workspaceing data for field ${id} and timeRange ${timeRange}`);\r\n        setIsLoading(true);\r\n        setError(null);\r\n        // setChartData(null); // Clear previous data at the start of a new fetch\r\n\r\n        try {\r\n            const response = await api.get(`/field-measurements/chart/${timeRange}`);\r\n            setChartData(response.data);\r\n        } catch (err) {\r\n            console.error('Помилка при завантаженні аналітики:', err);\r\n            setError('Не вдалося завантажити дані.');\r\n            setChartData(null); // Ensure chartData is null on error\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [id, timeRange]); // Added 'id' as a dependency\r\n\r\n    // Effect to handle field selection when 'id' changes\r\n    useEffect(() => {\r\n        if (!id) {\r\n            setIsFieldSelectedAndReady(false);\r\n            setChartData(null); // Clear data if ID is removed/null\r\n            setError(null);\r\n            return;\r\n        }\r\n\r\n        const doSelect = async () => {\r\n            setIsLoading(true); // For the selection process itself\r\n            setError(null);\r\n            setIsFieldSelectedAndReady(false); // Reset ready state\r\n            try {\r\n                await selectField(id);\r\n                setIsFieldSelectedAndReady(true); // Signal that field selection is complete\r\n            } catch (err) {\r\n                setError('Не вдалося вибрати поле.');\r\n                setIsFieldSelectedAndReady(false);\r\n                setChartData(null); // Clear chart data on selection error\r\n            } finally {\r\n                setIsLoading(false); // End loading for selection process\r\n            }\r\n        };\r\n\r\n        doSelect();\r\n\r\n        return () => {\r\n            if (id) { // Only deselect if an id was processed\r\n                deselectField(id);\r\n            }\r\n            setIsFieldSelectedAndReady(false); // Reset on unmount or id change\r\n        };\r\n    }, [id, selectField, deselectField]);\r\n\r\n    // Effect to fetch data once field is selected/ready OR when timeRange changes\r\n    useEffect(() => {\r\n        if (id && isFieldSelectedAndReady) {\r\n            fetchData();\r\n        } else if (!id) { // If id becomes null (e.g., navigation away or error)\r\n            setChartData(null);\r\n            setError(null);\r\n        }\r\n        // If !isFieldSelectedAndReady but 'id' is present,\r\n        // it means selection is in progress or failed. fetchData won't run, which is correct.\r\n    }, [id, isFieldSelectedAndReady, timeRange, fetchData]); // fetchData is a dependency\r\n\r\n    // This useEffect for rendering charts seems correct and should remain as is.\r\n    useEffect(() => {\r\n        if (!chartData || !chartContainerRef.current) {\r\n            // Optional: Clear any existing charts if chartData is null\r\n            // This depends on how Chartist handles empty data or element clearing.\r\n            // For example, you might need to explicitly destroy old chart instances\r\n            // or clear the container's innerHTML if Chartist doesn't do it.\r\n            if (chartContainerRef.current) {\r\n                // Example: Clear existing charts if any\r\n                // This is a simplified placeholder; actual Chartist cleanup might be different.\r\n                // document.getElementById('overall-chart').innerHTML = '';\r\n                // chartData?.aggregatedData?.forEach(sensor => {\r\n                //    document.getElementById(`chart-${sensor.sensorId}`).innerHTML = '';\r\n                // });\r\n            }\r\n            return;\r\n        };\r\n\r\n        // Персональні графіки по сенсорах\r\n        chartData.aggregatedData.forEach(sensor => {\r\n            const containerId = `chart-${sensor.sensorId}`;\r\n            const chartElement = document.getElementById(containerId);\r\n            if (!chartElement) return; // Ensure element exists\r\n\r\n            // Clear previous chart if Chartist doesn't replace/update cleanly\r\n            // chartElement.innerHTML = ''; // Or use Chartist's detach/destroy method if available\r\n\r\n            const labels = sensor.data.map(entry => {\r\n                const date = new Date(entry.timestamp || entry.createdAt);\r\n                return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1)\r\n                    .toString()\r\n                    .padStart(2, '0')}`;\r\n            });\r\n            const values = sensor.data.map(entry => entry.value);\r\n\r\n            new Chartist.Line(`#${containerId}`, {\r\n                labels,\r\n                series: [values],\r\n            }, {\r\n                fullWidth: true,\r\n                chartPadding: { right: 40 },\r\n                axisX: {\r\n                    showGrid: false,\r\n                    labelInterpolationFnc: (value, index) => index % 3 === 0 ? value : null,\r\n                }\r\n            });\r\n        });\r\n\r\n        // Загальний графік\r\n        const overallChartElement = document.getElementById('overall-chart');\r\n        if (!overallChartElement) return; // Ensure element exists\r\n        // overallChartElement.innerHTML = ''; // Clear previous chart\r\n\r\n        const sensorTypesMap = {};\r\n        chartData.aggregatedData.forEach(sensor => {\r\n            sensor.data.forEach(entry => {\r\n                const timeKey = new Date(entry.timestamp || entry.createdAt).toISOString().slice(0, 16);\r\n                if (!sensorTypesMap[sensor.sensorType]) sensorTypesMap[sensor.sensorType] = {};\r\n                if (!sensorTypesMap[sensor.sensorType][timeKey]) {\r\n                    sensorTypesMap[sensor.sensorType][timeKey] = [];\r\n                }\r\n                sensorTypesMap[sensor.sensorType][timeKey].push(entry.value);\r\n            });\r\n        });\r\n\r\n        const allTimestamps = Array.from(\r\n            new Set(Object.values(sensorTypesMap).flatMap(typeData => Object.keys(typeData)))\r\n        ).sort();\r\n\r\n        const labels = allTimestamps.map(ts => {\r\n            const date = new Date(ts);\r\n            return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;\r\n        });\r\n\r\n        const series = Object.keys(sensorTypesMap).map(sensorType => {\r\n            return allTimestamps.map(ts => {\r\n                const values = sensorTypesMap[sensorType][ts];\r\n                if (!values || values.length === 0) return null;\r\n                const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\r\n                return +avg.toFixed(2);\r\n            });\r\n        });\r\n\r\n        new Chartist.Line('#overall-chart', {\r\n            labels,\r\n            series,\r\n        }, {\r\n            fullWidth: true,\r\n            chartPadding: { right: 40 },\r\n            axisX: {\r\n                showGrid: false,\r\n                labelInterpolationFnc: (value, index) => index % 1 === 0 ? value : null,\r\n            },\r\n            lineSmooth: Chartist.Interpolation.cardinal({\r\n                tension: 0.2\r\n            })\r\n        });\r\n    }, [chartData]); // Keep dependency on chartData\r\n\r\n    const handleTimeRangeChange = (range) => {\r\n        if (range !== timeRange && !isLoading) {\r\n            setTimeRange(range);\r\n        }\r\n    };\r\n\r\n    // JSX rendering part (ensure error messages and loading indicators are shown correctly)\r\n    return (\r\n        <div id=\"main-content\" className=\"w-full flex-1 bg-gray-100 p-6\">\r\n            <div className=\"max-w-7xl mx-auto\">\r\n                <div className=\"bg-white shadow rounded-lg p-4 md:p-6\">\r\n                    <div className=\"flex justify-between items-center border-b border-gray-200 pb-3 mb-4\">\r\n                        <h5 className=\"text-xl font-bold text-gray-900\">\r\n                            Аналітика вимірювань {id ? `для поля ID: ${id}` : '(Поле не вибрано)'}\r\n                        </h5>\r\n                        <div className=\"flex space-x-2\">\r\n                            {['7d', '6m', '1y'].map(range => (\r\n                                <button\r\n                                    key={range}\r\n                                    onClick={() => handleTimeRangeChange(range)}\r\n                                    disabled={isLoading}\r\n                                    className={`px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ease-in-out ${\r\n                                        timeRange === range\r\n                                            ? 'bg-blue-600 text-white hover:bg-blue-700'\r\n                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n                                    } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n                                >\r\n                                    {range.toUpperCase()}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {isLoading && <p className=\"text-blue-600\">Завантаження даних...</p>}\r\n                    {error && <p className=\"text-red-600\">{error}</p>}\r\n\r\n                    {/* Conditional rendering for charts based on chartData and no error */}\r\n                    {chartData && !error && ( // Only render charts if data is present AND no error\r\n                        <>\r\n                            <div className=\"mb-8\">\r\n                                <h6 className=\"font-semibold text-lg mb-2\">{t(`general_analytics`)}</h6>\r\n                                <div id=\"overall-chart\" className=\"ct-chart ct-major-twelfth\"></div>\r\n                            </div>\r\n                            <div>\r\n                                <h6 className=\"font-semibold text-lg mb-2\">{t(`aggregated_data`)}</h6>\r\n                                <div className=\"space-y-4\">\r\n                                    {chartData.aggregatedData.map(sensor => (\r\n                                        <div key={sensor.sensorId} className=\"p-4 bg-gray-50 rounded shadow-sm\">\r\n                                            <h6 className=\"font-bold\">{sensor.sensorType}</h6>\r\n                                            <p><strong>Min:</strong> {sensor.min}</p>\r\n                                            <p><strong>Max:</strong> {sensor.max}</p>\r\n                                            <p><strong>Avg:</strong> {sensor.average}</p>\r\n                                            <div\r\n                                                id={`chart-${sensor.sensorId}`}\r\n                                                className=\"ct-chart ct-major-tenth mt-4\"\r\n                                                style={{ height: '300px' }}\r\n                                                // ref={chartContainerRef} // ref is used for the Chartist useEffect, not individual divs here\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                    {/* If there's an id but no chartData and no error, and not loading, it means selection might still be happening or data is empty. */}\r\n                    {id && !chartData && !error && !isLoading && <p>Немає даних для відображення.</p>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalyticsField;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}