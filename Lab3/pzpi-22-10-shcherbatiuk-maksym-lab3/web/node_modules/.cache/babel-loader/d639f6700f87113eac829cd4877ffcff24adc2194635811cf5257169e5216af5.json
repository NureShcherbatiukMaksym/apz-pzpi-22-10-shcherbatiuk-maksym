{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, provider, signInWithPopup } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n  const handleLogin = async (email, password) => {\n    try {\n      // Встановлюємо withCredentials: true для підтримки куків\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true // Це важливо!\n      });\n      console.log('Login success:', res.data);\n      navigate('/dashboard');\n    } catch (err) {\n      var _err$response, _err$response$data;\n      alert('Помилка входу: ' + ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message);\n    }\n  };\n  const handleGoogleLogin = async () => {\n    try {\n      const result = await signInWithPopup(auth, provider);\n      const token = await result.user.getIdToken(); // Отримуємо Firebase token\n\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('Google login success:', res.data);\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Google login error:', error);\n      alert('Помилка авторизації через Google');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: \"login\",\n    onSubmit: handleGoogleLogin\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: \"login\",\n    onSubmit: handleLogin\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 12\n  }, this);\n}\n_s(LoginPage, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["AuthForm","api","useNavigate","auth","provider","signInWithPopup","jsxDEV","_jsxDEV","LoginPage","_s","navigate","handleLogin","email","password","res","post","withCredentials","console","log","data","err","_err$response","_err$response$data","alert","response","message","handleGoogleLogin","result","token","user","getIdToken","error","type","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["import AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { auth, provider, signInWithPopup } from '../firebase';\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate();\r\n\r\n    const handleLogin = async (email, password) => {\r\n        try {\r\n            // Встановлюємо withCredentials: true для підтримки куків\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true  // Це важливо!\r\n            });\r\n            console.log('Login success:', res.data);\r\n            navigate('/dashboard');\r\n        } catch (err) {\r\n            alert('Помилка входу: ' + err.response?.data?.message || err.message);\r\n        }\r\n    };\r\n\r\n    const handleGoogleLogin = async () => {\r\n        try {\r\n            const result = await signInWithPopup(auth, provider);\r\n            const token = await result.user.getIdToken(); // Отримуємо Firebase token\r\n\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('Google login success:', res.data);\r\n            navigate('/dashboard');\r\n        } catch (error) {\r\n            console.error('Google login error:', error);\r\n            alert('Помилка авторизації через Google');\r\n        }\r\n    };\r\n\r\n    return <AuthForm type=\"login\" onSubmit={handleGoogleLogin} />;\r\n    return <AuthForm type=\"login\" onSubmit={handleLogin} />;\r\n}"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,GAAG,MAAM,cAAc;AAC9B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,IAAI,EAAEC,QAAQ,EAAEC,eAAe,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC3C,IAAI;MACA;MACA,MAAMC,GAAG,GAAG,MAAMb,GAAG,CAACc,IAAI,CAAC,sBAAsB,EAAE;QAAEH,KAAK;QAAEC;MAAS,CAAC,EAAE;QACpEG,eAAe,EAAE,IAAI,CAAE;MAC3B,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,GAAG,CAACK,IAAI,CAAC;MACvCT,QAAQ,CAAC,YAAY,CAAC;IAC1B,CAAC,CAAC,OAAOU,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACVC,KAAK,CAAC,iBAAiB,KAAAF,aAAA,GAAGD,GAAG,CAACI,QAAQ,cAAAH,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcF,IAAI,cAAAG,kBAAA,uBAAlBA,kBAAA,CAAoBG,OAAO,KAAIL,GAAG,CAACK,OAAO,CAAC;IACzE;EACJ,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACA,MAAMC,MAAM,GAAG,MAAMtB,eAAe,CAACF,IAAI,EAAEC,QAAQ,CAAC;MACpD,MAAMwB,KAAK,GAAG,MAAMD,MAAM,CAACE,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;;MAE9C,MAAMhB,GAAG,GAAG,MAAMb,GAAG,CAACc,IAAI,CAAC,oBAAoB,EAAE;QAAEa;MAAM,CAAC,EAAE;QAAEZ,eAAe,EAAE;MAAK,CAAC,CAAC;MACtFC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,GAAG,CAACK,IAAI,CAAC;MAC9CT,QAAQ,CAAC,YAAY,CAAC;IAC1B,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACZd,OAAO,CAACc,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3CR,KAAK,CAAC,kCAAkC,CAAC;IAC7C;EACJ,CAAC;EAED,oBAAOhB,OAAA,CAACP,QAAQ;IAACgC,IAAI,EAAC,OAAO;IAACC,QAAQ,EAAEP;EAAkB;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAC7D,oBAAO9B,OAAA,CAACP,QAAQ;IAACgC,IAAI,EAAC,OAAO;IAACC,QAAQ,EAAEtB;EAAY;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3D;AAAC5B,EAAA,CAhCuBD,SAAS;EAAA,QACZN,WAAW;AAAA;AAAAoC,EAAA,GADR9B,SAAS;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}