{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$();\n// contexts/UserContext.js\nimport React, { createContext, useState, useEffect, useCallback, useRef } from 'react';\nimport api, { setUnauthorizedCallback } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(() => {\n    const storedUserName = localStorage.getItem('userName');\n    return storedUserName ? {\n      name: storedUserName\n    } : null;\n  });\n  const [isAdmin, setIsAdmin] = useState(() => localStorage.getItem('isAdmin') === 'true');\n  const [hasDevice, setHasDevice] = useState(false);\n  const [loadingDevice, setLoadingDevice] = useState(false);\n  const [loadingInitial, setLoadingInitial] = useState(true);\n  const [error, setError] = useState(null);\n  const isInitialCheckDone = useRef(false);\n  const checkDeviceStatus = useCallback(async currentUser => {\n    if (!currentUser || loadingDevice) {\n      if (!currentUser) setHasDevice(false); // Ensure hasDevice is false if no user\n      // No need to return early here if user is null, the async part won't run,\n      // but loadingDevice check prevents concurrent identical calls.\n      if (!currentUser && !loadingDevice) {\n        // If no user and not loading, explicitly set false\n        setHasDevice(false);\n        setLoadingDevice(false); // Ensure loading is false\n        return;\n      }\n      if (loadingDevice) return; // Prevent duplicate calls\n    }\n    setLoadingDevice(true);\n    console.log('Context: Performing device status check...');\n    try {\n      const devicesRes = await api.get('/user-iot-devices'); // <-- THIS IS RETURNING 404\n      const userHasDevice = devicesRes.data && devicesRes.data.length > 0;\n      setHasDevice(userHasDevice);\n      console.log(`Context: Device check successful. Has device: ${userHasDevice}.`);\n      setError(null); // Clear any previous error on success\n    } catch (err) {\n      var _err$response;\n      console.error('Context: Failed to fetch user devices:', err);\n      // Interceptor handles 401 -> logoutUser\n      // For *other* errors (like 404, 500, network issues),\n      // treat device availability as false and potentially set an error state.\n      if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) !== 401) {\n        setHasDevice(false); // Device is not available due to error\n        // Optionally set a specific error state related to device check failure\n        // setError(new Error('Не вдалося перевірити наявність пристроїв.'));\n      }\n      // else: 401 is handled by interceptor -> logoutUser which sets user=null, hasDevice=false\n    } finally {\n      setLoadingDevice(false); // Always finish loading\n    }\n  }, [user, loadingDevice]); // Keep dependency on user and loadingDevice\n\n  useEffect(() => {\n    if (isInitialCheckDone.current) {\n      console.log('Context: Initial check already done, skipping useEffect.');\n      return;\n    }\n    isInitialCheckDone.current = true;\n    console.log('Context: Starting initial check useEffect.');\n    const storedUserName = localStorage.getItem('userName');\n    const storedIsAdmin = localStorage.getItem('isAdmin') === 'true'; // Read isAdmin from LS initially\n\n    const initialUser = storedUserName ? {\n      name: storedUserName\n    } : null;\n    setUser(initialUser);\n    setIsAdmin(storedIsAdmin); // Set initial isAdmin state from LS\n\n    if (initialUser) {\n      // If user exists from LS, initiate the device check\n      console.log('Context: User found in localStorage, triggering initial device check.');\n      checkDeviceStatus(initialUser); // Pass the initial user object\n    } else {\n      // If no user in LS, set hasDevice to false explicitly and immediately\n      console.log('Context: No user in localStorage.');\n      setHasDevice(false);\n      setLoadingDevice(false); // Ensure device loading is not stuck true\n    }\n    setLoadingInitial(false);\n    console.log('Context: Initial check useEffect finished.');\n  }, [checkDeviceStatus]); // Dependency on checkDeviceStatus\n\n  const logoutUser = useCallback(async () => {\n    console.log('Context: logoutUser called.');\n    try {\n      console.log('Context: Attempting backend /auth/logout call (optional)...');\n      // await api.post('/auth/logout');\n      console.log('Context: Backend logout call finished (or skipped).');\n    } catch (err) {\n      console.error('Context: Failed to call backend logout API:', err);\n    } finally {\n      console.log('Context: Performing local logout cleanup.');\n      setUser(null);\n      setIsAdmin(false); // Clear isAdmin state\n      setHasDevice(false);\n      setLoadingDevice(false);\n      localStorage.removeItem('userName');\n      localStorage.removeItem('isAdmin');\n    }\n  }, []);\n  useEffect(() => {\n    console.log('Context: Setting API unauthorized callback.');\n    setUnauthorizedCallback(logoutUser);\n    return () => {\n      console.log('Context: Clearing API unauthorized callback.');\n      setUnauthorizedCallback(null);\n    };\n  }, [logoutUser]);\n  const handleLoginSuccess = useCallback(userDataFromLogin => {\n    console.log('Context: handleLoginSuccess called.');\n    setUser({\n      name: userDataFromLogin.name\n    });\n    setIsAdmin(userDataFromLogin.is_admin || false); // Set isAdmin from login response\n    setHasDevice(false); // Reset hasDevice until device check confirms\n    setError(null);\n    console.log('Context: Triggering device check after login success.');\n    checkDeviceStatus({\n      name: userDataFromLogin.name\n    }); // Trigger device check\n  }, [checkDeviceStatus]);\n  const contextValue = {\n    user,\n    isAdmin,\n    hasDevice,\n    loadingInitial,\n    loadingDevice,\n    error,\n    logoutUser,\n    handleLoginSuccess,\n    checkDeviceStatus\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProvider, \"4fqpSkl79DOVoeVhGq5IdNDRzl4=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useRef","api","setUnauthorizedCallback","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","storedUserName","localStorage","getItem","name","isAdmin","setIsAdmin","hasDevice","setHasDevice","loadingDevice","setLoadingDevice","loadingInitial","setLoadingInitial","error","setError","isInitialCheckDone","checkDeviceStatus","currentUser","console","log","devicesRes","get","userHasDevice","data","length","err","_err$response","response","status","current","storedIsAdmin","initialUser","logoutUser","removeItem","handleLoginSuccess","userDataFromLogin","is_admin","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/contexts/UserContext.js"],"sourcesContent":["// contexts/UserContext.js\r\nimport React, { createContext, useState, useEffect, useCallback, useRef } from 'react';\r\nimport api, { setUnauthorizedCallback } from '../utils/api';\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n    const [user, setUser] = useState(() => {\r\n        const storedUserName = localStorage.getItem('userName');\r\n        return storedUserName ? { name: storedUserName } : null;\r\n    });\r\n    const [isAdmin, setIsAdmin] = useState(() => localStorage.getItem('isAdmin') === 'true');\r\n    const [hasDevice, setHasDevice] = useState(false);\r\n    const [loadingDevice, setLoadingDevice] = useState(false);\r\n    const [loadingInitial, setLoadingInitial] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    const isInitialCheckDone = useRef(false);\r\n\r\n    const checkDeviceStatus = useCallback(async (currentUser) => {\r\n        if (!currentUser || loadingDevice) {\r\n            if (!currentUser) setHasDevice(false); // Ensure hasDevice is false if no user\r\n            // No need to return early here if user is null, the async part won't run,\r\n            // but loadingDevice check prevents concurrent identical calls.\r\n            if (!currentUser && !loadingDevice) { // If no user and not loading, explicitly set false\r\n                setHasDevice(false);\r\n                setLoadingDevice(false); // Ensure loading is false\r\n                return;\r\n            }\r\n            if(loadingDevice) return; // Prevent duplicate calls\r\n        }\r\n\r\n        setLoadingDevice(true);\r\n        console.log('Context: Performing device status check...');\r\n        try {\r\n            const devicesRes = await api.get('/user-iot-devices'); // <-- THIS IS RETURNING 404\r\n            const userHasDevice = devicesRes.data && devicesRes.data.length > 0;\r\n            setHasDevice(userHasDevice);\r\n            console.log(`Context: Device check successful. Has device: ${userHasDevice}.`);\r\n            setError(null); // Clear any previous error on success\r\n\r\n        } catch (err) {\r\n            console.error('Context: Failed to fetch user devices:', err);\r\n            // Interceptor handles 401 -> logoutUser\r\n            // For *other* errors (like 404, 500, network issues),\r\n            // treat device availability as false and potentially set an error state.\r\n            if (err.response?.status !== 401) {\r\n                setHasDevice(false); // Device is not available due to error\r\n                // Optionally set a specific error state related to device check failure\r\n                // setError(new Error('Не вдалося перевірити наявність пристроїв.'));\r\n            }\r\n            // else: 401 is handled by interceptor -> logoutUser which sets user=null, hasDevice=false\r\n        } finally {\r\n            setLoadingDevice(false); // Always finish loading\r\n        }\r\n    }, [user, loadingDevice]); // Keep dependency on user and loadingDevice\r\n\r\n\r\n    useEffect(() => {\r\n        if (isInitialCheckDone.current) {\r\n            console.log('Context: Initial check already done, skipping useEffect.');\r\n            return;\r\n        }\r\n\r\n        isInitialCheckDone.current = true;\r\n        console.log('Context: Starting initial check useEffect.');\r\n\r\n        const storedUserName = localStorage.getItem('userName');\r\n        const storedIsAdmin = localStorage.getItem('isAdmin') === 'true'; // Read isAdmin from LS initially\r\n\r\n        const initialUser = storedUserName ? { name: storedUserName } : null;\r\n\r\n        setUser(initialUser);\r\n        setIsAdmin(storedIsAdmin); // Set initial isAdmin state from LS\r\n\r\n\r\n        if (initialUser) {\r\n            // If user exists from LS, initiate the device check\r\n            console.log('Context: User found in localStorage, triggering initial device check.');\r\n            checkDeviceStatus(initialUser); // Pass the initial user object\r\n        } else {\r\n            // If no user in LS, set hasDevice to false explicitly and immediately\r\n            console.log('Context: No user in localStorage.');\r\n            setHasDevice(false);\r\n            setLoadingDevice(false); // Ensure device loading is not stuck true\r\n        }\r\n\r\n        setLoadingInitial(false);\r\n        console.log('Context: Initial check useEffect finished.');\r\n\r\n    }, [checkDeviceStatus]); // Dependency on checkDeviceStatus\r\n\r\n\r\n    const logoutUser = useCallback(async () => {\r\n        console.log('Context: logoutUser called.');\r\n        try {\r\n            console.log('Context: Attempting backend /auth/logout call (optional)...');\r\n            // await api.post('/auth/logout');\r\n            console.log('Context: Backend logout call finished (or skipped).');\r\n        } catch (err) {\r\n            console.error('Context: Failed to call backend logout API:', err);\r\n        } finally {\r\n            console.log('Context: Performing local logout cleanup.');\r\n            setUser(null);\r\n            setIsAdmin(false); // Clear isAdmin state\r\n            setHasDevice(false);\r\n            setLoadingDevice(false);\r\n            localStorage.removeItem('userName');\r\n            localStorage.removeItem('isAdmin');\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log('Context: Setting API unauthorized callback.');\r\n        setUnauthorizedCallback(logoutUser);\r\n        return () => {\r\n            console.log('Context: Clearing API unauthorized callback.');\r\n            setUnauthorizedCallback(null);\r\n        };\r\n    }, [logoutUser]);\r\n\r\n    const handleLoginSuccess = useCallback((userDataFromLogin) => {\r\n        console.log('Context: handleLoginSuccess called.');\r\n        setUser({ name: userDataFromLogin.name });\r\n        setIsAdmin(userDataFromLogin.is_admin || false); // Set isAdmin from login response\r\n        setHasDevice(false); // Reset hasDevice until device check confirms\r\n        setError(null);\r\n\r\n        console.log('Context: Triggering device check after login success.');\r\n        checkDeviceStatus({ name: userDataFromLogin.name }); // Trigger device check\r\n\r\n    }, [checkDeviceStatus]);\r\n\r\n\r\n    const contextValue = {\r\n        user,\r\n        isAdmin,\r\n        hasDevice,\r\n        loadingInitial,\r\n        loadingDevice,\r\n        error,\r\n        logoutUser,\r\n        handleLoginSuccess,\r\n        checkDeviceStatus,\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={contextValue}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}