{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$();\n// contexts/UserContext.js\nimport React, { createContext, useState, useEffect, useCallback, useRef } from 'react'; // Додано useRef\n// Імпортуємо лише setUnauthorizedCallback\nimport api, { setUnauthorizedCallback } from '../utils/api'; // ВИДАЛЕНО: setIsLoggingOut\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  // Початковий стан: ініціалізуємо з localStorage, припускаємо, що пристрою немає\n  const [user, setUser] = useState(() => {\n    const storedUserName = localStorage.getItem('userName');\n    const storedProfilePictureUrl = localStorage.getItem('userProfilePictureUrl');\n    return storedUserName ? {\n      name: storedUserName,\n      profile_picture_url: storedProfilePictureUrl || null\n    } : null;\n  });\n  const [isAdmin, setIsAdmin] = useState(() => localStorage.getItem('isAdmin') === 'true');\n  const [hasDevice, setHasDevice] = useState(false); // Статус пристрою невідомий при старті\n  // Loading для індикації процесу перевірки пристрою\n  const [loadingDevice, setLoadingDevice] = useState(false);\n  // Global loading для початкового завантаження контексту (читання LS + перша перевірка пристрою)\n  const [loadingInitial, setLoadingInitial] = useState(true); // Старт з true\n  const [error, setError] = useState(null); // Загальний стан помилки\n\n  // Реф для відстеження, чи була виконана початкова перевірка\n  const isInitialCheckDone = useRef(false);\n\n  // --- Функція перевірки наявності пристрою ---\n  // Ця функція не має залежати від loadingDevice для свого useCallback,\n  // оскільки вона сама керує цим станом. Вона залежить від `user`.\n  const checkDeviceStatus = useCallback(async currentUser => {\n    // Робимо перевірку лише якщо користувач виглядає залогіненим (присутній user об'єкт)\n    // і ми ще не перевіряємо його пристрій\n    // Використовуємо аргумент currentUser, який передається (або беремо поточний user зі scope)\n    if (!currentUser) {\n      console.log('Context: checkDeviceStatus skipped - user is null.');\n      setHasDevice(false); // Якщо user = null, пристрою точно немає\n      // setLoadingDevice(false); // Переконаємося, що loadingDevice також false\n      return; // Не виконуємо запит\n    }\n    // Перевіряємо loadingDevice тут, щоб уникнути повторних викликів, якщо вони якось накладаються\n    if (loadingDevice) {\n      console.log('Context: checkDeviceStatus skipped - already checking.');\n      return;\n    }\n    setLoadingDevice(true);\n    console.log('Context: Performing device status check...');\n    try {\n      const devicesRes = await api.get('/user-iot-devices');\n      const userHasDevice = devicesRes.data && devicesRes.data.length > 0;\n      setHasDevice(userHasDevice);\n      console.log(`Context: Device check successful. Has device: ${userHasDevice}.`);\n      // setError(null);\n    } catch (err) {\n      var _err$response;\n      console.error('Context: Failed to fetch user devices:', err);\n      // Перехоплювач обробить 401 і викличе logoutUser.\n      // Для інших помилок, вважаємо, що пристрій недоступний у цей момент.\n      if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) !== 401) {\n        setHasDevice(false); // Встановлюємо false при інших помилках\n        // setError(err); // Можна встановити помилку\n      }\n    } finally {\n      setLoadingDevice(false);\n    }\n  }, [user]); // Залежність тільки від user\n\n  // --- Початкова перевірка при монтуванні ---\n  // Використовуємо реф, щоб переконатися, що цей ефект виконується лише один раз\n  useEffect(() => {\n    if (isInitialCheckDone.current) {\n      console.log('Context: Initial check already done, skipping useEffect.');\n      return; // Виходимо, якщо перевірка вже була\n    }\n    isInitialCheckDone.current = true; // Позначаємо, що перевірка почалася\n    console.log('Context: Starting initial check useEffect.');\n    const storedUserName = localStorage.getItem('userName');\n    const initialUser = storedUserName ? {\n      name: storedUserName\n    } : null;\n\n    // Встановлюємо початковий стан користувача та адміністратора з LS\n    setUser(initialUser);\n    setIsAdmin(localStorage.getItem('isAdmin') === 'true');\n\n    // Якщо user об'єкт присутній (навіть з localStorage), запускаємо перевірку пристрою\n    if (initialUser) {\n      // Асинхронно викликаємо перевірку пристрою. checkDeviceStatus сама керує loadingDevice.\n      // Передаємо initialUser, щоб checkDeviceStatus мала актуальне значення user.\n      checkDeviceStatus(initialUser);\n    } else {\n      // Якщо user = null з самого початку, пристрою точно немає\n      setHasDevice(false);\n    }\n\n    // Початкове завантаження завершено після ініціалізації з LS та запуску (або пропуску) перевірки пристрою\n    // loadingDevice може ще бути true, якщо checkDeviceStatus запущено.\n    setLoadingInitial(false);\n    console.log('Context: Initial check useEffect finished.');\n  }, [checkDeviceStatus]); // Залежність від checkDeviceStatus\n\n  // --- Логіка Виходу ---\n  const logoutUser = useCallback(async () => {\n    console.log('Context: logoutUser called.');\n\n    // Опціонально: викликаємо endpoint для виходу на бекенді\n    // !!! ВАЖЛИВО: цей endpoint НЕ ПОВИНЕН повертати 401, який знову спрацює в перехоплювачі,\n    // коли сесія вже недійсна. Повинен повертати 200 або інший статус.\n    try {\n      console.log('Context: Attempting backend /auth/logout call (optional)...');\n      // await api.post('/auth/logout'); // Розкоментуйте, якщо маєте такий endpoint\n      console.log('Context: Backend logout call finished (or skipped).');\n    } catch (err) {\n      console.error('Context: Failed to call backend logout API:', err);\n    } finally {\n      // --- Очищення стану та localStorage ---\n      console.log('Context: Performing local logout cleanup.');\n      setUser(null);\n      setIsAdmin(false);\n      setHasDevice(false); // При виході пристрою точно немає\n      setLoadingDevice(false); // При виході скасовуємо будь-яке завантаження пристрою\n      localStorage.removeItem('userName');\n      localStorage.removeItem('isAdmin');\n      localStorage.removeItem('userProfilePictureUrl'); // <-- Видаляємо URL фото з localStorage\n\n      // localStorage.removeItem('token'); // Розкоментуйте, якщо зберігаєте токен у localStorage\n\n      // *** Немає isLoggingOut прапорця для скидання ***\n\n      // *** ВАЖЛИВО: Перенаправлення на /login сторінку відбувається в App (або роутері),\n      // який спостерігає за зміною стану 'user' на null. ***\n    }\n  }, []);\n\n  // --- Зв'язуємо logoutUser з перехоплювачем API ---\n  useEffect(() => {\n    console.log('Context: Setting API unauthorized callback.');\n    setUnauthorizedCallback(logoutUser);\n    return () => {\n      console.log('Context: Clearing API unauthorized callback.');\n      setUnauthorizedCallback(null);\n    };\n  }, [logoutUser]);\n\n  // --- Функція для обробки успіху логіну (викликається з LoginPage) ---\n  const handleLoginSuccess = useCallback(userDataFromLogin => {\n    console.log('Context: handleLoginSuccess called.');\n    // Оновлюємо стан користувача на основі даних з логіну\n    setUser({\n      name: userDataFromLogin.name\n    });\n    setIsAdmin(userDataFromLogin.is_admin || false);\n    // setHasDevice залишається false поки не завершиться checkDeviceStatus\n    setError(null); // Очищаємо помилки\n\n    // *** ЗАПУСКАЄМО ПЕРЕВІРКУ ПРИСТРОЮ ПІСЛЯ УСПІШНОГО ЛОГІНУ ***\n    // Оскільки setUser є асинхронним, передаємо актуальні дані user в checkDeviceStatus\n    // або покладаємося на те, що useCallback має доступ до актуального user зі scope.\n    // Передача аргумента currentUser в checkDeviceStatus є безпечнішою.\n    checkDeviceStatus({\n      name: userDataFromLogin.name\n    }); // Передаємо актуальний user об'єкт\n\n    // localStorage вже збережено в LoginPage.\n  }, [checkDeviceStatus]); // Залежність від checkDeviceStatus\n\n  // Значення контексту, що передається\n  const contextValue = {\n    user,\n    // null або { name: string }\n    isAdmin,\n    // boolean\n    hasDevice,\n    // boolean (статус пристрою)\n    loadingInitial,\n    // boolean (чи йде початкове завантаження контексту)\n    loadingDevice,\n    // boolean (чи йде перевірка пристрою)\n    error,\n    // any\n    logoutUser,\n    // Функція для виходу\n    handleLoginSuccess,\n    // Функція для LoginPage при успішному логіні\n    checkDeviceStatus // Може знадобитись деінде для оновлення статусу пристрою\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProvider, \"pnBOH2Q1Wa/jqVc69gMsq90Difk=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useRef","api","setUnauthorizedCallback","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","storedUserName","localStorage","getItem","storedProfilePictureUrl","name","profile_picture_url","isAdmin","setIsAdmin","hasDevice","setHasDevice","loadingDevice","setLoadingDevice","loadingInitial","setLoadingInitial","error","setError","isInitialCheckDone","checkDeviceStatus","currentUser","console","log","devicesRes","get","userHasDevice","data","length","err","_err$response","response","status","current","initialUser","logoutUser","removeItem","handleLoginSuccess","userDataFromLogin","is_admin","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/contexts/UserContext.js"],"sourcesContent":["// contexts/UserContext.js\r\nimport React, { createContext, useState, useEffect, useCallback, useRef } from 'react'; // Додано useRef\r\n// Імпортуємо лише setUnauthorizedCallback\r\nimport api, { setUnauthorizedCallback } from '../utils/api'; // ВИДАЛЕНО: setIsLoggingOut\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n    // Початковий стан: ініціалізуємо з localStorage, припускаємо, що пристрою немає\r\n    const [user, setUser] = useState(() => {\r\n        const storedUserName = localStorage.getItem('userName');\r\n        const storedProfilePictureUrl = localStorage.getItem('userProfilePictureUrl');\r\n        return storedUserName ? {\r\n            name: storedUserName,\r\n            profile_picture_url: storedProfilePictureUrl || null,\r\n        } : null;\r\n    });\r\n    const [isAdmin, setIsAdmin] = useState(() => localStorage.getItem('isAdmin') === 'true');\r\n    const [hasDevice, setHasDevice] = useState(false); // Статус пристрою невідомий при старті\r\n    // Loading для індикації процесу перевірки пристрою\r\n    const [loadingDevice, setLoadingDevice] = useState(false);\r\n    // Global loading для початкового завантаження контексту (читання LS + перша перевірка пристрою)\r\n    const [loadingInitial, setLoadingInitial] = useState(true); // Старт з true\r\n    const [error, setError] = useState(null); // Загальний стан помилки\r\n\r\n    // Реф для відстеження, чи була виконана початкова перевірка\r\n    const isInitialCheckDone = useRef(false);\r\n\r\n\r\n    // --- Функція перевірки наявності пристрою ---\r\n    // Ця функція не має залежати від loadingDevice для свого useCallback,\r\n    // оскільки вона сама керує цим станом. Вона залежить від `user`.\r\n    const checkDeviceStatus = useCallback(async (currentUser) => {\r\n        // Робимо перевірку лише якщо користувач виглядає залогіненим (присутній user об'єкт)\r\n        // і ми ще не перевіряємо його пристрій\r\n        // Використовуємо аргумент currentUser, який передається (або беремо поточний user зі scope)\r\n        if (!currentUser) {\r\n            console.log('Context: checkDeviceStatus skipped - user is null.');\r\n            setHasDevice(false); // Якщо user = null, пристрою точно немає\r\n            // setLoadingDevice(false); // Переконаємося, що loadingDevice також false\r\n            return; // Не виконуємо запит\r\n        }\r\n        // Перевіряємо loadingDevice тут, щоб уникнути повторних викликів, якщо вони якось накладаються\r\n        if (loadingDevice) {\r\n            console.log('Context: checkDeviceStatus skipped - already checking.');\r\n            return;\r\n        }\r\n\r\n\r\n        setLoadingDevice(true);\r\n        console.log('Context: Performing device status check...');\r\n        try {\r\n            const devicesRes = await api.get('/user-iot-devices');\r\n            const userHasDevice = devicesRes.data && devicesRes.data.length > 0;\r\n            setHasDevice(userHasDevice);\r\n            console.log(`Context: Device check successful. Has device: ${userHasDevice}.`);\r\n            // setError(null);\r\n\r\n        } catch (err) {\r\n            console.error('Context: Failed to fetch user devices:', err);\r\n            // Перехоплювач обробить 401 і викличе logoutUser.\r\n            // Для інших помилок, вважаємо, що пристрій недоступний у цей момент.\r\n            if (err.response?.status !== 401) {\r\n                setHasDevice(false); // Встановлюємо false при інших помилках\r\n                // setError(err); // Можна встановити помилку\r\n            }\r\n        } finally {\r\n            setLoadingDevice(false);\r\n        }\r\n    }, [user]); // Залежність тільки від user\r\n\r\n    // --- Початкова перевірка при монтуванні ---\r\n    // Використовуємо реф, щоб переконатися, що цей ефект виконується лише один раз\r\n    useEffect(() => {\r\n        if (isInitialCheckDone.current) {\r\n            console.log('Context: Initial check already done, skipping useEffect.');\r\n            return; // Виходимо, якщо перевірка вже була\r\n        }\r\n\r\n        isInitialCheckDone.current = true; // Позначаємо, що перевірка почалася\r\n        console.log('Context: Starting initial check useEffect.');\r\n\r\n        const storedUserName = localStorage.getItem('userName');\r\n        const initialUser = storedUserName ? { name: storedUserName } : null;\r\n\r\n        // Встановлюємо початковий стан користувача та адміністратора з LS\r\n        setUser(initialUser);\r\n        setIsAdmin(localStorage.getItem('isAdmin') === 'true');\r\n\r\n\r\n        // Якщо user об'єкт присутній (навіть з localStorage), запускаємо перевірку пристрою\r\n        if (initialUser) {\r\n            // Асинхронно викликаємо перевірку пристрою. checkDeviceStatus сама керує loadingDevice.\r\n            // Передаємо initialUser, щоб checkDeviceStatus мала актуальне значення user.\r\n            checkDeviceStatus(initialUser);\r\n        } else {\r\n            // Якщо user = null з самого початку, пристрою точно немає\r\n            setHasDevice(false);\r\n        }\r\n\r\n        // Початкове завантаження завершено після ініціалізації з LS та запуску (або пропуску) перевірки пристрою\r\n        // loadingDevice може ще бути true, якщо checkDeviceStatus запущено.\r\n        setLoadingInitial(false);\r\n        console.log('Context: Initial check useEffect finished.');\r\n\r\n    }, [checkDeviceStatus]); // Залежність від checkDeviceStatus\r\n\r\n\r\n    // --- Логіка Виходу ---\r\n    const logoutUser = useCallback(async () => {\r\n        console.log('Context: logoutUser called.');\r\n\r\n        // Опціонально: викликаємо endpoint для виходу на бекенді\r\n        // !!! ВАЖЛИВО: цей endpoint НЕ ПОВИНЕН повертати 401, який знову спрацює в перехоплювачі,\r\n        // коли сесія вже недійсна. Повинен повертати 200 або інший статус.\r\n        try {\r\n            console.log('Context: Attempting backend /auth/logout call (optional)...');\r\n            // await api.post('/auth/logout'); // Розкоментуйте, якщо маєте такий endpoint\r\n            console.log('Context: Backend logout call finished (or skipped).');\r\n        } catch (err) {\r\n            console.error('Context: Failed to call backend logout API:', err);\r\n        } finally {\r\n            // --- Очищення стану та localStorage ---\r\n            console.log('Context: Performing local logout cleanup.');\r\n            setUser(null);\r\n            setIsAdmin(false);\r\n            setHasDevice(false); // При виході пристрою точно немає\r\n            setLoadingDevice(false); // При виході скасовуємо будь-яке завантаження пристрою\r\n            localStorage.removeItem('userName');\r\n            localStorage.removeItem('isAdmin');\r\n            localStorage.removeItem('userProfilePictureUrl'); // <-- Видаляємо URL фото з localStorage\r\n\r\n            // localStorage.removeItem('token'); // Розкоментуйте, якщо зберігаєте токен у localStorage\r\n\r\n            // *** Немає isLoggingOut прапорця для скидання ***\r\n\r\n            // *** ВАЖЛИВО: Перенаправлення на /login сторінку відбувається в App (або роутері),\r\n            // який спостерігає за зміною стану 'user' на null. ***\r\n        }\r\n    }, []);\r\n\r\n    // --- Зв'язуємо logoutUser з перехоплювачем API ---\r\n    useEffect(() => {\r\n        console.log('Context: Setting API unauthorized callback.');\r\n        setUnauthorizedCallback(logoutUser);\r\n\r\n        return () => {\r\n            console.log('Context: Clearing API unauthorized callback.');\r\n            setUnauthorizedCallback(null);\r\n        };\r\n    }, [logoutUser]);\r\n\r\n\r\n    // --- Функція для обробки успіху логіну (викликається з LoginPage) ---\r\n    const handleLoginSuccess = useCallback((userDataFromLogin) => {\r\n        console.log('Context: handleLoginSuccess called.');\r\n        // Оновлюємо стан користувача на основі даних з логіну\r\n        setUser({ name: userDataFromLogin.name });\r\n        setIsAdmin(userDataFromLogin.is_admin || false);\r\n        // setHasDevice залишається false поки не завершиться checkDeviceStatus\r\n        setError(null); // Очищаємо помилки\r\n\r\n        // *** ЗАПУСКАЄМО ПЕРЕВІРКУ ПРИСТРОЮ ПІСЛЯ УСПІШНОГО ЛОГІНУ ***\r\n        // Оскільки setUser є асинхронним, передаємо актуальні дані user в checkDeviceStatus\r\n        // або покладаємося на те, що useCallback має доступ до актуального user зі scope.\r\n        // Передача аргумента currentUser в checkDeviceStatus є безпечнішою.\r\n        checkDeviceStatus({ name: userDataFromLogin.name }); // Передаємо актуальний user об'єкт\r\n\r\n        // localStorage вже збережено в LoginPage.\r\n\r\n    }, [checkDeviceStatus]); // Залежність від checkDeviceStatus\r\n\r\n\r\n    // Значення контексту, що передається\r\n    const contextValue = {\r\n        user, // null або { name: string }\r\n        isAdmin, // boolean\r\n        hasDevice, // boolean (статус пристрою)\r\n        loadingInitial, // boolean (чи йде початкове завантаження контексту)\r\n        loadingDevice, // boolean (чи йде перевірка пристрою)\r\n        error, // any\r\n        logoutUser, // Функція для виходу\r\n        handleLoginSuccess, // Функція для LoginPage при успішному логіні\r\n        checkDeviceStatus, // Може знадобитись деінде для оновлення статусу пристрою\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={contextValue}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}