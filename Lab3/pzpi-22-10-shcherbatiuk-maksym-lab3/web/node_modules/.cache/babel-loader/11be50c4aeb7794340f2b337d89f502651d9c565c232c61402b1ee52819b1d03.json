{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, googleProvider } from '../firebase';\nimport { signInWithPopup } from 'firebase/auth';\nimport { UserContext } from '../contexts/UserContext';\nimport AuthForm from '../components/AuthForm';\nimport LanguageSwitcher from '../components/LanguageSwitcher'; // <-- Імпортуємо перемикач\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    user,\n    handleLoginSuccess\n  } = useContext(UserContext);\n  const [loginInProgress, setLoginInProgress] = useState(false);\n  const [formError, setFormError] = useState(null);\n\n  // Перенаправлення, якщо користувач вже залогінений (це має відбуватися до рендерингу форми)\n  if (user) {\n    console.log('LoginPage: User is already logged in, navigating to /.');\n    navigate('/', {\n      replace: true\n    });\n    return null; // Не рендеримо нічого, якщо перенаправляємо\n  }\n\n  // --- Логіка стандартного логіну (email/password) ---\n  const handleLogin = async ({\n    email,\n    password\n  }) => {\n    setLoginInProgress(true);\n    setFormError(null); // Скидаємо помилку перед спробою\n    console.log('LoginPage: Attempting password login with data:', {\n      email,\n      password\n    });\n    try {\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Password login success. Response received.');\n      const {\n        user\n      } = res.data;\n\n      // Використовуємо handleLoginSuccess для оновлення контексту та localStorage\n      handleLoginSuccess(user);\n\n      // Перенаправляємо після успішного логіну (handleLoginSuccess не перенаправляє)\n      navigate('/'); // Наприклад, на головну сторінку\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('LoginPage: Password login error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Помилка входу';\n      setFormError(errorMessage); // Встановлюємо помилку форми\n      alert('Помилка входу: ' + errorMessage); // Також показуємо alert\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n\n  // --- Логіка логіну через Google ---\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true);\n    setFormError(null); // Скидаємо помилку перед спробою\n    console.log('LoginPage: Initiating Google sign-in popup.');\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      console.log('LoginPage: Firebase Google auth success. Token obtained.');\n      console.log('LoginPage: Sending Google token to backend /auth/login/google...');\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Backend Google login success. Response received.', res.data);\n      const {\n        user\n      } = res.data; // Отримуємо об'єкт user з відповіді\n\n      // Використовуємо handleLoginSuccess для оновлення контексту та localStorage\n      handleLoginSuccess(user);\n      navigate('/'); // Наприклад, на головну сторінку\n    } catch (error) {\n      console.error('LoginPage: Google login error:', error);\n      const errorMessage = error.message || 'Помилка авторизації через Google';\n      setFormError(errorMessage); // Встановлюємо помилку форми\n      alert('Помилка авторизації через Google: ' + errorMessage); // Також показуємо alert\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n\n  // Функція для переходу на сторінку реєстрації (використовується кнопкою перемикання)\n  const switchToRegister = () => {\n    navigate('/register');\n  };\n  return (\n    /*#__PURE__*/\n    // Основний контейнер сторінки\n    _jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-sm w-full space-y-8 relative\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute top-2 right-2 z-10\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(LanguageSwitcher, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), formError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-500 text-center mb-4\",\n          children: formError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n          type: \"login\",\n          onSubmit: handleLogin,\n          onGoogleLogin: handleGoogleLogin,\n          isSubmitting: loginInProgress,\n          onSwitchType: switchToRegister\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(LoginPage, \"5RdBEZAkfv3gv9zjbmm2XkouREU=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","api","useNavigate","auth","googleProvider","signInWithPopup","UserContext","AuthForm","LanguageSwitcher","jsxDEV","_jsxDEV","LoginPage","_s","navigate","user","handleLoginSuccess","loginInProgress","setLoginInProgress","formError","setFormError","console","log","replace","handleLogin","email","password","res","post","withCredentials","data","err","_err$response","_err$response2","_err$response2$data","error","response","message","errorMessage","alert","handleGoogleLogin","result","token","getIdToken","switchToRegister","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","onSwitchType","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { auth, googleProvider } from '../firebase';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { UserContext } from '../contexts/UserContext';\r\nimport AuthForm from '../components/AuthForm';\r\nimport LanguageSwitcher from '../components/LanguageSwitcher'; // <-- Імпортуємо перемикач\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate();\r\n    const { user, handleLoginSuccess } = useContext(UserContext);\r\n\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n    const [formError, setFormError] = useState(null);\r\n\r\n    // Перенаправлення, якщо користувач вже залогінений (це має відбуватися до рендерингу форми)\r\n    if (user) {\r\n        console.log('LoginPage: User is already logged in, navigating to /.');\r\n        navigate('/', { replace: true });\r\n        return null; // Не рендеримо нічого, якщо перенаправляємо\r\n    }\r\n\r\n    // --- Логіка стандартного логіну (email/password) ---\r\n    const handleLogin = async ({ email, password }) => {\r\n        setLoginInProgress(true);\r\n        setFormError(null); // Скидаємо помилку перед спробою\r\n        console.log('LoginPage: Attempting password login with data:', { email, password });\r\n        try {\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true\r\n            });\r\n            console.log('LoginPage: Password login success. Response received.');\r\n\r\n            const { user } = res.data;\r\n\r\n            // Використовуємо handleLoginSuccess для оновлення контексту та localStorage\r\n            handleLoginSuccess(user);\r\n\r\n            // Перенаправляємо після успішного логіну (handleLoginSuccess не перенаправляє)\r\n            navigate('/'); // Наприклад, на головну сторінку\r\n\r\n        } catch (err) {\r\n            console.error('LoginPage: Password login error:', err.response?.data || err.message);\r\n            const errorMessage = err.response?.data?.message || 'Помилка входу';\r\n            setFormError(errorMessage); // Встановлюємо помилку форми\r\n            alert('Помилка входу: ' + errorMessage); // Також показуємо alert\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    // --- Логіка логіну через Google ---\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true);\r\n        setFormError(null); // Скидаємо помилку перед спробою\r\n        console.log('LoginPage: Initiating Google sign-in popup.');\r\n        try {\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n            console.log('LoginPage: Firebase Google auth success. Token obtained.');\r\n\r\n            console.log('LoginPage: Sending Google token to backend /auth/login/google...');\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('LoginPage: Backend Google login success. Response received.', res.data);\r\n\r\n            const { user } = res.data; // Отримуємо об'єкт user з відповіді\r\n\r\n            // Використовуємо handleLoginSuccess для оновлення контексту та localStorage\r\n            handleLoginSuccess(user);\r\n\r\n            navigate('/'); // Наприклад, на головну сторінку\r\n\r\n        } catch (error) {\r\n            console.error('LoginPage: Google login error:', error);\r\n            const errorMessage = error.message || 'Помилка авторизації через Google';\r\n            setFormError(errorMessage); // Встановлюємо помилку форми\r\n            alert('Помилка авторизації через Google: ' + errorMessage); // Також показуємо alert\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    // Функція для переходу на сторінку реєстрації (використовується кнопкою перемикання)\r\n    const switchToRegister = () => {\r\n        navigate('/register');\r\n    };\r\n\r\n\r\n    return (\r\n        // Основний контейнер сторінки\r\n        <div className=\"min-h-screen flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\r\n            {/* Контейнер для повідомлення про помилку, AuthForm та LanguageSwitcher */}\r\n            {/* ЗРОБЛЕНО ВІДНОСНИМ ДЛЯ ПОЗИЦІОНУВАННЯ ПЕРЕМИКАЧА ВІДНОСНО НЬОГО */}\r\n            <div className=\"max-w-sm w-full space-y-8 relative\"> {/* <-- Додано клас 'relative' */}\r\n                {/* Перемикач мови, позиціонований абсолютно всередині цього контейнера */}\r\n                {/* Відкориговані top/right для позиціонування ближче до форми */}\r\n                {/* top-2 right-2 додасть невеликий відступ від краю форми контейнера */}\r\n                <div className=\"absolute top-2 right-2 z-10\"> {/* <-- Змінено позицію та переміщено всередину */}\r\n                    <LanguageSwitcher />\r\n                </div>\r\n\r\n                {formError && <div className=\"text-red-500 text-center mb-4\">{formError}</div>}\r\n\r\n                <AuthForm\r\n                    type=\"login\"\r\n                    onSubmit={handleLogin}\r\n                    onGoogleLogin={handleGoogleLogin}\r\n                    isSubmitting={loginInProgress}\r\n                    onSwitchType={switchToRegister}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}