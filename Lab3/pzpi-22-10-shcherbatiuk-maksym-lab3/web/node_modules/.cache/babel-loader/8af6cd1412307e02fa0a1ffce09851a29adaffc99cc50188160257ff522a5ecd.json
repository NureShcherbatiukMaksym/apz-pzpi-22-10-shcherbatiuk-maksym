{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\n// pages/LoginPage.js\nimport React, { useState, useContext, useEffect } from 'react';\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api'; // Your axios instance with interceptor\nimport { useNavigate } from 'react-router-dom';\nimport { auth, googleProvider } from '../firebase'; // Assuming Firebase setup\nimport { signInWithPopup } from 'firebase/auth';\nimport { UserContext } from '../contexts/UserContext'; // Your User Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n\n  // Destructure logoutUser from context as we'll need it if no devices are found\n  const {\n    user,\n    loading: userLoading,\n    fetchUser,\n    logoutUser\n  } = useContext(UserContext);\n  const [loginInProgress, setLoginInProgress] = useState(false);\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (!userLoading && user) {\n      console.log('LoginPage: Користувач вже авторизований, перенаправлення на /');\n      navigate('/', {\n        replace: true\n      });\n    }\n  }, [user, userLoading, navigate]);\n\n  // Helper function to perform actions after successful auth and fetchUser\n  const postLoginActions = async () => {\n    // Ensure user is available in context after fetchUser completes\n    // There might be a slight delay, or fetchUser might have failed.\n    // Relying on the state update from fetchUser is key.\n    // Wait a moment for state update or ensure fetchUser updates synchronously if possible\n    // A more robust way is to ensure fetchUser returns the user or throws an error.\n    // Assuming fetchUser updates the context state reliably.\n\n    // *** 1. Store info in localStorage ***\n    // Access the potentially updated user from the context state\n    if (user && user.name !== undefined && user.is_admin !== undefined) {\n      console.log('Storing user info in localStorage:', user);\n      localStorage.setItem('userName', user.name);\n      // Store boolean as a string\n      localStorage.setItem('isAdmin', String(user.is_admin));\n    } else {\n      console.warn('User data not fully available after fetchUser, cannot store in localStorage.');\n      // Decide how to handle this edge case - maybe a partial login?\n      // For now, we proceed but without localStorage info.\n    }\n\n    // *** 2. Check for IoT devices ***\n    try {\n      console.log('Checking for user IoT devices...');\n      const deviceRes = await api.get('/user-iot-devices/');\n      console.log('Device check response data:', deviceRes.data);\n\n      // Assuming the backend returns an array of devices in deviceRes.data\n      // Adjust this condition based on your backend's actual response structure\n      // e.g., if it returns { devices: [] } or { count: 0 }\n      if (!deviceRes.data || deviceRes.data.length === 0) {\n        console.warn('No IoT devices found for this user.');\n        // *** 3. Logout if no devices ***\n        alert('Будь ласка, придбайте пристрій перед входом.'); // Show message\n        if (logoutUser) {\n          // Use the logout function from context\n          console.log('Triggering logout due to no devices.');\n          await logoutUser(); // Call async logout if needed\n        } else {\n          console.error('logoutUser function not available in context!');\n          // Fallback logout: clear localStorage and navigate manually\n          localStorage.removeItem('userName');\n          localStorage.removeItem('isAdmin');\n          navigate('/login', {\n            replace: true\n          });\n        }\n        // Prevent navigation to '/' since we are logging out\n        return false; // Indicate post-login actions failed (due to logout)\n      } else {\n        console.log('User has IoT devices. Proceeding.');\n        // User has devices, the useEffect will handle navigation to '/'\n        return true; // Indicate post-login actions succeeded\n      }\n    } catch (deviceErr) {\n      var _deviceErr$response;\n      console.error('Error checking user IoT devices:', ((_deviceErr$response = deviceErr.response) === null || _deviceErr$response === void 0 ? void 0 : _deviceErr$response.data) || deviceErr.message);\n      // Handle errors during the device check itself.\n      // A 401 here will be caught by the interceptor and trigger logoutUser.\n      // Other errors (network, 500) might warrant a different response.\n      // For now, we will show an error and perhaps still allow login,\n      // letting the user potentially face issues later, or log them out\n      // depending on how critical the device check is.\n      // Let's assume a failed check is critical and requires logout.\n      alert('Помилка перевірки пристроїв. Спробуйте знову.');\n      if (logoutUser) {\n        await logoutUser();\n      } else {\n        localStorage.removeItem('userName');\n        localStorage.removeItem('isAdmin');\n        navigate('/login', {\n          replace: true\n        });\n      }\n      return false; // Indicate post-login actions failed\n    }\n  };\n  const handleLogin = async (email, password) => {\n    setLoginInProgress(true);\n    try {\n      // Step 1: Authenticate with backend\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      console.log('Password login success:', res.data);\n\n      // Step 2: Fetch user data to update context and get full details (name, isAdmin etc.)\n      // fetchUser should handle updating the 'user' state in context\n      await fetchUser();\n\n      // Step 3: Perform post-login actions (localStorage, device check, conditional logout)\n      // This needs to happen *after* fetchUser has potentially updated the user state\n      // Adding a small timeout might help ensure state update, but relying on await fetchUser\n      // and ensuring fetchUser updates state synchronously is better.\n      // Let's call the helper function\n      await postLoginActions();\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('Password login error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      alert('Помилка входу: ' + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message));\n      // Clear any partial state/storage on failed login attempt\n      localStorage.removeItem('userName');\n      localStorage.removeItem('isAdmin');\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true);\n    try {\n      // Step 1: Authenticate with Firebase Google Popup\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      console.log('Firebase Google auth successful, token obtained.');\n\n      // Step 2: Send Firebase token to your backend for verification and session creation\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('Backend Google login success:', res.data);\n\n      // Step 3: Fetch user data from backend to update context and get full details\n      await fetchUser();\n\n      // Step 4: Perform post-login actions (localStorage, device check, conditional logout)\n      await postLoginActions();\n    } catch (error) {\n      console.error('Google login error:', error);\n      alert('Помилка авторизації через Google: ' + error.message);\n      // Clear any partial state/storage on failed login attempt\n      localStorage.removeItem('userName');\n      localStorage.removeItem('isAdmin');\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n  if (userLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0441\\u0442\\u0430\\u0442\\u0443\\u0441\\u0443 \\u0430\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0430\\u0446\\u0456\\u0457...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If user is loaded and *not* null (meaning useEffect didn't redirect),\n  // show the login form. This handles the case where the user context\n  // loads and finds no user (so user is null) and login form should display.\n  // Also shows if userLoading is false and user is null.\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: \"login\",\n    onSubmit: handleLogin,\n    onGoogleLogin: handleGoogleLogin,\n    isSubmitting: loginInProgress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginPage, \"DoyXwpeiKECNCtCNYBTPwXKUFPU=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","useEffect","AuthForm","api","useNavigate","auth","googleProvider","signInWithPopup","UserContext","jsxDEV","_jsxDEV","LoginPage","_s","navigate","user","loading","userLoading","fetchUser","logoutUser","loginInProgress","setLoginInProgress","console","log","replace","postLoginActions","name","undefined","is_admin","localStorage","setItem","String","warn","deviceRes","get","data","length","alert","error","removeItem","deviceErr","_deviceErr$response","response","message","handleLogin","email","password","res","post","withCredentials","err","_err$response","_err$response2","_err$response2$data","handleGoogleLogin","result","token","getIdToken","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["// pages/LoginPage.js\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api'; // Your axios instance with interceptor\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { auth, googleProvider } from '../firebase'; // Assuming Firebase setup\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { UserContext } from '../contexts/UserContext'; // Your User Context\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate();\r\n\r\n    // Destructure logoutUser from context as we'll need it if no devices are found\r\n    const { user, loading: userLoading, fetchUser, logoutUser } = useContext(UserContext);\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n\r\n    // Redirect if already logged in\r\n    useEffect(() => {\r\n        if (!userLoading && user) {\r\n            console.log('LoginPage: Користувач вже авторизований, перенаправлення на /');\r\n            navigate('/', { replace: true });\r\n        }\r\n    }, [user, userLoading, navigate]);\r\n\r\n    // Helper function to perform actions after successful auth and fetchUser\r\n    const postLoginActions = async () => {\r\n        // Ensure user is available in context after fetchUser completes\r\n        // There might be a slight delay, or fetchUser might have failed.\r\n        // Relying on the state update from fetchUser is key.\r\n        // Wait a moment for state update or ensure fetchUser updates synchronously if possible\r\n        // A more robust way is to ensure fetchUser returns the user or throws an error.\r\n        // Assuming fetchUser updates the context state reliably.\r\n\r\n        // *** 1. Store info in localStorage ***\r\n        // Access the potentially updated user from the context state\r\n        if (user && user.name !== undefined && user.is_admin !== undefined) {\r\n            console.log('Storing user info in localStorage:', user);\r\n            localStorage.setItem('userName', user.name);\r\n            // Store boolean as a string\r\n            localStorage.setItem('isAdmin', String(user.is_admin));\r\n        } else {\r\n            console.warn('User data not fully available after fetchUser, cannot store in localStorage.');\r\n            // Decide how to handle this edge case - maybe a partial login?\r\n            // For now, we proceed but without localStorage info.\r\n        }\r\n\r\n\r\n        // *** 2. Check for IoT devices ***\r\n        try {\r\n            console.log('Checking for user IoT devices...');\r\n            const deviceRes = await api.get('/user-iot-devices/');\r\n            console.log('Device check response data:', deviceRes.data);\r\n\r\n            // Assuming the backend returns an array of devices in deviceRes.data\r\n            // Adjust this condition based on your backend's actual response structure\r\n            // e.g., if it returns { devices: [] } or { count: 0 }\r\n            if (!deviceRes.data || deviceRes.data.length === 0) {\r\n                console.warn('No IoT devices found for this user.');\r\n                // *** 3. Logout if no devices ***\r\n                alert('Будь ласка, придбайте пристрій перед входом.'); // Show message\r\n                if (logoutUser) { // Use the logout function from context\r\n                    console.log('Triggering logout due to no devices.');\r\n                    await logoutUser(); // Call async logout if needed\r\n                } else {\r\n                    console.error('logoutUser function not available in context!');\r\n                    // Fallback logout: clear localStorage and navigate manually\r\n                    localStorage.removeItem('userName');\r\n                    localStorage.removeItem('isAdmin');\r\n                    navigate('/login', { replace: true });\r\n                }\r\n                // Prevent navigation to '/' since we are logging out\r\n                return false; // Indicate post-login actions failed (due to logout)\r\n\r\n            } else {\r\n                console.log('User has IoT devices. Proceeding.');\r\n                // User has devices, the useEffect will handle navigation to '/'\r\n                return true; // Indicate post-login actions succeeded\r\n            }\r\n\r\n        } catch (deviceErr) {\r\n            console.error('Error checking user IoT devices:', deviceErr.response?.data || deviceErr.message);\r\n            // Handle errors during the device check itself.\r\n            // A 401 here will be caught by the interceptor and trigger logoutUser.\r\n            // Other errors (network, 500) might warrant a different response.\r\n            // For now, we will show an error and perhaps still allow login,\r\n            // letting the user potentially face issues later, or log them out\r\n            // depending on how critical the device check is.\r\n            // Let's assume a failed check is critical and requires logout.\r\n            alert('Помилка перевірки пристроїв. Спробуйте знову.');\r\n            if (logoutUser) {\r\n                await logoutUser();\r\n            } else {\r\n                localStorage.removeItem('userName');\r\n                localStorage.removeItem('isAdmin');\r\n                navigate('/login', { replace: true });\r\n            }\r\n            return false; // Indicate post-login actions failed\r\n        }\r\n    };\r\n\r\n\r\n    const handleLogin = async (email, password) => {\r\n        setLoginInProgress(true);\r\n        try {\r\n            // Step 1: Authenticate with backend\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true\r\n            });\r\n            console.log('Password login success:', res.data);\r\n\r\n            // Step 2: Fetch user data to update context and get full details (name, isAdmin etc.)\r\n            // fetchUser should handle updating the 'user' state in context\r\n            await fetchUser();\r\n\r\n            // Step 3: Perform post-login actions (localStorage, device check, conditional logout)\r\n            // This needs to happen *after* fetchUser has potentially updated the user state\r\n            // Adding a small timeout might help ensure state update, but relying on await fetchUser\r\n            // and ensuring fetchUser updates state synchronously is better.\r\n            // Let's call the helper function\r\n            await postLoginActions();\r\n\r\n\r\n        } catch (err) {\r\n            console.error('Password login error:', err.response?.data || err.message);\r\n            alert('Помилка входу: ' + (err.response?.data?.message || err.message));\r\n            // Clear any partial state/storage on failed login attempt\r\n            localStorage.removeItem('userName');\r\n            localStorage.removeItem('isAdmin');\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true);\r\n        try {\r\n            // Step 1: Authenticate with Firebase Google Popup\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n            console.log('Firebase Google auth successful, token obtained.');\r\n\r\n            // Step 2: Send Firebase token to your backend for verification and session creation\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('Backend Google login success:', res.data);\r\n\r\n            // Step 3: Fetch user data from backend to update context and get full details\r\n            await fetchUser();\r\n\r\n            // Step 4: Perform post-login actions (localStorage, device check, conditional logout)\r\n            await postLoginActions();\r\n\r\n\r\n        } catch (error) {\r\n            console.error('Google login error:', error);\r\n            alert('Помилка авторизації через Google: ' + error.message);\r\n            // Clear any partial state/storage on failed login attempt\r\n            localStorage.removeItem('userName');\r\n            localStorage.removeItem('isAdmin');\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    if (userLoading) {\r\n        return <div>Завантаження статусу авторизації...</div>;\r\n    }\r\n\r\n    // If user is loaded and *not* null (meaning useEffect didn't redirect),\r\n    // show the login form. This handles the case where the user context\r\n    // loads and finds no user (so user is null) and login form should display.\r\n    // Also shows if userLoading is false and user is null.\r\n    return (\r\n        <AuthForm\r\n            type=\"login\"\r\n            onSubmit={handleLogin}\r\n            onGoogleLogin={handleGoogleLogin}\r\n            isSubmitting={loginInProgress}\r\n        />\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}