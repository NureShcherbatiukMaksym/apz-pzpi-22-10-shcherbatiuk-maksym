{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\AnalyticsField.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../utils/api';\nimport Chartist from 'chartist';\nimport 'chartist/dist/chartist.min.css';\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalyticsField = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [timeRange, setTimeRange] = useState('7d');\n  const [chartData, setChartData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const chartContainerRef = useRef(null);\n  const selectField = useCallback(async fieldId => {\n    if (!fieldId) return;\n    try {\n      await api.post('/fields/select/', {\n        fieldId\n      });\n    } catch (err) {\n      console.error('Помилка при виборі поля:', err);\n      throw err;\n    }\n  }, []);\n  const deselectField = useCallback(async fieldId => {\n    if (!fieldId) return;\n    try {\n      await api.post('/fields/deselect/', {\n        fieldId\n      });\n    } catch (err) {\n      console.error('Помилка при деселекті поля:', err);\n    }\n  }, []);\n\n  // Викликається при виборі поля (1 раз)\n  useEffect(() => {\n    if (!id) return;\n    const doSelect = async () => {\n      setIsLoading(true);\n      try {\n        await selectField(id);\n        await fetchData(); // одразу після вибору поля\n      } catch (err) {\n        console.error('Помилка при виборі поля:', err);\n        setError('Не вдалося вибрати поле.');\n        setIsLoading(false);\n      }\n    };\n    doSelect();\n    return () => {\n      deselectField(id);\n    };\n  }, [id, selectField, deselectField]);\n\n  // Викликається при зміні періоду часу\n  useEffect(() => {\n    if (id) {\n      fetchData();\n    }\n  }, [timeRange]);\n  useEffect(() => {\n    // Функція для очищення всіх графіків\n    const clearCharts = () => {\n      Object.values(chartInstancesRef.current).forEach(chart => {\n        if (chart && typeof chart.detach === 'function') {\n          chart.detach();\n        }\n      });\n      chartInstancesRef.current = {};\n\n      // Додатково можна очистити HTML контейнерів, якщо detach не завжди спрацьовує ідеально\n      // або якщо Chartist залишає якісь елементи\n      const overallChartEl = document.getElementById('overall-chart');\n      if (overallChartEl) overallChartEl.innerHTML = '';\n      if (chartData && chartData.aggregatedData) {\n        // chartData тут може бути застарілим, якщо ефект спрацював через зміну error\n        chartData.aggregatedData.forEach(sensor => {\n          const sensorChartEl = document.getElementById(`chart-${sensor.sensorId}`);\n          if (sensorChartEl) sensorChartEl.innerHTML = '';\n        });\n      } else if (isLoading) {\n        var _initialChartData$agg;\n        // Якщо йде завантаження і chartData ще немає або null\n        const initialChartData = chartData; // зберегти поточне значення chartData (може бути застарілим)\n        initialChartData === null || initialChartData === void 0 ? void 0 : (_initialChartData$agg = initialChartData.aggregatedData) === null || _initialChartData$agg === void 0 ? void 0 : _initialChartData$agg.forEach(sensor => {\n          // спробувати очистити на основі можливих старих даних\n          const sensorChartEl = document.getElementById(`chart-${sensor.sensorId}`);\n          if (sensorChartEl) sensorChartEl.innerHTML = '';\n        });\n      }\n    };\n    if (isLoading || error || !chartData) {\n      // Якщо завантаження, помилка, або немає даних\n      clearCharts();\n      if (!chartData || error) return; // Не малювати, якщо немає даних або є помилка\n    }\n\n    // Якщо ми дійшли сюди, isLoading=false, error=null, chartData є\n    // Спочатку очищаємо старі графіки перед малюванням нових\n    clearCharts();\n\n    // Персональні графіки по сенсорах\n    chartData.aggregatedData.forEach(sensor => {\n      const containerId = `chart-${sensor.sensorId}`;\n      // ... логіка labels, values ...\n      const labels = sensor.data.map(/* ... */);\n      const values = sensor.data.map(/* ... */);\n      try {\n        // Додано try-catch для безпечного створення графіка\n        const newChart = new Chartist.Line(`#${containerId}`, {\n          labels,\n          series: [values]\n        }, {/* ... options ... */});\n        chartInstancesRef.current[containerId] = newChart;\n      } catch (e) {\n        console.error(`Failed to create chart for sensor ${sensor.sensorId}:`, e);\n      }\n    });\n    const allTimestamps = Array.from(new Set(Object.values(sensorTypesMap).flatMap(typeData => Object.keys(typeData)))).sort();\n    const labels = allTimestamps.map(ts => {\n      const date = new Date(ts);\n      return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n    });\n    const series = Object.keys(sensorTypesMap).map(sensorType => {\n      return allTimestamps.map(ts => {\n        const values = sensorTypesMap[sensorType][ts];\n        if (!values || values.length === 0) return null;\n        const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n        return +avg.toFixed(2);\n      });\n    });\n    new Chartist.Line('#overall-chart', {\n      labels,\n      series\n    }, {\n      fullWidth: true,\n      chartPadding: {\n        right: 40\n      },\n      axisX: {\n        showGrid: false,\n        labelInterpolationFnc: (value, index) => index % 1 === 0 ? value : null\n      },\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0.2\n      })\n    });\n  }, [chartData]);\n  const fetchData = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    setChartData(null);\n    try {\n      const response = await api.get(`/field-measurements/chart/${timeRange}`);\n      setChartData(response.data);\n    } catch (err) {\n      console.error('Помилка при завантаженні аналітики:', err);\n      setError('Не вдалося завантажити дані.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [timeRange]);\n  const handleTimeRangeChange = range => {\n    if (range !== timeRange && !isLoading) {\n      setTimeRange(range);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-content\",\n    className: \"w-full flex-1 bg-gray-100 p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white shadow rounded-lg p-4 md:p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center border-b border-gray-200 pb-3 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-xl font-bold text-gray-900\",\n            children: [\"\\u0410\\u043D\\u0430\\u043B\\u0456\\u0442\\u0438\\u043A\\u0430 \\u0432\\u0438\\u043C\\u0456\\u0440\\u044E\\u0432\\u0430\\u043D\\u044C \", id ? `для поля ID: ${id}` : '(Поле не вибрано)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-2\",\n            children: ['7d', '6m', '1y'].map(range => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleTimeRangeChange(range),\n              disabled: isLoading,\n              className: `px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ease-in-out ${timeRange === range ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`,\n              children: range.toUpperCase()\n            }, range, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-blue-600\",\n          children: \"\\u0417\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0434\\u0430\\u043D\\u0438\\u0445...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 35\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-600\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 31\n        }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"font-semibold text-lg mb-2\",\n            children: t(`general_analytics`)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"overall-chart\",\n            className: \"ct-chart ct-major-twelfth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"font-semibold text-lg mb-2\",\n            children: t(`aggregated_data`)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: chartData.aggregatedData.map(sensor => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-4 bg-gray-50 rounded shadow-sm\",\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"font-bold\",\n                children: sensor.sensorType\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Min:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 44\n                }, this), \" \", sensor.min]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Max:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 44\n                }, this), \" \", sensor.max]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Avg:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 44\n                }, this), \" \", sensor.average]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: `chart-${sensor.sensorId}`,\n                className: \"ct-chart ct-major-tenth mt-4\",\n                style: {\n                  height: '300px'\n                },\n                ref: chartContainerRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 41\n              }, this)]\n            }, sensor.sensorId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n};\n_s(AnalyticsField, \"1V8WzvVh5WrLRwtm+Lr3O2vhWdA=\", false, function () {\n  return [useParams, useTranslation];\n});\n_c = AnalyticsField;\nexport default AnalyticsField;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsField\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useParams","api","Chartist","useTranslation","jsxDEV","_jsxDEV","AnalyticsField","_s","id","timeRange","setTimeRange","chartData","setChartData","isLoading","setIsLoading","error","setError","t","i18n","chartContainerRef","selectField","fieldId","post","err","console","deselectField","doSelect","fetchData","clearCharts","Object","values","chartInstancesRef","current","forEach","chart","detach","overallChartEl","document","getElementById","innerHTML","aggregatedData","sensor","sensorChartEl","sensorId","_initialChartData$agg","initialChartData","containerId","labels","data","map","newChart","Line","series","e","allTimestamps","Array","from","Set","sensorTypesMap","flatMap","typeData","keys","sort","ts","date","Date","getDate","toString","padStart","getMonth","sensorType","length","avg","reduce","sum","val","toFixed","fullWidth","chartPadding","right","axisX","showGrid","labelInterpolationFnc","value","index","lineSmooth","Interpolation","cardinal","tension","response","get","handleTimeRangeChange","range","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","toUpperCase","min","max","average","style","height","ref","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/AnalyticsField.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport api from '../utils/api';\r\nimport Chartist from 'chartist';\r\nimport 'chartist/dist/chartist.min.css';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst AnalyticsField = () => {\r\n    const { id } = useParams();\r\n    const [timeRange, setTimeRange] = useState('7d');\r\n    const [chartData, setChartData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const { t, i18n } = useTranslation();\r\n    const chartContainerRef = useRef(null);\r\n\r\n    const selectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) return;\r\n        try {\r\n            await api.post('/fields/select/', { fieldId });\r\n        } catch (err) {\r\n            console.error('Помилка при виборі поля:', err);\r\n            throw err;\r\n        }\r\n    }, []);\r\n\r\n    const deselectField = useCallback(async (fieldId) => {\r\n        if (!fieldId) return;\r\n        try {\r\n            await api.post('/fields/deselect/', { fieldId });\r\n        } catch (err) {\r\n            console.error('Помилка при деселекті поля:', err);\r\n        }\r\n    }, []);\r\n\r\n    // Викликається при виборі поля (1 раз)\r\n    useEffect(() => {\r\n        if (!id) return;\r\n\r\n        const doSelect = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                await selectField(id);\r\n                await fetchData(); // одразу після вибору поля\r\n            } catch (err) {\r\n                console.error('Помилка при виборі поля:', err);\r\n                setError('Не вдалося вибрати поле.');\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        doSelect();\r\n\r\n        return () => {\r\n            deselectField(id);\r\n        };\r\n    }, [id, selectField, deselectField]);\r\n\r\n    // Викликається при зміні періоду часу\r\n    useEffect(() => {\r\n        if (id) {\r\n            fetchData();\r\n        }\r\n    }, [timeRange]);\r\n\r\n    useEffect(() => {\r\n        // Функція для очищення всіх графіків\r\n        const clearCharts = () => {\r\n            Object.values(chartInstancesRef.current).forEach(chart => {\r\n                if (chart && typeof chart.detach === 'function') {\r\n                    chart.detach();\r\n                }\r\n            });\r\n            chartInstancesRef.current = {};\r\n\r\n            // Додатково можна очистити HTML контейнерів, якщо detach не завжди спрацьовує ідеально\r\n            // або якщо Chartist залишає якісь елементи\r\n            const overallChartEl = document.getElementById('overall-chart');\r\n            if (overallChartEl) overallChartEl.innerHTML = '';\r\n\r\n            if (chartData && chartData.aggregatedData) { // chartData тут може бути застарілим, якщо ефект спрацював через зміну error\r\n                chartData.aggregatedData.forEach(sensor => {\r\n                    const sensorChartEl = document.getElementById(`chart-${sensor.sensorId}`);\r\n                    if (sensorChartEl) sensorChartEl.innerHTML = '';\r\n                });\r\n            } else if (isLoading) { // Якщо йде завантаження і chartData ще немає або null\r\n                const initialChartData = chartData; // зберегти поточне значення chartData (може бути застарілим)\r\n                initialChartData?.aggregatedData?.forEach(sensor => { // спробувати очистити на основі можливих старих даних\r\n                    const sensorChartEl = document.getElementById(`chart-${sensor.sensorId}`);\r\n                    if (sensorChartEl) sensorChartEl.innerHTML = '';\r\n                });\r\n            }\r\n        };\r\n\r\n        if (isLoading || error || !chartData) { // Якщо завантаження, помилка, або немає даних\r\n            clearCharts();\r\n            if (!chartData || error) return; // Не малювати, якщо немає даних або є помилка\r\n        }\r\n\r\n        // Якщо ми дійшли сюди, isLoading=false, error=null, chartData є\r\n        // Спочатку очищаємо старі графіки перед малюванням нових\r\n        clearCharts();\r\n\r\n\r\n        // Персональні графіки по сенсорах\r\n        chartData.aggregatedData.forEach(sensor => {\r\n            const containerId = `chart-${sensor.sensorId}`;\r\n            // ... логіка labels, values ...\r\n            const labels = sensor.data.map(/* ... */);\r\n            const values = sensor.data.map(/* ... */);\r\n\r\n            try { // Додано try-catch для безпечного створення графіка\r\n                const newChart = new Chartist.Line(`#${containerId}`, {\r\n                    labels,\r\n                    series: [values],\r\n                }, { /* ... options ... */ });\r\n                chartInstancesRef.current[containerId] = newChart;\r\n            } catch(e) {\r\n                console.error(`Failed to create chart for sensor ${sensor.sensorId}:`, e);\r\n            }\r\n        });\r\n\r\n        const allTimestamps = Array.from(\r\n            new Set(Object.values(sensorTypesMap).flatMap(typeData => Object.keys(typeData)))\r\n        ).sort();\r\n\r\n        const labels = allTimestamps.map(ts => {\r\n            const date = new Date(ts);\r\n            return `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;\r\n        });\r\n\r\n        const series = Object.keys(sensorTypesMap).map(sensorType => {\r\n            return allTimestamps.map(ts => {\r\n                const values = sensorTypesMap[sensorType][ts];\r\n                if (!values || values.length === 0) return null;\r\n                const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\r\n                return +avg.toFixed(2);\r\n            });\r\n        });\r\n\r\n        new Chartist.Line('#overall-chart', {\r\n            labels,\r\n            series,\r\n        }, {\r\n            fullWidth: true,\r\n            chartPadding: { right: 40 },\r\n            axisX: {\r\n                showGrid: false,\r\n                labelInterpolationFnc: (value, index) => index % 1 === 0 ? value : null,\r\n            },\r\n            lineSmooth: Chartist.Interpolation.cardinal({\r\n                tension: 0.2\r\n            })\r\n        });\r\n    }, [chartData]);\r\n\r\n\r\n\r\n    const fetchData = useCallback(async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        setChartData(null);\r\n\r\n        try {\r\n            const response = await api.get(`/field-measurements/chart/${timeRange}`);\r\n            setChartData(response.data);\r\n        } catch (err) {\r\n            console.error('Помилка при завантаженні аналітики:', err);\r\n            setError('Не вдалося завантажити дані.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n\r\n    }, [timeRange]);\r\n\r\n    const handleTimeRangeChange = (range) => {\r\n        if (range !== timeRange && !isLoading) {\r\n            setTimeRange(range);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id=\"main-content\" className=\"w-full flex-1 bg-gray-100 p-6\">\r\n            <div className=\"max-w-7xl mx-auto\">\r\n                <div className=\"bg-white shadow rounded-lg p-4 md:p-6\">\r\n                    <div className=\"flex justify-between items-center border-b border-gray-200 pb-3 mb-4\">\r\n                        <h5 className=\"text-xl font-bold text-gray-900\">\r\n                            Аналітика вимірювань {id ? `для поля ID: ${id}` : '(Поле не вибрано)'}\r\n                        </h5>\r\n                        <div className=\"flex space-x-2\">\r\n                            {['7d', '6m', '1y'].map(range => (\r\n                                <button\r\n                                    key={range}\r\n                                    onClick={() => handleTimeRangeChange(range)}\r\n                                    disabled={isLoading}\r\n                                    className={`px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ease-in-out ${\r\n                                        timeRange === range\r\n                                            ? 'bg-blue-600 text-white hover:bg-blue-700'\r\n                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n                                    } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n                                >\r\n                                    {range.toUpperCase()}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {isLoading && <p className=\"text-blue-600\">Завантаження даних...</p>}\r\n                    {error && <p className=\"text-red-600\">{error}</p>}\r\n\r\n                    {chartData && (\r\n                        <div className=\"mb-8\">\r\n                            <h6 className=\"font-semibold text-lg mb-2\">{t(`general_analytics`)}</h6>\r\n                            <div id=\"overall-chart\" className=\"ct-chart ct-major-twelfth\"></div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {chartData && (\r\n                        <div>\r\n                            <h6 className=\"font-semibold text-lg mb-2\">{t(`aggregated_data`)}</h6>\r\n                            <div className=\"space-y-4\">\r\n                                {chartData.aggregatedData.map(sensor => (\r\n                                    <div key={sensor.sensorId} className=\"p-4 bg-gray-50 rounded shadow-sm\">\r\n                                        <h6 className=\"font-bold\">{sensor.sensorType}</h6>\r\n                                        <p><strong>Min:</strong> {sensor.min}</p>\r\n                                        <p><strong>Max:</strong> {sensor.max}</p>\r\n                                        <p><strong>Avg:</strong> {sensor.average}</p>\r\n                                        <div\r\n                                            id={`chart-${sensor.sensorId}`}\r\n                                            className=\"ct-chart ct-major-tenth mt-4\"\r\n                                            style={{ height: '300px' }}\r\n                                            ref={chartContainerRef}\r\n                                        />\r\n                                    </div>\r\n                                ))}\r\n\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalyticsField;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}