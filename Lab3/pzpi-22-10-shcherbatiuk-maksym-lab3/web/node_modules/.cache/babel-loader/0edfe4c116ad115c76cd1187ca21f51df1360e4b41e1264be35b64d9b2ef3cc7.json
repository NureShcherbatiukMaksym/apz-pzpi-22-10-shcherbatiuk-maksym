{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\n// pages/LoginPage.js\nimport React, { useState, useContext, useEffect } from 'react';\nimport AuthForm from '../components/AuthForm';\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, googleProvider } from '../firebase';\nimport { signInWithPopup } from 'firebase/auth';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n\n  // Get user state, loading, and the new update/logout functions from context\n  const {\n    user,\n    loading: userLoading,\n    logoutUser,\n    updateUserStateAfterLogin\n  } = useContext(UserContext);\n  const [loginInProgress, setLoginInProgress] = useState(false);\n\n  // Effect to redirect if the user is already logged in and has a device\n  // We rely on the context state reflecting the verified status after initial load\n  useEffect(() => {\n    // Wait until context finishes its initial loading check\n    if (!userLoading && user) {\n      // Check if user object is not null\n      console.log('LoginPage: Користувач вже авторизований, перенаправлення на /');\n      // navigate('/', { replace: true }); // Removed aggressive redirect.\n      // Let context and parent routing handle redirect based on user state.\n      // If user state is non-null, the parent route/component wrapped\n      // by context should decide where to go (e.g., render protected content).\n      // If you MUST redirect here, uncomment this line, but ensure your\n      // App's routing correctly handles logged-in users.\n      navigate('/', {\n        replace: true\n      });\n    }\n    // If userLoading is false and user is null, we stay on the login page.\n  }, [user, userLoading, navigate]);\n\n  // Function to check user devices and handle login completion or logout\n  const checkDevicesAndCompleteLogin = async userData => {\n    try {\n      const devicesRes = await api.get('/user-iot-devices');\n      const userHasDevice = devicesRes.data && devicesRes.data.length > 0;\n      if (userHasDevice) {\n        console.log('Device check success: User has devices.');\n        // Store user info from login response in localStorage\n        localStorage.setItem('userName', userData.name);\n        localStorage.setItem('isAdmin', userData.is_admin ? 'true' : 'false'); // Store as string\n\n        // Update context state\n        updateUserStateAfterLogin(userData, true);\n\n        // Redirect to home page - context state change *might* handle this\n        // depending on App routing, but explicit navigate is clearer here.\n        navigate('/', {\n          replace: true\n        });\n      } else {\n        console.log('Device check success: User has NO devices.');\n        // User is authenticated but has no device. Log them out locally.\n        logoutUser(); // Clears context state and localStorage\n        alert('Будь ласка, придбайте спочатку пристрій.'); // Show alert\n        // No navigation needed, logoutUser or the App routing should handle staying on login\n      }\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('Error during device check after login:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      // If device check fails for reasons other than 401 (which interceptor handles),\n      // assume something is wrong and maybe log out locally just to be safe.\n      // Or just alert the error. Let's alert the error and stay on login.\n      alert('Помилка перевірки пристроїв: ' + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message));\n      // Optionally call logoutUser() here if a failed device check means\n      // the login was effectively invalid for app usage.\n      logoutUser(); // Force logout if device check fails\n    } finally {\n      setLoginInProgress(false); // End loading state\n    }\n  };\n  const handleLogin = async (email, password) => {\n    setLoginInProgress(true); // Start loading state\n    try {\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      console.log('Password login success:', res.data);\n\n      // **Instead of fetchUser(), proceed to check devices and update state**\n      await checkDevicesAndCompleteLogin(res.data); // Pass user data from login response\n    } catch (err) {\n      var _err$response3, _err$response4, _err$response4$data;\n      console.error('Password login error:', ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || err.message);\n      alert('Помилка входу: ' + (((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || err.message));\n      setLoginInProgress(false); // End loading state on login failure\n    }\n    // Note: setLoginInProgress(false) is now handled inside checkDevicesAndCompleteLogin\n    // to cover the entire post-login process.\n  };\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true); // Start loading state\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('Google login success:', res.data);\n\n      // **Instead of fetchUser(), proceed to check devices and update state**\n      await checkDevicesAndCompleteLogin(res.data); // Pass user data from login response\n    } catch (error) {\n      console.error('Google login error:', error);\n      alert('Помилка авторизації через Google: ' + error.message);\n      setLoginInProgress(false); // End loading state on login failure\n    }\n    // Note: setLoginInProgress(false) is now handled inside checkDevicesAndCompleteLogin\n    // to cover the entire post-login process.\n  };\n\n  // Show loading state while context is checking auth status on page load\n  if (userLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0441\\u0442\\u0430\\u0442\\u0443\\u0441\\u0443 \\u0430\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0430\\u0446\\u0456\\u0457...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If user is already logged in (user is not null after loading),\n  // this page shouldn't be shown. The useEffect above or parent routing handles redirection.\n  // This ensures we don't show the login form if the user is already logged in.\n  // However, if the useEffect redirects, the component might unmount before this.\n  // A simple check here doesn't hurt.\n  if (user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u041F\\u0435\\u0440\\u0435\\u043D\\u0430\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u043D\\u044F...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 16\n    }, this); // Or null, or a loading spinner\n  }\n\n  // Render the login form only if not loading and user is null\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: \"login\",\n    onSubmit: handleLogin,\n    onGoogleLogin: handleGoogleLogin,\n    isSubmitting: loginInProgress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginPage, \"Ywe8laFMYjWW1f6/CJIK0fnyAEs=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","useEffect","AuthForm","api","useNavigate","auth","googleProvider","signInWithPopup","UserContext","jsxDEV","_jsxDEV","LoginPage","_s","navigate","user","loading","userLoading","logoutUser","updateUserStateAfterLogin","loginInProgress","setLoginInProgress","console","log","replace","checkDevicesAndCompleteLogin","userData","devicesRes","get","userHasDevice","data","length","localStorage","setItem","name","is_admin","alert","err","_err$response","_err$response2","_err$response2$data","error","response","message","handleLogin","email","password","res","post","withCredentials","_err$response3","_err$response4","_err$response4$data","handleGoogleLogin","result","token","getIdToken","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","onGoogleLogin","isSubmitting","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["// pages/LoginPage.js\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport AuthForm from '../components/AuthForm';\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { auth, googleProvider } from '../firebase';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate();\r\n\r\n    // Get user state, loading, and the new update/logout functions from context\r\n    const { user, loading: userLoading, logoutUser, updateUserStateAfterLogin } = useContext(UserContext);\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n\r\n    // Effect to redirect if the user is already logged in and has a device\r\n    // We rely on the context state reflecting the verified status after initial load\r\n    useEffect(() => {\r\n        // Wait until context finishes its initial loading check\r\n        if (!userLoading && user) { // Check if user object is not null\r\n            console.log('LoginPage: Користувач вже авторизований, перенаправлення на /');\r\n            // navigate('/', { replace: true }); // Removed aggressive redirect.\r\n            // Let context and parent routing handle redirect based on user state.\r\n            // If user state is non-null, the parent route/component wrapped\r\n            // by context should decide where to go (e.g., render protected content).\r\n            // If you MUST redirect here, uncomment this line, but ensure your\r\n            // App's routing correctly handles logged-in users.\r\n            navigate('/', { replace: true });\r\n        }\r\n        // If userLoading is false and user is null, we stay on the login page.\r\n    }, [user, userLoading, navigate]);\r\n\r\n\r\n    // Function to check user devices and handle login completion or logout\r\n    const checkDevicesAndCompleteLogin = async (userData) => {\r\n        try {\r\n            const devicesRes = await api.get('/user-iot-devices');\r\n            const userHasDevice = devicesRes.data && devicesRes.data.length > 0;\r\n\r\n            if (userHasDevice) {\r\n                console.log('Device check success: User has devices.');\r\n                // Store user info from login response in localStorage\r\n                localStorage.setItem('userName', userData.name);\r\n                localStorage.setItem('isAdmin', userData.is_admin ? 'true' : 'false'); // Store as string\r\n\r\n                // Update context state\r\n                updateUserStateAfterLogin(userData, true);\r\n\r\n                // Redirect to home page - context state change *might* handle this\r\n                // depending on App routing, but explicit navigate is clearer here.\r\n                navigate('/', { replace: true });\r\n\r\n            } else {\r\n                console.log('Device check success: User has NO devices.');\r\n                // User is authenticated but has no device. Log them out locally.\r\n                logoutUser(); // Clears context state and localStorage\r\n                alert('Будь ласка, придбайте спочатку пристрій.'); // Show alert\r\n                // No navigation needed, logoutUser or the App routing should handle staying on login\r\n            }\r\n        } catch (err) {\r\n            console.error('Error during device check after login:', err.response?.data || err.message);\r\n            // If device check fails for reasons other than 401 (which interceptor handles),\r\n            // assume something is wrong and maybe log out locally just to be safe.\r\n            // Or just alert the error. Let's alert the error and stay on login.\r\n            alert('Помилка перевірки пристроїв: ' + (err.response?.data?.message || err.message));\r\n            // Optionally call logoutUser() here if a failed device check means\r\n            // the login was effectively invalid for app usage.\r\n            logoutUser(); // Force logout if device check fails\r\n        } finally {\r\n            setLoginInProgress(false); // End loading state\r\n        }\r\n    }\r\n\r\n\r\n    const handleLogin = async (email, password) => {\r\n        setLoginInProgress(true); // Start loading state\r\n        try {\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true\r\n            });\r\n            console.log('Password login success:', res.data);\r\n\r\n            // **Instead of fetchUser(), proceed to check devices and update state**\r\n            await checkDevicesAndCompleteLogin(res.data); // Pass user data from login response\r\n\r\n\r\n        } catch (err) {\r\n            console.error('Password login error:', err.response?.data || err.message);\r\n            alert('Помилка входу: ' + (err.response?.data?.message || err.message));\r\n            setLoginInProgress(false); // End loading state on login failure\r\n        }\r\n        // Note: setLoginInProgress(false) is now handled inside checkDevicesAndCompleteLogin\r\n        // to cover the entire post-login process.\r\n    };\r\n\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true); // Start loading state\r\n        try {\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('Google login success:', res.data);\r\n\r\n            // **Instead of fetchUser(), proceed to check devices and update state**\r\n            await checkDevicesAndCompleteLogin(res.data); // Pass user data from login response\r\n\r\n        } catch (error) {\r\n            console.error('Google login error:', error);\r\n            alert('Помилка авторизації через Google: ' + error.message);\r\n            setLoginInProgress(false); // End loading state on login failure\r\n        }\r\n        // Note: setLoginInProgress(false) is now handled inside checkDevicesAndCompleteLogin\r\n        // to cover the entire post-login process.\r\n    };\r\n\r\n    // Show loading state while context is checking auth status on page load\r\n    if (userLoading) {\r\n        return <div>Завантаження статусу авторизації...</div>;\r\n    }\r\n\r\n    // If user is already logged in (user is not null after loading),\r\n    // this page shouldn't be shown. The useEffect above or parent routing handles redirection.\r\n    // This ensures we don't show the login form if the user is already logged in.\r\n    // However, if the useEffect redirects, the component might unmount before this.\r\n    // A simple check here doesn't hurt.\r\n    if (user) {\r\n        return <div>Перенаправлення...</div>; // Or null, or a loading spinner\r\n    }\r\n\r\n\r\n    // Render the login form only if not loading and user is null\r\n    return (\r\n        <AuthForm\r\n            type=\"login\"\r\n            onSubmit={handleLogin}\r\n            onGoogleLogin={handleGoogleLogin}\r\n            isSubmitting={loginInProgress}\r\n        />\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}