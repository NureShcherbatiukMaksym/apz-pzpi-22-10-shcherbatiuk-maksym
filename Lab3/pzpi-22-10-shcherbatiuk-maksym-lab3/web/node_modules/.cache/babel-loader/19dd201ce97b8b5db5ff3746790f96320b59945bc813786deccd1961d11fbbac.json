{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$();\n// contexts/UserContext.js\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\n// Import both setUnauthorizedCallback and setIsLoggingOut\nimport api, { setUnauthorizedCallback, setIsLoggingOut } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  // Initial state: Reflect localStorage, no initial API call\n  const [user, setUser] = useState(() => {\n    const storedUserName = localStorage.getItem('userName');\n    // We don't assume logged in status based on LS alone, but initialize user object if name exists\n    return storedUserName ? {\n      name: storedUserName\n    } : null;\n  });\n  const [isAdmin, setIsAdmin] = useState(() => localStorage.getItem('isAdmin') === 'true');\n  const [hasDevice, setHasDevice] = useState(false); // Device status must be verified after login\n  // Initial loading state is false, as we don't check auth on mount anymore\n  const [loading, setLoading] = useState(false); // Manage loading locally for specific operations if needed\n  const [error, setError] = useState(null);\n\n  // Функція для виходу з системи (приклад)\n  const logoutUser = useCallback(async () => {\n    // Припускаємо, що у вас є API endpoint для виходу\n    try {\n      await api.post('/auth/logout'); // Замініть на ваш реальний шлях\n      setUser(null);\n      setIsAdmin(false);\n      setHasDevice(false);\n      // Очистити локальне сховище або куки, якщо використовуєте\n      // localStorage.removeItem('token');\n      console.log('User logged out.');\n    } catch (err) {\n      console.error('Failed to log out:', err);\n      // Навіть якщо вихід на бекенді не вдався, очищаємо стан на фронтенді\n      setUser(null);\n      setIsAdmin(false);\n      setHasDevice(false);\n    }\n  }, []);\n\n  // --- Link logoutUser to API interceptor ---\n  useEffect(() => {\n    console.log('Context: Setting API unauthorized callback.');\n    // Set the logoutUser function to be called by the API interceptor on 401 errors\n    setUnauthorizedCallback(logoutUser);\n\n    // Cleanup function: Remove the callback when the component unmounts or logoutUser changes\n    return () => {\n      console.log('Context: Clearing API unauthorized callback.');\n      setUnauthorizedCallback(null);\n      // Also ensure isLoggingOut is false on unmount\n      setIsLoggingOut(false);\n    };\n  }, [logoutUser]); // Dependency ensures callback is updated (won't change due to useCallback)\n\n  // --- Function to update context state AFTER successful login AND device check ---\n  // This is called by LoginPage only if login + device check succeed.\n  const updateUserStateAfterLogin = useCallback(userData => {\n    console.log('Context: updateUserStateAfterLogin called.');\n    // userData should contain { name, is_admin } from the login response\n    // We also know they *have* a device at this point because LoginPage checked.\n    setUser({\n      name: userData.name\n    });\n    setIsAdmin(userData.is_admin || false);\n    setHasDevice(true); // Set to true as LoginPage confirmed they have a device\n    // localStorage items are set in LoginPage after the device check.\n    setError(null); // Clear any errors\n  }, []);\n\n  // The value provided by the context\n  const contextValue = {\n    user,\n    // null or { name: string }\n    isAdmin,\n    // boolean\n    hasDevice,\n    // boolean\n    loading,\n    // boolean (less crucial now)\n    error,\n    // any (not heavily used globally)\n    logoutUser,\n    // Function to perform logout (called by interceptor or components)\n    updateUserStateAfterLogin // Function for LoginPage to update state after full success\n    // We don't expose setIsLoggingOut via context, only managed internally or by interceptor\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProvider, \"3dSPbGopflBdTQUoES5mIvv8yfc=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","api","setUnauthorizedCallback","setIsLoggingOut","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","storedUserName","localStorage","getItem","name","isAdmin","setIsAdmin","hasDevice","setHasDevice","loading","setLoading","error","setError","logoutUser","post","console","log","err","updateUserStateAfterLogin","userData","is_admin","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/contexts/UserContext.js"],"sourcesContent":["// contexts/UserContext.js\r\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\r\n// Import both setUnauthorizedCallback and setIsLoggingOut\r\nimport api, { setUnauthorizedCallback, setIsLoggingOut } from '../utils/api';\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n    // Initial state: Reflect localStorage, no initial API call\r\n    const [user, setUser] = useState(() => {\r\n        const storedUserName = localStorage.getItem('userName');\r\n        // We don't assume logged in status based on LS alone, but initialize user object if name exists\r\n        return storedUserName ? { name: storedUserName } : null;\r\n    });\r\n    const [isAdmin, setIsAdmin] = useState(() => localStorage.getItem('isAdmin') === 'true');\r\n    const [hasDevice, setHasDevice] = useState(false); // Device status must be verified after login\r\n    // Initial loading state is false, as we don't check auth on mount anymore\r\n    const [loading, setLoading] = useState(false); // Manage loading locally for specific operations if needed\r\n    const [error, setError] = useState(null);\r\n\r\n    // Функція для виходу з системи (приклад)\r\n    const logoutUser = useCallback(async () => {\r\n        // Припускаємо, що у вас є API endpoint для виходу\r\n        try {\r\n            await api.post('/auth/logout'); // Замініть на ваш реальний шлях\r\n            setUser(null);\r\n            setIsAdmin(false);\r\n            setHasDevice(false);\r\n            // Очистити локальне сховище або куки, якщо використовуєте\r\n            // localStorage.removeItem('token');\r\n            console.log('User logged out.');\r\n        } catch (err) {\r\n            console.error('Failed to log out:', err);\r\n            // Навіть якщо вихід на бекенді не вдався, очищаємо стан на фронтенді\r\n            setUser(null);\r\n            setIsAdmin(false);\r\n            setHasDevice(false);\r\n        }\r\n    }, []);\r\n\r\n\r\n    // --- Link logoutUser to API interceptor ---\r\n    useEffect(() => {\r\n        console.log('Context: Setting API unauthorized callback.');\r\n        // Set the logoutUser function to be called by the API interceptor on 401 errors\r\n        setUnauthorizedCallback(logoutUser);\r\n\r\n        // Cleanup function: Remove the callback when the component unmounts or logoutUser changes\r\n        return () => {\r\n            console.log('Context: Clearing API unauthorized callback.');\r\n            setUnauthorizedCallback(null);\r\n            // Also ensure isLoggingOut is false on unmount\r\n            setIsLoggingOut(false);\r\n        };\r\n    }, [logoutUser]); // Dependency ensures callback is updated (won't change due to useCallback)\r\n\r\n\r\n    // --- Function to update context state AFTER successful login AND device check ---\r\n    // This is called by LoginPage only if login + device check succeed.\r\n    const updateUserStateAfterLogin = useCallback((userData) => {\r\n        console.log('Context: updateUserStateAfterLogin called.');\r\n        // userData should contain { name, is_admin } from the login response\r\n        // We also know they *have* a device at this point because LoginPage checked.\r\n        setUser({ name: userData.name });\r\n        setIsAdmin(userData.is_admin || false);\r\n        setHasDevice(true); // Set to true as LoginPage confirmed they have a device\r\n        // localStorage items are set in LoginPage after the device check.\r\n        setError(null); // Clear any errors\r\n    }, []);\r\n\r\n\r\n    // The value provided by the context\r\n    const contextValue = {\r\n        user, // null or { name: string }\r\n        isAdmin, // boolean\r\n        hasDevice, // boolean\r\n        loading, // boolean (less crucial now)\r\n        error, // any (not heavily used globally)\r\n        logoutUser, // Function to perform logout (called by interceptor or components)\r\n        updateUserStateAfterLogin, // Function for LoginPage to update state after full success\r\n        // We don't expose setIsLoggingOut via context, only managed internally or by interceptor\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={contextValue}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}