{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\AnalyticsField.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { Line as LineChart, Svg } from 'chartist'; // Використовуємо імпортовані частини\nimport 'chartist/dist/chartist.css';\nimport api from '../utils/api'; // Припускаємо, що це твій налаштований екземпляр Axios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalyticsField = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Отримуємо ID поля з URL\n\n  const [timeRange, setTimeRange] = useState('7d'); // Стан для часового діапазону\n  const [chartData, setChartData] = useState(null); // Стан для даних графіка\n  const [isLoading, setIsLoading] = useState(false); // Стан завантаження\n  const [error, setError] = useState(null); // Стан помилки\n\n  const chartContainerRef = useRef(null); // Реф для контейнера графіка\n  const chartInstanceRef = useRef(null); // Реф для екземпляра графіка Chartist\n\n  // Функція для вибору поля (запит POST на /fields/select/)\n  const selectField = async fieldId => {\n    // ... (код функції selectField залишається без змін)\n    if (!fieldId) {\n      console.log('[AnalyticsField:selectField] Called with no valid ID, skipping API call.');\n      return;\n    }\n    try {\n      console.log(`[AnalyticsField:selectField] Відправка запиту на select поля ID: ${fieldId}. Endpoint: /fields/select/`);\n      // api вже має baseURL, тому шлях відносний\n      await api.post('/fields/select/', {\n        fieldId: fieldId\n      });\n      console.log(`[AnalyticsField:selectField] Поле ID ${fieldId} успішно вибрано.`);\n    } catch (err) {\n      console.error(`[AnalyticsField:selectField] Помилка при виборі поля ID ${fieldId}:`, err);\n    }\n  };\n\n  // Функція для скасування вибору поля (запит POST на /fields/deselect/)\n  const deselectField = async fieldId => {\n    // ... (код функції deselectField залишається без змін)\n    if (!fieldId) {\n      console.log('[AnalyticsField:deselectField] Called with no valid ID, skipping API call.');\n      return;\n    }\n    try {\n      console.log(`[AnalyticsField:deselectField] Відправка запиту на deselect поля ID: ${fieldId}. Endpoint: /fields/deselect/`);\n      // api вже має baseURL, тому шлях відносний\n      await api.post('/fields/deselect/', {\n        fieldId: fieldId\n      });\n      console.log(`[AnalyticsField:deselectField:SUCCESS] Поле ID ${fieldId} успішно деселектнуто.`);\n    } catch (err) {\n      console.error(`[AnalyticsField:deselectField:ERROR] Не вдалося деселектнути поле ID ${fieldId}:`, err);\n    }\n  };\n\n  // Effect для завантаження даних, вибору поля та очищення\n  useEffect(() => {\n    console.log(`[AnalyticsField:useEffect:data] Effect running for ID: ${id}, timeRange: ${timeRange}`);\n\n    // Якщо немає ID, нічого не робимо з даними, але треба переконатися,\n    // що стан чистий (на випадок, якщо ID зник після того, як був).\n    if (!id) {\n      console.log('[AnalyticsField:useEffect:data] No ID in URL, clearing state.');\n      setChartData(null);\n      setError(null);\n      setIsLoading(false); // Зупиняємо завантаження, якщо воно було\n      return; // Виходимо з ефекту\n    }\n\n    // Вибираємо поле ПЕРЕД запитом даних. Це важливо, якщо бекенд\n    // використовує стан сесії для визначення активного поля.\n    selectField(id);\n    setIsLoading(true); // Починаємо завантаження\n    setError(null); // Скидаємо попередні помилки\n\n    // --- Змінено згідно з твоїм запитом ---\n    // Видалено змінну apiUrl. Використовуємо шлях безпосередньо в api.get.\n    // Припускаємо, що api налаштований з правильним baseURL.\n    console.log(`[AnalyticsField:useEffect:data] Fetching chart data using path: /field-measurements/chart/${timeRange} (ID ${id} is selected via POST)`);\n    api.get(`/field-measurements/chart/${timeRange}`) // Використовуємо запитуваний шлях\n    .then(response => {\n      var _response$data;\n      console.log('[AnalyticsField:useEffect:data] Received raw data:', response.data);\n      // Подальша обробка даних залишається такою ж, як і раніше\n      const rawData = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.aggregatedData;\n      if (!Array.isArray(rawData)) {\n        setChartData(null);\n        setError('Некоректна відповідь від сервера або дані відсутні.');\n        setIsLoading(false);\n        console.error('[AnalyticsField:useEffect:data] Unexpected API response format or missing aggregatedData:', response.data);\n        return;\n      }\n      console.log('[AnalyticsField:useEffect:data] Processing aggregatedData array:', rawData);\n\n      // --- Логіка трансформації даних (залишається як була) ---\n      const uniqueTimestampsSet = new Set();\n      rawData.forEach(sensor => {/* ... */});\n      const labels = Array.from(uniqueTimestampsSet).sort();\n      console.log('[AnalyticsField:useEffect:data] Generated labels:', labels);\n      const series = rawData.map(sensor => {/* ... */});\n      const chartistSeriesData = series.map(s => s.data);\n      console.log('[AnalyticsField:useEffect:data] Generated series (with names):', series);\n      console.log('[AnalyticsField:useEffect:data] Chartist series data:', chartistSeriesData);\n      // --- Кінець логіки трансформації ---\n\n      if (labels.length === 0 || chartistSeriesData.every(seriesData => Array.isArray(seriesData) && seriesData.every(point => point === null))) {\n        console.log('[AnalyticsField:useEffect:data] Transformed data is empty or contains only nulls.');\n        setChartData(null); // Встановлюємо null, щоб показати повідомлення \"немає даних\"\n      } else {\n        setChartData({\n          labels,\n          series: chartistSeriesData\n        });\n      }\n      setIsLoading(false); // Завершуємо завантаження\n    }).catch(err => {\n      var _err$response, _err$response$data;\n      console.error('[AnalyticsField:useEffect:data] Error fetching chart data:', err);\n      const message = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'Не вдалося завантажити дані графіка.';\n      setError(message); // Встановлюємо помилку\n      setChartData(null); // Скидаємо дані\n      setIsLoading(false); // Завершуємо завантаження\n    });\n\n    // Функція очищення: скасовуємо вибір поля\n    const fieldIdToDeselect = id; // Зберігаємо ID для функції очищення\n    return () => {\n      console.log(`[AnalyticsField:useEffect:data] Cleanup running for ID: ${fieldIdToDeselect}`);\n      if (fieldIdToDeselect) {\n        // Скасовуємо вибір поля при розмонтуванні або зміні ID\n        deselectField(fieldIdToDeselect);\n      }\n      // Також скидаємо стан, якщо компонент залишається змонтованим, але ID міняється\n      setChartData(null);\n      setError(null);\n      setIsLoading(false);\n    };\n  }, [id, timeRange]); // Залежності: ефект спрацює при зміні id або timeRange\n\n  // Effect для рендерингу графіка (залишається без змін)\n  useEffect(() => {\n    // ... (код рендерингу графіка з Chartist) ...\n    console.log('[AnalyticsField:useEffect:chart] Chart rendering effect running. ChartData:', chartData ? 'present' : 'null', 'Container:', chartContainerRef.current ? 'present' : 'null', 'Loading:', isLoading, 'Error:', error);\n    const hasPlottableData = chartData && Array.isArray(chartData.labels) && chartData.labels.length > 0 && Array.isArray(chartData.series) && chartData.series.length > 0 && chartData.series.some(seriesData => Array.isArray(seriesData) && seriesData.some(point => point !== null && point !== undefined));\n    if (hasPlottableData && chartContainerRef.current && !isLoading && !error) {\n      console.log('[AnalyticsField:useEffect:chart] Drawing chart...');\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.detach();\n        chartInstanceRef.current = null;\n      }\n      const options = {/* ... options ... */};\n      try {\n        chartInstanceRef.current = new LineChart(chartContainerRef.current, chartData, options);\n        chartInstanceRef.current.on('draw', function (data) {\n          // ... animation ...\n        });\n      } catch (chartError) {\n        console.error(\"[AnalyticsField:useEffect:chart] Error creating or drawing chart:\", chartError);\n        setError(\"Помилка відображення графіка.\"); // Можна встановити помилку\n      }\n    } else if (chartInstanceRef.current) {\n      console.log('[AnalyticsField:useEffect:chart] Data not plottable or state indicates no chart, destroying chart instance.');\n      try {\n        chartInstanceRef.current.detach();\n      } catch (detachError) {\n        console.error(\"[AnalyticsField:useEffect:chart] Error detaching chart:\", detachError);\n      }\n      chartInstanceRef.current = null;\n    }\n\n    // Функція очищення для ефекту рендерингу\n    return () => {\n      console.log('[AnalyticsField:useEffect:chart] Chart rendering effect cleanup running.');\n      if (chartInstanceRef.current) {\n        try {\n          chartInstanceRef.current.detach();\n        } catch (detachError) {\n          console.error(\"[AnalyticsField:useEffect:chart] Error detaching chart during cleanup:\", detachError);\n        }\n        chartInstanceRef.current = null;\n      }\n    };\n  }, [chartData, isLoading, error]); // Залежності: дані, статус завантаження, помилка\n\n  // Обробник зміни часового діапазону (залишається без змін)\n  const handleTimeRangeChange = range => {\n    setTimeRange(range);\n  };\n\n  // Рендеринг компонента (залишається без змін)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-content\",\n    className: \"w-full flex-1\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full xl:w-2/3 p-6 xl:max-w-6xl\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-full lg:max-w-3xl xl:max-w-5xl\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border-b p-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"font-bold text-black\",\n              children: [\"\\u0413\\u0440\\u0430\\u0444\\u0456\\u043A \\u0432\\u0438\\u043C\\u0456\\u0440\\u044E\\u0432\\u0430\\u043D\\u044C \", id ? `для поля ID: ${id}` : '']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex space-x-4 mt-2\",\n              children: ['7d', '6m', '1y'].map(range => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleTimeRangeChange(range),\n                className: `px-3 py-1 text-sm rounded ${timeRange === range ? 'bg-indigo-500 text-white' : 'bg-gray-300 text-gray-800'}`,\n                children: [range === '7d' && '7 днів', range === '6m' && '6 місяців', range === '1y' && '1 рік']\n              }, range, true, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-5\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ct-chart ct-golden-section\",\n              id: \"chart1\",\n              ref: chartContainerRef,\n              children: [!id && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-gray-500\",\n                children: \"\\u0411\\u0443\\u0434\\u044C \\u043B\\u0430\\u0441\\u043A\\u0430, \\u043E\\u0431\\u0435\\u0440\\u0456\\u0442\\u044C \\u043F\\u043E\\u043B\\u0435 \\u0437\\u0456 \\u0441\\u043F\\u0438\\u0441\\u043A\\u0443 \\u043B\\u0456\\u0432\\u043E\\u0440\\u0443\\u0447.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 42\n              }, this), id && isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-gray-500\",\n                children: \"\\u0417\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0434\\u0430\\u043D\\u0438\\u0445...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 54\n              }, this), id && error && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-red-500\",\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 50\n              }, this), id && !isLoading && !error && (!chartData || Array.isArray(chartData.series) && chartData.series.every(seriesData => Array.isArray(seriesData) && seriesData.every(point => point === null)) || Array.isArray(chartData.labels) && chartData.labels.length === 0) && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-gray-500\",\n                children: \"\\u0414\\u0430\\u043D\\u0456 \\u0434\\u043B\\u044F \\u043E\\u0431\\u0440\\u0430\\u043D\\u043E\\u0433\\u043E \\u043F\\u043E\\u043B\\u044F \\u0437\\u0430 \\u0446\\u0435\\u0439 \\u043F\\u0435\\u0440\\u0456\\u043E\\u0434 \\u043D\\u0435 \\u0437\\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u0456.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n};\n_s(AnalyticsField, \"wMNpjYejAGk5QGiYHXbUE2Uqp3g=\", false, function () {\n  return [useParams];\n});\n_c = AnalyticsField;\nexport default AnalyticsField;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsField\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useParams","Line","LineChart","Svg","api","jsxDEV","_jsxDEV","AnalyticsField","_s","id","timeRange","setTimeRange","chartData","setChartData","isLoading","setIsLoading","error","setError","chartContainerRef","chartInstanceRef","selectField","fieldId","console","log","post","err","deselectField","get","then","response","_response$data","data","rawData","aggregatedData","Array","isArray","uniqueTimestampsSet","Set","forEach","sensor","labels","from","sort","series","map","chartistSeriesData","s","length","every","seriesData","point","catch","_err$response","_err$response$data","message","fieldIdToDeselect","current","hasPlottableData","some","undefined","detach","options","on","chartError","detachError","handleTimeRangeChange","range","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/AnalyticsField.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Line as LineChart, Svg } from 'chartist'; // Використовуємо імпортовані частини\r\nimport 'chartist/dist/chartist.css';\r\nimport api from '../utils/api'; // Припускаємо, що це твій налаштований екземпляр Axios\r\n\r\nconst AnalyticsField = () => {\r\n    const { id } = useParams(); // Отримуємо ID поля з URL\r\n\r\n    const [timeRange, setTimeRange] = useState('7d'); // Стан для часового діапазону\r\n    const [chartData, setChartData] = useState(null); // Стан для даних графіка\r\n    const [isLoading, setIsLoading] = useState(false); // Стан завантаження\r\n    const [error, setError] = useState(null); // Стан помилки\r\n\r\n    const chartContainerRef = useRef(null); // Реф для контейнера графіка\r\n    const chartInstanceRef = useRef(null); // Реф для екземпляра графіка Chartist\r\n\r\n    // Функція для вибору поля (запит POST на /fields/select/)\r\n    const selectField = async (fieldId) => {\r\n        // ... (код функції selectField залишається без змін)\r\n        if (!fieldId) {\r\n            console.log('[AnalyticsField:selectField] Called with no valid ID, skipping API call.');\r\n            return;\r\n        }\r\n        try {\r\n            console.log(`[AnalyticsField:selectField] Відправка запиту на select поля ID: ${fieldId}. Endpoint: /fields/select/`);\r\n            // api вже має baseURL, тому шлях відносний\r\n            await api.post('/fields/select/', { fieldId: fieldId });\r\n            console.log(`[AnalyticsField:selectField] Поле ID ${fieldId} успішно вибрано.`);\r\n        } catch (err) {\r\n            console.error(`[AnalyticsField:selectField] Помилка при виборі поля ID ${fieldId}:`, err);\r\n        }\r\n    };\r\n\r\n    // Функція для скасування вибору поля (запит POST на /fields/deselect/)\r\n    const deselectField = async (fieldId) => {\r\n        // ... (код функції deselectField залишається без змін)\r\n        if (!fieldId) {\r\n            console.log('[AnalyticsField:deselectField] Called with no valid ID, skipping API call.');\r\n            return;\r\n        }\r\n        try {\r\n            console.log(`[AnalyticsField:deselectField] Відправка запиту на deselect поля ID: ${fieldId}. Endpoint: /fields/deselect/`);\r\n            // api вже має baseURL, тому шлях відносний\r\n            await api.post('/fields/deselect/', { fieldId: fieldId });\r\n            console.log(`[AnalyticsField:deselectField:SUCCESS] Поле ID ${fieldId} успішно деселектнуто.`);\r\n        } catch (err) {\r\n            console.error(`[AnalyticsField:deselectField:ERROR] Не вдалося деселектнути поле ID ${fieldId}:`, err);\r\n        }\r\n    };\r\n\r\n    // Effect для завантаження даних, вибору поля та очищення\r\n    useEffect(() => {\r\n        console.log(`[AnalyticsField:useEffect:data] Effect running for ID: ${id}, timeRange: ${timeRange}`);\r\n\r\n        // Якщо немає ID, нічого не робимо з даними, але треба переконатися,\r\n        // що стан чистий (на випадок, якщо ID зник після того, як був).\r\n        if (!id) {\r\n            console.log('[AnalyticsField:useEffect:data] No ID in URL, clearing state.');\r\n            setChartData(null);\r\n            setError(null);\r\n            setIsLoading(false); // Зупиняємо завантаження, якщо воно було\r\n            return; // Виходимо з ефекту\r\n        }\r\n\r\n        // Вибираємо поле ПЕРЕД запитом даних. Це важливо, якщо бекенд\r\n        // використовує стан сесії для визначення активного поля.\r\n        selectField(id);\r\n\r\n        setIsLoading(true); // Починаємо завантаження\r\n        setError(null); // Скидаємо попередні помилки\r\n\r\n        // --- Змінено згідно з твоїм запитом ---\r\n        // Видалено змінну apiUrl. Використовуємо шлях безпосередньо в api.get.\r\n        // Припускаємо, що api налаштований з правильним baseURL.\r\n        console.log(`[AnalyticsField:useEffect:data] Fetching chart data using path: /field-measurements/chart/${timeRange} (ID ${id} is selected via POST)`);\r\n\r\n        api.get(`/field-measurements/chart/${timeRange}`) // Використовуємо запитуваний шлях\r\n            .then(response => {\r\n                console.log('[AnalyticsField:useEffect:data] Received raw data:', response.data);\r\n                // Подальша обробка даних залишається такою ж, як і раніше\r\n                const rawData = response.data?.aggregatedData;\r\n\r\n                if (!Array.isArray(rawData)) {\r\n                    setChartData(null);\r\n                    setError('Некоректна відповідь від сервера або дані відсутні.');\r\n                    setIsLoading(false);\r\n                    console.error('[AnalyticsField:useEffect:data] Unexpected API response format or missing aggregatedData:', response.data);\r\n                    return;\r\n                }\r\n                console.log('[AnalyticsField:useEffect:data] Processing aggregatedData array:', rawData);\r\n\r\n                // --- Логіка трансформації даних (залишається як була) ---\r\n                const uniqueTimestampsSet = new Set();\r\n                rawData.forEach(sensor => { /* ... */ });\r\n                const labels = Array.from(uniqueTimestampsSet).sort();\r\n                console.log('[AnalyticsField:useEffect:data] Generated labels:', labels);\r\n\r\n                const series = rawData.map(sensor => { /* ... */ });\r\n                const chartistSeriesData = series.map(s => s.data);\r\n                console.log('[AnalyticsField:useEffect:data] Generated series (with names):', series);\r\n                console.log('[AnalyticsField:useEffect:data] Chartist series data:', chartistSeriesData);\r\n                // --- Кінець логіки трансформації ---\r\n\r\n                if (labels.length === 0 || chartistSeriesData.every(seriesData => Array.isArray(seriesData) && seriesData.every(point => point === null))) {\r\n                    console.log('[AnalyticsField:useEffect:data] Transformed data is empty or contains only nulls.');\r\n                    setChartData(null); // Встановлюємо null, щоб показати повідомлення \"немає даних\"\r\n                } else {\r\n                    setChartData({ labels, series: chartistSeriesData });\r\n                }\r\n\r\n                setIsLoading(false); // Завершуємо завантаження\r\n            })\r\n            .catch(err => {\r\n                console.error('[AnalyticsField:useEffect:data] Error fetching chart data:', err);\r\n                const message = err.response?.data?.message || err.message || 'Не вдалося завантажити дані графіка.';\r\n                setError(message); // Встановлюємо помилку\r\n                setChartData(null); // Скидаємо дані\r\n                setIsLoading(false); // Завершуємо завантаження\r\n            });\r\n\r\n        // Функція очищення: скасовуємо вибір поля\r\n        const fieldIdToDeselect = id; // Зберігаємо ID для функції очищення\r\n        return () => {\r\n            console.log(`[AnalyticsField:useEffect:data] Cleanup running for ID: ${fieldIdToDeselect}`);\r\n            if (fieldIdToDeselect) {\r\n                // Скасовуємо вибір поля при розмонтуванні або зміні ID\r\n                deselectField(fieldIdToDeselect);\r\n            }\r\n            // Також скидаємо стан, якщо компонент залишається змонтованим, але ID міняється\r\n            setChartData(null);\r\n            setError(null);\r\n            setIsLoading(false);\r\n        };\r\n\r\n    }, [id, timeRange]); // Залежності: ефект спрацює при зміні id або timeRange\r\n\r\n    // Effect для рендерингу графіка (залишається без змін)\r\n    useEffect(() => {\r\n        // ... (код рендерингу графіка з Chartist) ...\r\n        console.log('[AnalyticsField:useEffect:chart] Chart rendering effect running. ChartData:', chartData ? 'present' : 'null', 'Container:', chartContainerRef.current ? 'present' : 'null', 'Loading:', isLoading, 'Error:', error);\r\n\r\n        const hasPlottableData = chartData &&\r\n            Array.isArray(chartData.labels) && chartData.labels.length > 0 &&\r\n            Array.isArray(chartData.series) && chartData.series.length > 0 &&\r\n            chartData.series.some(seriesData => Array.isArray(seriesData) && seriesData.some(point => point !== null && point !== undefined));\r\n\r\n\r\n        if (hasPlottableData && chartContainerRef.current && !isLoading && !error) {\r\n            console.log('[AnalyticsField:useEffect:chart] Drawing chart...');\r\n            if (chartInstanceRef.current) {\r\n                chartInstanceRef.current.detach();\r\n                chartInstanceRef.current = null;\r\n            }\r\n\r\n            const options = { /* ... options ... */ };\r\n\r\n            try {\r\n                chartInstanceRef.current = new LineChart(\r\n                    chartContainerRef.current,\r\n                    chartData,\r\n                    options\r\n                );\r\n\r\n                chartInstanceRef.current.on('draw', function(data) {\r\n                    // ... animation ...\r\n                });\r\n            } catch (chartError) {\r\n                console.error(\"[AnalyticsField:useEffect:chart] Error creating or drawing chart:\", chartError);\r\n                setError(\"Помилка відображення графіка.\"); // Можна встановити помилку\r\n            }\r\n\r\n        } else if (chartInstanceRef.current) {\r\n            console.log('[AnalyticsField:useEffect:chart] Data not plottable or state indicates no chart, destroying chart instance.');\r\n            try {\r\n                chartInstanceRef.current.detach();\r\n            } catch (detachError) {\r\n                console.error(\"[AnalyticsField:useEffect:chart] Error detaching chart:\", detachError);\r\n            }\r\n            chartInstanceRef.current = null;\r\n        }\r\n\r\n        // Функція очищення для ефекту рендерингу\r\n        return () => {\r\n            console.log('[AnalyticsField:useEffect:chart] Chart rendering effect cleanup running.');\r\n            if (chartInstanceRef.current) {\r\n                try {\r\n                    chartInstanceRef.current.detach();\r\n                } catch (detachError) {\r\n                    console.error(\"[AnalyticsField:useEffect:chart] Error detaching chart during cleanup:\", detachError);\r\n                }\r\n                chartInstanceRef.current = null;\r\n            }\r\n        };\r\n    }, [chartData, isLoading, error]); // Залежності: дані, статус завантаження, помилка\r\n\r\n    // Обробник зміни часового діапазону (залишається без змін)\r\n    const handleTimeRangeChange = (range) => {\r\n        setTimeRange(range);\r\n    };\r\n\r\n    // Рендеринг компонента (залишається без змін)\r\n    return (\r\n        <div id=\"main-content\" className=\"w-full flex-1\">\r\n            {/* ... (решта JSX розмітки без змін) ... */}\r\n            <div className=\"flex flex-wrap\">\r\n                <div className=\"w-full xl:w-2/3 p-6 xl:max-w-6xl\">\r\n                    <div className=\"max-w-full lg:max-w-3xl xl:max-w-5xl\">\r\n                        <div className=\"border-b p-3\">\r\n                            <h5 className=\"font-bold text-black\">Графік вимірювань {id ? `для поля ID: ${id}` : ''}</h5>\r\n                            <div className=\"flex space-x-4 mt-2\">\r\n                                {['7d', '6m', '1y'].map(range => (\r\n                                    <button\r\n                                        key={range}\r\n                                        onClick={() => handleTimeRangeChange(range)}\r\n                                        className={`px-3 py-1 text-sm rounded ${timeRange === range ? 'bg-indigo-500 text-white' : 'bg-gray-300 text-gray-800'}`}\r\n                                    >\r\n                                        {range === '7d' && '7 днів'}\r\n                                        {range === '6m' && '6 місяців'}\r\n                                        {range === '1y' && '1 рік'}\r\n                                    </button>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"p-5\">\r\n                            <div className=\"ct-chart ct-golden-section\" id=\"chart1\" ref={chartContainerRef}>\r\n                                {/* Умовний рендеринг повідомлень */}\r\n                                {!id && (<p className=\"text-center text-gray-500\">Будь ласка, оберіть поле зі списку ліворуч.</p>)}\r\n                                {id && isLoading && (<p className=\"text-center text-gray-500\">Завантаження даних...</p>)}\r\n                                {id && error && (<p className=\"text-center text-red-500\">{error}</p>)}\r\n                                {id && !isLoading && !error && (!chartData || (Array.isArray(chartData.series) && chartData.series.every(seriesData => Array.isArray(seriesData) && seriesData.every(point => point === null))) || (Array.isArray(chartData.labels) && chartData.labels.length === 0)) && (\r\n                                    <p className=\"text-center text-gray-500\">Дані для обраного поля за цей період не знайдені.</p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        {/* ... (решта JSX: таблиця, інші графіки) ... */}\r\n                    </div>\r\n                </div>\r\n                {/* ... друга колонка ... */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalyticsField;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}