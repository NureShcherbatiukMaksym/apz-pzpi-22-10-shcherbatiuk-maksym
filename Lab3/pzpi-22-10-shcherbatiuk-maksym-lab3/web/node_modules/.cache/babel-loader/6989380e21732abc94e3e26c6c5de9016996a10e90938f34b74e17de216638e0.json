{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$();\n// contexts/UserContext.js\nimport React, { createContext, useState, useEffect, useCallback } from 'react'; // Додано useCallback\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [hasDevice, setHasDevice] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null); // Додано стан для помилки\n\n  // Виносимо логіку завантаження користувача в окрему функцію\n  const fetchUser = useCallback(async () => {\n    setLoading(true); // Починаємо завантаження\n    setError(null); // Скидаємо попередні помилки\n    try {\n      const res = await api.get('/users/me');\n      if (res.data) {\n        setUser(res.data);\n        setIsAdmin(res.data.is_admin || false);\n        // Перевіряємо, чи є пристрій у користувача\n        // Важливо: цей запит також має бути авторизованим\n        const devicesRes = await api.get('/user-iot-devices');\n        setHasDevice(devicesRes.data && devicesRes.data.length > 0);\n        console.log('User data fetched successfully.');\n      } else {\n        // Якщо res.data порожній або null, можливо, сесія неактивна\n        setUser(null);\n        setIsAdmin(false);\n        setHasDevice(false);\n        console.log('No user data returned from /users/me.');\n      }\n    } catch (err) {\n      console.error('Failed to fetch user data:', err);\n      setUser(null); // Встановлюємо користувача в null при помилці\n      setIsAdmin(false);\n      setHasDevice(false);\n      // Можна зберегти помилку, якщо потрібно відобразити її глобально\n      // setError(err);\n    } finally {\n      setLoading(false); // Завжди завершуємо завантаження\n    }\n  }, []); // Залежності порожні, функція створюється один раз\n\n  // useEffect для першого завантаження при монтуванні провайдера\n  useEffect(() => {\n    fetchUser();\n  }, [fetchUser]); // Залежність від fetchUser (яка обгорнута в useCallback)\n\n  // Функція для виходу з системи (приклад)\n  const logoutUser = useCallback(async () => {\n    // Припускаємо, що у вас є API endpoint для виходу\n    try {\n      await api.post('/auth/logout'); // Замініть на ваш реальний шлях\n      setUser(null);\n      setIsAdmin(false);\n      setHasDevice(false);\n      // Очистити локальне сховище або куки, якщо використовуєте\n      // localStorage.removeItem('token');\n      console.log('User logged out.');\n    } catch (err) {\n      console.error('Failed to log out:', err);\n      // Навіть якщо вихід на бекенді не вдався, очищаємо стан на фронтенді\n      setUser(null);\n      setIsAdmin(false);\n      setHasDevice(false);\n    }\n  }, []);\n\n  // Значення контексту, що передається дочірнім компонентам\n  const contextValue = {\n    user,\n    isAdmin,\n    hasDevice,\n    loading,\n    error,\n    // Додаємо функцію для оновлення користувача до контексту\n    fetchUser,\n    // Можна додати функцію виходу\n    logoutUser\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProvider, \"lov1wDkmLNt0jWTiqqseKafZiWs=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","api","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","isAdmin","setIsAdmin","hasDevice","setHasDevice","loading","setLoading","error","setError","fetchUser","res","get","data","is_admin","devicesRes","length","console","log","err","logoutUser","post","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/contexts/UserContext.js"],"sourcesContent":["// contexts/UserContext.js\r\nimport React, { createContext, useState, useEffect, useCallback } from 'react'; // Додано useCallback\r\nimport api from '../utils/api';\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n    const [hasDevice, setHasDevice] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null); // Додано стан для помилки\r\n\r\n    // Виносимо логіку завантаження користувача в окрему функцію\r\n    const fetchUser = useCallback(async () => {\r\n        setLoading(true); // Починаємо завантаження\r\n        setError(null);   // Скидаємо попередні помилки\r\n        try {\r\n            const res = await api.get('/users/me');\r\n            if (res.data) {\r\n                setUser(res.data);\r\n                setIsAdmin(res.data.is_admin || false);\r\n                // Перевіряємо, чи є пристрій у користувача\r\n                // Важливо: цей запит також має бути авторизованим\r\n                const devicesRes = await api.get('/user-iot-devices');\r\n                setHasDevice(devicesRes.data && devicesRes.data.length > 0);\r\n                console.log('User data fetched successfully.');\r\n            } else {\r\n                // Якщо res.data порожній або null, можливо, сесія неактивна\r\n                setUser(null);\r\n                setIsAdmin(false);\r\n                setHasDevice(false);\r\n                console.log('No user data returned from /users/me.');\r\n            }\r\n        } catch (err) {\r\n            console.error('Failed to fetch user data:', err);\r\n            setUser(null); // Встановлюємо користувача в null при помилці\r\n            setIsAdmin(false);\r\n            setHasDevice(false);\r\n            // Можна зберегти помилку, якщо потрібно відобразити її глобально\r\n            // setError(err);\r\n        } finally {\r\n            setLoading(false); // Завжди завершуємо завантаження\r\n        }\r\n    }, []); // Залежності порожні, функція створюється один раз\r\n\r\n    // useEffect для першого завантаження при монтуванні провайдера\r\n    useEffect(() => {\r\n        fetchUser();\r\n    }, [fetchUser]); // Залежність від fetchUser (яка обгорнута в useCallback)\r\n\r\n    // Функція для виходу з системи (приклад)\r\n    const logoutUser = useCallback(async () => {\r\n        // Припускаємо, що у вас є API endpoint для виходу\r\n        try {\r\n            await api.post('/auth/logout'); // Замініть на ваш реальний шлях\r\n            setUser(null);\r\n            setIsAdmin(false);\r\n            setHasDevice(false);\r\n            // Очистити локальне сховище або куки, якщо використовуєте\r\n            // localStorage.removeItem('token');\r\n            console.log('User logged out.');\r\n        } catch (err) {\r\n            console.error('Failed to log out:', err);\r\n            // Навіть якщо вихід на бекенді не вдався, очищаємо стан на фронтенді\r\n            setUser(null);\r\n            setIsAdmin(false);\r\n            setHasDevice(false);\r\n        }\r\n    }, []);\r\n\r\n\r\n    // Значення контексту, що передається дочірнім компонентам\r\n    const contextValue = {\r\n        user,\r\n        isAdmin,\r\n        hasDevice,\r\n        loading,\r\n        error,\r\n        // Додаємо функцію для оновлення користувача до контексту\r\n        fetchUser,\r\n        // Можна додати функцію виходу\r\n        logoutUser\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={contextValue}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}