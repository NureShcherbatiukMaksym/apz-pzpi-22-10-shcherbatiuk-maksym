{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react'; // Додано useEffect\nimport api from '../utils/api';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, googleProvider } from '../firebase';\nimport { signInWithPopup } from 'firebase/auth';\nimport { UserContext } from '../contexts/UserContext';\nimport AuthForm from '../components/AuthForm';\nimport { useTranslation } from \"react-i18next\"; // Імпортуємо useTranslation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    user,\n    handleLoginSuccess\n  } = useContext(UserContext);\n  const {\n    t,\n    i18n\n  } = useTranslation(); // Отримуємо t та i18n\n\n  const [loginInProgress, setLoginInProgress] = useState(false);\n  const [formError, setFormError] = useState(null);\n\n  // Стан та логіка для перемикача мови\n  const [isEnglish, setIsEnglish] = useState(true); // Припускаємо, що англійська за замовчуванням, буде оновлено в useEffect\n\n  const toggleLanguage = () => {\n    const newLang = isEnglish ? 'uk' : 'en'; // Змінено логіку перемикання: з UK на EN і навпаки\n    i18n.changeLanguage(newLang);\n    localStorage.setItem('language', newLang);\n    setIsEnglish(!isEnglish);\n  };\n\n  // useEffect для ініціалізації мови при завантаженні компонента\n  useEffect(() => {\n    const storedLang = localStorage.getItem('language');\n    const initialLang = storedLang || 'en'; // англійська за замовчуванням\n    i18n.changeLanguage(initialLang);\n    // Перевіряємо, чи поточна мова - українська, щоб встановити початковий стан перемикача\n    setIsEnglish(initialLang === 'en'); // Якщо початкова мова EN, перемикач має бути \"вимкнений\" (зліва), що відповідає true для isEnglish = EN\n  }, [i18n]); // Додано i18n як залежність\n\n  // Перенаправлення, якщо користувач вже залогінений\n  if (user) {\n    console.log('LoginPage: User is already logged in, navigating to /.');\n    navigate('/', {\n      replace: true\n    });\n    return null;\n  }\n\n  // --- Логіка стандартного логіну (email/password) ---\n  const handleLogin = async ({\n    email,\n    password\n  }) => {\n    setLoginInProgress(true);\n    setFormError(null);\n    console.log('LoginPage: Attempting password login with data:', {\n      email,\n      password\n    });\n    try {\n      const res = await api.post('/auth/login/password', {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Password login success. Response received.');\n      const {\n        user\n      } = res.data;\n      handleLoginSuccess(user); // Викликаємо handleLoginSuccess\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('LoginPage: Password login error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Помилка входу';\n      setFormError(errorMessage);\n      alert('Помилка входу: ' + errorMessage);\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n\n  // --- Логіка логіну через Google ---\n  const handleGoogleLogin = async () => {\n    setLoginInProgress(true);\n    setFormError(null);\n    console.log('LoginPage: Initiating Google sign-in popup.');\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const token = await result.user.getIdToken();\n      console.log('LoginPage: Firebase Google auth success. Token obtained.');\n      console.log('LoginPage: Sending Google token to backend /auth/login/google...');\n      const res = await api.post('/auth/login/google', {\n        token\n      }, {\n        withCredentials: true\n      });\n      console.log('LoginPage: Backend Google login success. Response received.', res.data);\n      const {\n        user\n      } = res.data;\n      handleLoginSuccess(user); // Викликаємо handleLoginSuccess\n    } catch (error) {\n      console.error('LoginPage: Google login error:', error);\n      const errorMessage = error.message || 'Помилка авторизації через Google';\n      setFormError(errorMessage);\n      alert('Помилка авторизації через Google: ' + errorMessage);\n    } finally {\n      setLoginInProgress(false);\n    }\n  };\n\n  // Функція для переходу на сторінку реєстрації (використовується кнопкою перемикання в AuthForm)\n  const switchToRegister = () => {\n    navigate('/register');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center min-h-screen py-2\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleLanguage,\n          className: \"flex items-center justify-between w-12 h-6 bg-gray-300 rounded-full px-1 border border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500\" // Додано focus стилі\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `w-4 h-4 bg-white rounded-full shadow-md transform duration-300 ease-in-out ${isEnglish ? 'translate-x-0' : 'translate-x-6'}` // Змінено логіку translateX для UK\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs text-center mt-1\",\n          children: i18n.language === 'en' ? 'EN' : 'UK'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), formError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px',\n        textAlign: 'center'\n      },\n      children: formError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      type: \"login\",\n      onSubmit: handleLogin,\n      onGoogleLogin: handleGoogleLogin,\n      isSubmitting: loginInProgress,\n      onSwitchType: switchToRegister\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginPage, \"MM9RkISzRMF5oWaX21bYElPZ0oo=\", false, function () {\n  return [useNavigate, useTranslation];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","useEffect","api","useNavigate","auth","googleProvider","signInWithPopup","UserContext","AuthForm","useTranslation","jsxDEV","_jsxDEV","LoginPage","_s","navigate","user","handleLoginSuccess","t","i18n","loginInProgress","setLoginInProgress","formError","setFormError","isEnglish","setIsEnglish","toggleLanguage","newLang","changeLanguage","localStorage","setItem","storedLang","getItem","initialLang","console","log","replace","handleLogin","email","password","res","post","withCredentials","data","err","_err$response","_err$response2","_err$response2$data","error","response","message","errorMessage","alert","handleGoogleLogin","result","token","getIdToken","switchToRegister","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","language","style","color","marginBottom","textAlign","type","onSubmit","onGoogleLogin","isSubmitting","onSwitchType","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/pages/LoginPage.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react'; // Додано useEffect\r\nimport api from '../utils/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { auth, googleProvider } from '../firebase';\r\nimport { signInWithPopup } from 'firebase/auth';\r\nimport { UserContext } from '../contexts/UserContext';\r\nimport AuthForm from '../components/AuthForm';\r\nimport { useTranslation } from \"react-i18next\"; // Імпортуємо useTranslation\r\n\r\nexport default function LoginPage() {\r\n    const navigate = useNavigate();\r\n    const { user, handleLoginSuccess } = useContext(UserContext);\r\n    const { t, i18n } = useTranslation(); // Отримуємо t та i18n\r\n\r\n    const [loginInProgress, setLoginInProgress] = useState(false);\r\n    const [formError, setFormError] = useState(null);\r\n\r\n    // Стан та логіка для перемикача мови\r\n    const [isEnglish, setIsEnglish] = useState(true); // Припускаємо, що англійська за замовчуванням, буде оновлено в useEffect\r\n\r\n    const toggleLanguage = () => {\r\n        const newLang = isEnglish ? 'uk' : 'en'; // Змінено логіку перемикання: з UK на EN і навпаки\r\n        i18n.changeLanguage(newLang);\r\n        localStorage.setItem('language', newLang);\r\n        setIsEnglish(!isEnglish);\r\n    };\r\n\r\n    // useEffect для ініціалізації мови при завантаженні компонента\r\n    useEffect(() => {\r\n        const storedLang = localStorage.getItem('language');\r\n        const initialLang = storedLang || 'en'; // англійська за замовчуванням\r\n        i18n.changeLanguage(initialLang);\r\n        // Перевіряємо, чи поточна мова - українська, щоб встановити початковий стан перемикача\r\n        setIsEnglish(initialLang === 'en'); // Якщо початкова мова EN, перемикач має бути \"вимкнений\" (зліва), що відповідає true для isEnglish = EN\r\n    }, [i18n]); // Додано i18n як залежність\r\n\r\n    // Перенаправлення, якщо користувач вже залогінений\r\n    if (user) {\r\n        console.log('LoginPage: User is already logged in, navigating to /.');\r\n        navigate('/', { replace: true });\r\n        return null;\r\n    }\r\n\r\n    // --- Логіка стандартного логіну (email/password) ---\r\n    const handleLogin = async ({ email, password }) => {\r\n        setLoginInProgress(true);\r\n        setFormError(null);\r\n        console.log('LoginPage: Attempting password login with data:', { email, password });\r\n        try {\r\n            const res = await api.post('/auth/login/password', { email, password }, {\r\n                withCredentials: true\r\n            });\r\n            console.log('LoginPage: Password login success. Response received.');\r\n            const { user } = res.data;\r\n            handleLoginSuccess(user); // Викликаємо handleLoginSuccess\r\n        } catch (err) {\r\n            console.error('LoginPage: Password login error:', err.response?.data || err.message);\r\n            const errorMessage = err.response?.data?.message || 'Помилка входу';\r\n            setFormError(errorMessage);\r\n            alert('Помилка входу: ' + errorMessage);\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    // --- Логіка логіну через Google ---\r\n    const handleGoogleLogin = async () => {\r\n        setLoginInProgress(true);\r\n        setFormError(null);\r\n        console.log('LoginPage: Initiating Google sign-in popup.');\r\n        try {\r\n            const result = await signInWithPopup(auth, googleProvider);\r\n            const token = await result.user.getIdToken();\r\n            console.log('LoginPage: Firebase Google auth success. Token obtained.');\r\n            console.log('LoginPage: Sending Google token to backend /auth/login/google...');\r\n            const res = await api.post('/auth/login/google', { token }, { withCredentials: true });\r\n            console.log('LoginPage: Backend Google login success. Response received.', res.data);\r\n            const { user } = res.data;\r\n            handleLoginSuccess(user); // Викликаємо handleLoginSuccess\r\n        } catch (error) {\r\n            console.error('LoginPage: Google login error:', error);\r\n            const errorMessage = error.message || 'Помилка авторизації через Google';\r\n            setFormError(errorMessage);\r\n            alert('Помилка авторизації через Google: ' + errorMessage);\r\n        } finally {\r\n            setLoginInProgress(false);\r\n        }\r\n    };\r\n\r\n    // Функція для переходу на сторінку реєстрації (використовується кнопкою перемикання в AuthForm)\r\n    const switchToRegister = () => {\r\n        navigate('/register');\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center min-h-screen py-2\"> {/* Додаємо обгортку для центрування */}\r\n            {/* Розміщуємо перемикач мови */}\r\n            <div className=\"mt-8\"> {/* Додайте відступ зверху */}\r\n                <div className=\"relative\">\r\n                    <button\r\n                        onClick={toggleLanguage}\r\n                        className=\"flex items-center justify-between w-12 h-6 bg-gray-300 rounded-full px-1 border border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500\" // Додано focus стилі\r\n                    >\r\n                        <span\r\n                            className={`w-4 h-4 bg-white rounded-full shadow-md transform duration-300 ease-in-out ${isEnglish ? 'translate-x-0' : 'translate-x-6'}`} // Змінено логіку translateX для UK\r\n                        ></span>\r\n                    </button>\r\n                    <div className=\"text-xs text-center mt-1\">\r\n                        {/* Текст залежить від стану isEnglish, але відображає поточну мову */}\r\n                        {i18n.language === 'en' ? 'EN' : 'UK'}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {formError && <div style={{ color: 'red', marginBottom: '10px', textAlign: 'center' }}>{formError}</div>}\r\n\r\n            <AuthForm\r\n                type=\"login\"\r\n                onSubmit={handleLogin}\r\n                onGoogleLogin={handleGoogleLogin}\r\n                isSubmitting={loginInProgress}\r\n                onSwitchType={switchToRegister}\r\n            />\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}