{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\WebstormProjects\\\\soil_scout\\\\web\\\\src\\\\components\\\\LanguageSwitcher.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Повертаємо useState для стану ініціалізації\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LanguageSwitcher() {\n  _s();\n  // Отримуємо об'єкт i18n через хук useTranslation\n  const {\n    i18n\n  } = useTranslation();\n\n  // Стан для відстеження, чи компонент завершив ініціалізацію мови\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Визначаємо, чи є поточною мовою англійська. Це значення буде коректним\n  // тільки після того, як isInitialized стане true.\n  const isEnglish = i18n.language === 'en';\n  const toggleLanguage = () => {\n    // Запобігаємо перемиканню, якщо компонент ще не ініціалізовано\n    if (!isInitialized) {\n      console.log(\"Language switcher is not initialized yet, ignoring toggle click.\");\n      return;\n    }\n\n    // Визначаємо нову мову для перемикання\n    const newLang = i18n.language === 'en' ? 'uk' : 'en';\n\n    // Змінюємо мову через i18n та оновлюємо в localStorage\n    i18n.changeLanguage(newLang);\n    localStorage.setItem('language', newLang);\n    // Хук useTranslation автоматично викличе ререндер після зміни мови.\n  };\n  useEffect(() => {\n    // Цей ефект виконується ОДИН РАЗ при першому монтуванні компонента.\n    // Він відповідає за встановлення початкової мови з localStorage або 'en' за замовчуванням.\n\n    const storedLang = localStorage.getItem('language');\n    // Встановлюємо початкову мову: або збережену, або АНГЛІЙСЬКУ ('en') за замовчуванням.\n    const initialLang = storedLang || 'en';\n\n    // Встановлюємо мову в i18n. changeLanguage може бути асинхронним.\n    // react-i18next повертає Promise з changeLanguage, що дозволяє дізнатись, коли зміна завершилась.\n    i18n.changeLanguage(initialLang).then(() => {\n      // Цей код виконається тільки після того, як зміна мови в i18n завершиться.\n      localStorage.setItem('language', initialLang); // Переконаємось, що localStorage відповідає встановленій мові\n      setIsInitialized(true); // Відзначаємо компонент як ініціалізований\n      console.log(`LanguageSwitcher initialized. Initial language set to: ${i18n.language}`);\n    }).catch(error => {\n      console.error(\"Error setting initial language:\", error);\n      // Навіть у випадку помилки, щоб уникнути зависання, можна відзначити як ініціалізований\n      setIsInitialized(true);\n    });\n\n    // Порожній масив залежностей означає, що ефект спрацює тільки один раз при монтуванні.\n  }, []);\n\n  // Якщо компонент ще не ініціалізовано, показуємо тимчасовий плейсхолдер\n  // Це запобігає відображенню неправильного початкового стану світчера ('UK' справа)\n  if (!isInitialized) {\n    return (\n      /*#__PURE__*/\n      // Можна повернути null або простий спінер/плейсхолдер\n      _jsxDEV(\"div\", {\n        className: \"flex flex-col items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center w-12 h-6 bg-gray-200 rounded-full px-1 border border-gray-300 animate-pulse\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"w-4 h-4 bg-gray-400 rounded-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs text-center mt-1 text-gray-500\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n  // Після ініціалізації рендеримо сам світчер\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleLanguage\n      // Можна також деактивувати кнопку, поки не ініціалізовано, але ми вже перевіряємо в toggleLanguage\n      ,\n      className: \"flex items-center w-12 h-6 bg-gray-300 rounded-full px-1 border border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300 ease-in-out\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        // Кружечок перемикача. Положення тепер базується на i18n.language ПІСЛЯ ініціалізації.\n        // translate-x-0 (ліворуч) для isEnglish (мови 'en').\n        // translate-x-6 (праворуч) для !isEnglish (мови 'uk').\n        className: `w-4 h-4 bg-white rounded-full shadow-md transform duration-300 ease-in-out ${isEnglish ? 'translate-x-0' : 'translate-x-6'}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-xs text-center mt-1\",\n      children: i18n.language.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(LanguageSwitcher, \"aDXR0l2JKi4x2KvwUxc+d7Ubyts=\", false, function () {\n  return [useTranslation];\n});\n_c = LanguageSwitcher;\nvar _c;\n$RefreshReg$(_c, \"LanguageSwitcher\");","map":{"version":3,"names":["React","useState","useEffect","useTranslation","jsxDEV","_jsxDEV","LanguageSwitcher","_s","i18n","isInitialized","setIsInitialized","isEnglish","language","toggleLanguage","console","log","newLang","changeLanguage","localStorage","setItem","storedLang","getItem","initialLang","then","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toUpperCase","_c","$RefreshReg$"],"sources":["D:/Program Files/WebstormProjects/soil_scout/web/src/components/LanguageSwitcher.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Повертаємо useState для стану ініціалізації\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport default function LanguageSwitcher() {\r\n    // Отримуємо об'єкт i18n через хук useTranslation\r\n    const { i18n } = useTranslation();\r\n\r\n    // Стан для відстеження, чи компонент завершив ініціалізацію мови\r\n    const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n    // Визначаємо, чи є поточною мовою англійська. Це значення буде коректним\r\n    // тільки після того, як isInitialized стане true.\r\n    const isEnglish = i18n.language === 'en';\r\n\r\n    const toggleLanguage = () => {\r\n        // Запобігаємо перемиканню, якщо компонент ще не ініціалізовано\r\n        if (!isInitialized) {\r\n            console.log(\"Language switcher is not initialized yet, ignoring toggle click.\");\r\n            return;\r\n        }\r\n\r\n        // Визначаємо нову мову для перемикання\r\n        const newLang = i18n.language === 'en' ? 'uk' : 'en';\r\n\r\n        // Змінюємо мову через i18n та оновлюємо в localStorage\r\n        i18n.changeLanguage(newLang);\r\n        localStorage.setItem('language', newLang);\r\n        // Хук useTranslation автоматично викличе ререндер після зміни мови.\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Цей ефект виконується ОДИН РАЗ при першому монтуванні компонента.\r\n        // Він відповідає за встановлення початкової мови з localStorage або 'en' за замовчуванням.\r\n\r\n        const storedLang = localStorage.getItem('language');\r\n        // Встановлюємо початкову мову: або збережену, або АНГЛІЙСЬКУ ('en') за замовчуванням.\r\n        const initialLang = storedLang || 'en';\r\n\r\n        // Встановлюємо мову в i18n. changeLanguage може бути асинхронним.\r\n        // react-i18next повертає Promise з changeLanguage, що дозволяє дізнатись, коли зміна завершилась.\r\n        i18n.changeLanguage(initialLang).then(() => {\r\n            // Цей код виконається тільки після того, як зміна мови в i18n завершиться.\r\n            localStorage.setItem('language', initialLang); // Переконаємось, що localStorage відповідає встановленій мові\r\n            setIsInitialized(true); // Відзначаємо компонент як ініціалізований\r\n            console.log(`LanguageSwitcher initialized. Initial language set to: ${i18n.language}`);\r\n        }).catch(error => {\r\n            console.error(\"Error setting initial language:\", error);\r\n            // Навіть у випадку помилки, щоб уникнути зависання, можна відзначити як ініціалізований\r\n            setIsInitialized(true);\r\n        });\r\n\r\n        // Порожній масив залежностей означає, що ефект спрацює тільки один раз при монтуванні.\r\n    }, []);\r\n\r\n\r\n    // Якщо компонент ще не ініціалізовано, показуємо тимчасовий плейсхолдер\r\n    // Це запобігає відображенню неправильного початкового стану світчера ('UK' справа)\r\n    if (!isInitialized) {\r\n        return (\r\n            // Можна повернути null або простий спінер/плейсхолдер\r\n            <div className=\"flex flex-col items-center\">\r\n                <div className=\"flex items-center w-12 h-6 bg-gray-200 rounded-full px-1 border border-gray-300 animate-pulse\">\r\n                    {/* Візуальний індикатор завантаження */}\r\n                    <span className=\"w-4 h-4 bg-gray-400 rounded-full\"></span>\r\n                </div>\r\n                {/* Текст індикатора завантаження */}\r\n                <div className=\"text-xs text-center mt-1 text-gray-500\">Loading...</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Після ініціалізації рендеримо сам світчер\r\n    return (\r\n        <div className=\"flex flex-col items-center\">\r\n            <button\r\n                onClick={toggleLanguage}\r\n                // Можна також деактивувати кнопку, поки не ініціалізовано, але ми вже перевіряємо в toggleLanguage\r\n                className=\"flex items-center w-12 h-6 bg-gray-300 rounded-full px-1 border border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-300 ease-in-out\"\r\n            >\r\n                <span\r\n                    // Кружечок перемикача. Положення тепер базується на i18n.language ПІСЛЯ ініціалізації.\r\n                    // translate-x-0 (ліворуч) для isEnglish (мови 'en').\r\n                    // translate-x-6 (праворуч) для !isEnglish (мови 'uk').\r\n                    className={`w-4 h-4 bg-white rounded-full shadow-md transform duration-300 ease-in-out ${isEnglish ? 'translate-x-0' : 'translate-x-6'}`}\r\n                ></span>\r\n            </button>\r\n            <div className=\"text-xs text-center mt-1\">\r\n                {/* Відображаємо поточне скорочення мови */}\r\n                {i18n.language.toUpperCase()}\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}