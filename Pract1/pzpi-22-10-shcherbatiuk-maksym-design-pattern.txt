 
Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки 
Кафедра програмної інженерії 
  
 
 
 
 
 
 
Практична робота №2 
з дисципліни: «Архітектура програмного забезпечення» 
  
 
 
 
 
  
Виконав:                                                                            Перевірив: 
ст. гр. ПЗПІ-22-10                                                              Ст. в. Сокорчук І. П.  
Щербатюк М.О.
 
                                                  	 	 	 	 
 
 
 
 
Харків 2025  
1 Патерни проєктування
1.1 Історія змін 
 
 	Зміни в документі нотуються до таблиці 1.1. 	 
 
Таблиця 1.1 – Історія змін 
№ Дата Версія звіту Опис змін та виправлень 1 02.04.25 0.1 Створено базову структуру звіту про патерн проектування «Decorator», додано титульну сторінку та розділ «Історія змін». 2 03.04.25 0.2 Створено розділ «Завдання до практичної роботи»3 03.04.25 0.3 Додано розділ «Опис виконаної роботи»4 03.04.25 0.4 Створено розділ «Висновки» 5 02.04.25 0.5 Додано додаток А з посиланням на відеоролик 6 02.04.25 0.6 Додано додаток Б зі слайдами презентації 7 02.04.25 0.7 Додано додаток В з використовуваним кодом  	
 
1.2 Завдання до практичної роботи 
 
     У межах даної практичної роботи потрібно дослідити патерн проектування Decorator, створити презентацію, навести приклади використання.

1.3 Опис виконаної роботи 
 
     У ході практичної роботи було досліджено патерн проєктування Decorator (Декоратор). Було розглянуто його основні принципи, переваги та недоліки.
     Для закріплення теоретичних знань було продемонстровано перевагу використання декоратора над спадкуванням з діаграми класів, розроблено інший приклад використання декоратора на мові PHP, який демонструє покращення функціоналу відеоплеєра шляхом додавання можливостей зміни мови, налаштування якості відео.

1.4 Висновки 
      У результаті дослідження патерна Decorator було виявлено, що цей підхід є ефективним способом динамічного розширення функціоналу об’єктів без необхідності змінювати їхній вихідний код або створювати велику ієрархію класів через спадкування. Однак, використання декораторів може ускладнити конфігурацію об'єктів, особливо коли одночасно застосовуються кілька обгорток. Також воно може призвести до появи великої кількості дрібних класів, що може ускладнити підтримку коду. Проте Decorator є потужним інструментом для розширення функціональності в об'єктно-орієнтованому програмуванні та забезпечує гнучке та масштабоване рішення там, де традиційне спадкування створює обмеження.
  	 



Додаток А 
Хронологічний опис та посилання 
 
 
Відеозапис доповіді на YouTube:  https://youtu.be/rn69UBsRJak
 
Хронологічний опис доповіді: 
У даному відео я розказую про патерн проектування "Декоратор" на 2 прикладах: програма для надсилання сповіщення і плеєр.
00:00 - Вступ
00:08 – Визначення що таке Декоратор, а також його характеристики
00:54 - Перший приклад - використання Декоратора у програмі для надсилання сповіщень.
01:44 - Вирішення проблеми першої проблеми спадкуванням – ненайкраще рішення
03:03 - Вирішення за допомогою Декоратора
04:16 - Другий приклад – створення відеоплеєра на  мові програмування PHP
05:20 – Вирішення – розширення функцій відеоплеєра з використанням шаблону проектування Декоратор
07:20 - Вирішення (продовження)
09:36 - Переваги і недоліки використання Декоратора
10:36 - Висновки
11:21 - Список використаної літератури
	 

Додаток Б 
Слайди презентації доповіді 
 
 
Рисунок Б.1 – Титульний слайд 
 
 
Рисунок Б.2 – Ознайомлення з Декоратором 

Рисунок Б.3 – Приклад проблеми зі сповіщеннями


Рисунок Б.4 – Рішення за допомогою спадквання


Рисунок Б.5 – Рішення за допомогою Декоратора


Рисунок Б.6 – Проблема розширення відео-плеєра

Рисунок Б.7 – Вирішення проблеми за допомогою Декоратора


Рисунок Б.8 – Вирішення проблеми за допомогою Декоратора


Рисунок Б.9 – Переваги і недоліки використання Декоратора


Рисунок Б.10 –Висновки


Рисунок Б.11 – Список використаної літератури

	 

Додаток В 
Приклад відеоплеєра у вигляді коду мовою програмування PHP 
 
 
1. <?php
2. 
3. class VideoPlayer {
4.     protected $video;
5.     protected $isPlaying = false;
6. 
7.     public function __construct(string $video) {
8.         $this->video = $video;
9.     }
10. 
11.     public function play(): string {
12.         $this->isPlaying = true;
13.         return "Відтворення відео: " . $this->video;
14.     }
15. 
16. }
17. 
18. // Використання:
19. $player = new VideoPlayer("film.mp4");
20. echo $player->play() . "\n";  // Відтворення відео: film.mp4
21. ?>
22. 
23. 
24. 
25. <?php
26. 
27. // Базовий інтерфейс для відеоплеєра
28. interface IVideoPlayer {
29.     public function play(): string;
30. }
31. 
32. // Основний клас відеоплеєра
33. class BasicVideoPlayer implements IVideoPlayer {
34.     protected $video;
35.     protected $isPlaying = false;
36. 
37.     public function __construct(string $video) {
38.         $this->video = $video;
39.     }
40. 
41.     public function play(): string {
42.         $this->isPlaying = true;
43.         return "Відтворення відео: " . $this->video;
44.     }
45. 
46. }
47. 
48. // Декоратор для додавання субтитрів
49. class SubtitlesDecorator implements IVideoPlayer {
50.     protected IVideoPlayer $player;
51.     protected string $subtitle;
52. 
53.     public function __construct(IVideoPlayer $player, string $subtitle) {
54.         $this->player = $player;
55.         $this->subtitle = $subtitle;
56.     }
57. 
58.     public function play(): string {
59.         return $this->player->play() . " + Субтитри: " . $this->subtitle;
60.     }
61. }
62. 
63. // Декоратор для зміни мови аудіодоріжки
64. class AudioLanguageDecorator implements IVideoPlayer {
65.     protected IVideoPlayer $player;
66.     protected string $language;
67. 
68.     public function __construct(IVideoPlayer $player, string $language) {
69.         $this->player = $player;
70.         $this->language = $language;
71.     }
72. 
73.     public function play(): string {
74.         return $this->player->play() . " + Аудіо: " . $this->language;
75.     }
76. }
77. 
78. // Декоратор для зміни якості відео
79. class QualityDecorator implements IVideoPlayer {
80.     protected IVideoPlayer $player;
81.     protected string $quality;
82. 
83.     public function __construct(IVideoPlayer $player, string $quality) {
84.         $this->player = $player;
85.         $this->quality = $quality;
86.     }
87. 
88.     public function play(): string {
89.         return $this->player->play() . " + Якість: " . $this->quality;
90.     }
91. }
92. 
93. // Використання
94. $video = new BasicVideoPlayer("movie.mp4");
95. 
96. // Додаємо субтитри
97. $videoWithSubtitles = new SubtitlesDecorator($video, "Ukrainian");
98. 
99. // Додаємо зміну мови аудіодоріжки
100. $videoWithAudio = new AudioLanguageDecorator($videoWithSubtitles, "English Dub");
101. 
102. // Додаємо зміну якості відео
103. $videoWithQuality = new QualityDecorator($videoWithAudio, "1080p");
104. 
105. echo $videoWithQuality->play();
106. // Виведе: Відтворення відео: movie.mp4 + Субтитри: Ukrainian + Аудіо: English Dub + Якість: 1080p
107. 
108. ?>
2 
 

2 
 



