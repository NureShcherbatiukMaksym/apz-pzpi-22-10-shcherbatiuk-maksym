# user  nobody; # Залиште або закоментуйте, якщо не впевнені
worker_processes  auto; # Кількість процесів Nginx, "auto" використовує стільки, скільки ядер CPU

# error_log  logs/error.log; # Можете розкоментувати для логування помилок
# pid        logs/nginx.pid;

events {
    worker_connections  1024; # Максимальна кількість одночасних з'єднань
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                   '$status $body_bytes_sent "$http_referer" '
    #                   '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    # gzip  on; # Рекомендується для стиснення відповідей (збільшує навантаження на CPU)

    # =========================================================
    # Налаштування балансування навантаження (Upstream)
    # =========================================================
    upstream backend_servers {
        # Тут вкажіть адреси і порти ваших PM2 екземплярів
        # Переконайтеся, що ви знаєте, на яких портах вони запускаються (наприклад, з 5001)
        # Додайте стільки server, скільки у вас екземплярів PM2
        server localhost:5001; # Перший екземпляр PM2
        server localhost:5002; # Другий екземпляр PM2
        server localhost:5003; # Третій екземпляр PM2
        server localhost:5004; # ... і так далі до останнього
        server localhost:5005;
        server localhost:5006;
        server localhost:5007;
        server localhost:5008;
        server localhost:5009;
        server localhost:5010;
        server localhost:5011;
        server localhost:5012;
        server localhost:5013;
        server localhost:5014;
        server localhost:5015;
        server localhost:5016;

        # Алгоритм балансування навантаження (можна вибрати):
        # round-robin (за замовчуванням): по черзі
        # least_conn: до сервера з найменшою кількістю активних з'єднань
        # ip_hash: розподіляє запити на основі IP-адреси клієнта (для "липких" сесій без Redis)
        # sticky; # Цей директив не підтримується в OSS Nginx, потрібен платний модуль або ip_hash
    }

    # =========================================================
    # Конфігурація сервера Nginx
    # =========================================================
    server {
        listen 5000; # Nginx буде слухати на цьому порту (ваш публічний порт)
        server_name localhost; # Доменне ім'я або IP, яке ви використовуєте

        location / {
            proxy_pass http://backend_servers; # Проксіюємо запити на наші бекенд-сервери
            proxy_http_version 1.1; # Важливо для WebSockets
            proxy_set_header Upgrade $http_upgrade; # Важливо для WebSockets
            proxy_set_header Connection "upgrade"; # Важливо для WebSockets
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Якщо у вас є Socket.IO, цей location теж важливий
        location /socket.io {
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400s; # Довгий таймаут для WebSockets
        }
    }
}